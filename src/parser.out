Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    INLINE

Grammar

Rule 0     S' -> start_node
Rule 1     start_node -> start_node global_declaration
Rule 2     start_node -> global_declaration
Rule 3     global_declaration -> function_definition
Rule 4     global_declaration -> declaration
Rule 5     declaration -> declaration_specifiers ;
Rule 6     declaration -> declaration_specifiers init_declarator_list ;
Rule 7     init_declarator_list -> init_declarator
Rule 8     init_declarator_list -> init_declarator_list , init_declarator
Rule 9     init_declarator -> declarator
Rule 10    init_declarator -> declarator = initializer
Rule 11    declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s
Rule 12    declaration_specifiers -> type_specifier
Rule 13    declaration_specifiers -> type_specifier declaration_specifiers_no_ts
Rule 14    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 15    declaration_specifiers_no_s -> type_specifier
Rule 16    declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s
Rule 17    declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s
Rule 18    declaration_specifiers_no_ts -> storage_class_specifier
Rule 19    declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s
Rule 20    declaration_specifiers_no_ts -> type_qualifier
Rule 21    declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts
Rule 22    declaration_specifiers_no_ts_s -> type_qualifier
Rule 23    declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s
Rule 24    storage_class_specifier -> TYPEDEF
Rule 25    storage_class_specifier -> EXTERN
Rule 26    storage_class_specifier -> STATIC
Rule 27    storage_class_specifier -> AUTO
Rule 28    storage_class_specifier -> REGISTER
Rule 29    type_specifier -> VOID
Rule 30    type_specifier -> CHAR
Rule 31    type_specifier -> SHORT
Rule 32    type_specifier -> SHORT INT
Rule 33    type_specifier -> INT SHORT
Rule 34    type_specifier -> INT
Rule 35    type_specifier -> LONG
Rule 36    type_specifier -> LONG INT
Rule 37    type_specifier -> INT LONG
Rule 38    type_specifier -> FLOAT
Rule 39    type_specifier -> DOUBLE
Rule 40    type_specifier -> FLOAT LONG
Rule 41    type_specifier -> LONG FLOAT
Rule 42    type_specifier -> DOUBLE LONG
Rule 43    type_specifier -> LONG DOUBLE
Rule 44    type_specifier -> SIGNED
Rule 45    type_specifier -> SIGNED INT
Rule 46    type_specifier -> SIGNED SHORT
Rule 47    type_specifier -> SIGNED SHORT INT
Rule 48    type_specifier -> SIGNED INT SHORT
Rule 49    type_specifier -> SIGNED LONG
Rule 50    type_specifier -> SIGNED LONG INT
Rule 51    type_specifier -> SIGNED INT LONG
Rule 52    type_specifier -> UNSIGNED
Rule 53    type_specifier -> UNSIGNED INT
Rule 54    type_specifier -> UNSIGNED SHORT
Rule 55    type_specifier -> UNSIGNED SHORT INT
Rule 56    type_specifier -> UNSIGNED INT SHORT
Rule 57    type_specifier -> UNSIGNED LONG
Rule 58    type_specifier -> UNSIGNED LONG INT
Rule 59    type_specifier -> UNSIGNED INT LONG
Rule 60    type_specifier -> struct_or_union_specifier
Rule 61    type_specifier -> enum_specifier
Rule 62    type_specifier -> BOOL
Rule 63    type_qualifier -> CONST
Rule 64    type_qualifier -> VOLATILE
Rule 65    type_qualifier -> RESTRICT
Rule 66    enum_specifier -> ENUM { enumerator_list }
Rule 67    enum_specifier -> ENUM identifier { enumerator_list }
Rule 68    enum_specifier -> ENUM { enumerator_list , }
Rule 69    enum_specifier -> ENUM identifier { enumerator_list , }
Rule 70    enum_specifier -> ENUM identifier
Rule 71    enumerator_list -> enumerator
Rule 72    enumerator_list -> enumerator_list , enumerator
Rule 73    enumerator -> identifier
Rule 74    enumerator -> identifier = constant_expression
Rule 75    struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list }
Rule 76    struct_or_union_specifier -> struct_or_union { struct_declaration_list }
Rule 77    struct_or_union_specifier -> struct_or_union identifier
Rule 78    struct_or_union -> STRUCT
Rule 79    struct_or_union -> UNION
Rule 80    struct_declaration_list -> struct_declaration
Rule 81    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 82    struct_declaration -> specifier_qualifier_list struct_declarator_list ;
Rule 83    specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts
Rule 84    specifier_qualifier_list -> type_specifier
Rule 85    specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 86    specifier_qualifier_list -> type_qualifier
Rule 87    specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts
Rule 88    specifier_qualifier_list_no_ts -> type_qualifier
Rule 89    struct_declarator_list -> struct_declarator
Rule 90    struct_declarator_list -> struct_declarator_list , struct_declarator
Rule 91    struct_declarator -> declarator
Rule 92    struct_declarator -> : constant_expression
Rule 93    struct_declarator -> declarator : constant_expression
Rule 94    declarator -> pointer direct_declarator
Rule 95    declarator -> direct_declarator
Rule 96    pointer -> *
Rule 97    pointer -> * type_qualifier_list
Rule 98    pointer -> * pointer
Rule 99    pointer -> * type_qualifier_list pointer
Rule 100   type_qualifier_list -> type_qualifier
Rule 101   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 102   direct_declarator -> direct_declarator_forlist
Rule 103   direct_declarator -> ( declarator )
Rule 104   direct_declarator -> direct_function_declarator
Rule 105   direct_declarator_forlist -> identifier
Rule 106   direct_declarator_forlist -> ( pointer direct_declarator_forlist )
Rule 107   direct_declarator_forlist -> ( direct_declarator_forlist )
Rule 108   direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ]
Rule 109   direct_declarator_forlist -> identifier [ constant_expression ]
Rule 110   direct_declarator_forlist -> identifier [ ]
Rule 111   parameter_list -> parameter_list_definition
Rule 112   parameter_list -> parameter_declaration
Rule 113   parameter_list -> parameter_declaration , parameter_list
Rule 114   parameter_declaration -> declaration_specifiers declarator
Rule 115   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 116   parameter_declaration -> declaration_specifiers
Rule 117   constant_expression -> conditional_expression
Rule 118   conditional_expression -> logical_or_expression
Rule 119   conditional_expression -> logical_or_expression ? expression : conditional_expression
Rule 120   logical_or_expression -> logical_and_expression
Rule 121   logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 122   logical_and_expression -> inclusive_or_expression
Rule 123   logical_and_expression -> logical_and_expression AND inclusive_or_expression
Rule 124   inclusive_or_expression -> exclusive_or_expression
Rule 125   inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 126   exclusive_or_expression -> and_expression
Rule 127   exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 128   and_expression -> equality_expression
Rule 129   and_expression -> and_expression & equality_expression
Rule 130   equality_expression -> relational_expression
Rule 131   equality_expression -> equality_expression EQUAL relational_expression
Rule 132   equality_expression -> equality_expression NE relational_expression
Rule 133   relational_expression -> shift_expression
Rule 134   relational_expression -> relational_expression < shift_expression
Rule 135   relational_expression -> relational_expression > shift_expression
Rule 136   relational_expression -> relational_expression LE shift_expression
Rule 137   relational_expression -> relational_expression GE shift_expression
Rule 138   shift_expression -> additive_expression
Rule 139   shift_expression -> shift_expression SHIFT_LEFT additive_expression
Rule 140   shift_expression -> shift_expression SHIFT_RIGHT additive_expression
Rule 141   additive_expression -> multiplicative_expression
Rule 142   additive_expression -> additive_expression + multiplicative_expression
Rule 143   additive_expression -> additive_expression - multiplicative_expression
Rule 144   multiplicative_expression -> cast_expression
Rule 145   multiplicative_expression -> multiplicative_expression * cast_expression
Rule 146   multiplicative_expression -> multiplicative_expression / cast_expression
Rule 147   multiplicative_expression -> multiplicative_expression % cast_expression
Rule 148   cast_expression -> unary_expression
Rule 149   cast_expression -> ( specifier_qualifier_list ) cast_expression
Rule 150   unary_expression -> primary_expression
Rule 151   unary_expression -> unary_operator cast_expression
Rule 152   unary_expression -> SIZEOF unary_expression
Rule 153   unary_expression -> SIZEOF ( specifier_qualifier_list )
Rule 154   unary_operator -> +
Rule 155   unary_operator -> -
Rule 156   unary_operator -> ~
Rule 157   unary_operator -> !
Rule 158   primary_expression -> CONSTANCE
Rule 159   primary_expression -> STRING_LITERAL
Rule 160   primary_expression -> ( expression )
Rule 161   expression -> constant_expression
Rule 162   expression -> expression , constant_expression
Rule 163   abstract_declarator -> pointer
Rule 164   abstract_declarator -> direct_abstract_declarator
Rule 165   abstract_declarator -> pointer direct_abstract_declarator
Rule 166   direct_abstract_declarator -> ( abstract_declarator )
Rule 167   direct_abstract_declarator -> [ ]
Rule 168   direct_abstract_declarator -> [ constant_expression ]
Rule 169   direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ]
Rule 170   direct_abstract_declarator -> parameter_type_list_definition
Rule 171   function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement
Rule 172   function_definition -> declaration_specifiers direct_function_declarator compound_statement
Rule 173   direct_function_declarator -> ( direct_function_declarator )
Rule 174   direct_function_declarator -> identifier parameter_type_list_definition
Rule 175   identifier -> ( identifier )
Rule 176   identifier -> ID
Rule 177   parameter_type_list_definition -> ( )
Rule 178   parameter_type_list_definition -> ( parameter_type_list_definition )
Rule 179   parameter_type_list_definition -> ( parameter_list )
Rule 180   parameter_list_definition -> parameter_declaration = constant_expression , parameter_list_definition
Rule 181   parameter_list_definition -> parameter_declaration = constant_expression
Rule 182   parameter_list_definition -> ELLIPSIS
Rule 183   compound_statement -> { }
Rule 184   compound_statement -> { block_item_list }
Rule 185   block_item_list -> block_item
Rule 186   block_item_list -> block_item_list block_item
Rule 187   block_item -> declaration
Rule 188   block_item -> statement
Rule 189   statement -> labeled_statement
Rule 190   statement -> compound_statement
Rule 191   statement -> expression_statement
Rule 192   statement -> selection_statement
Rule 193   statement -> iteration_statement
Rule 194   statement -> jump_statement
Rule 195   labeled_statement -> identifier :
Rule 196   expression_statement -> ;
Rule 197   expression_statement -> expression_variable ;
Rule 198   expression_variable -> assignment_expression
Rule 199   expression_variable -> expression_variable , assignment_expression
Rule 200   assignment_expression -> conditional_expression_v
Rule 201   assignment_expression -> unary_expression_v assignment_operator assignment_expression
Rule 202   assignment_operator -> =
Rule 203   assignment_operator -> AO_MUL
Rule 204   assignment_operator -> AO_DIV
Rule 205   assignment_operator -> AO_MOD
Rule 206   assignment_operator -> AO_PLUS
Rule 207   assignment_operator -> AO_SUB
Rule 208   assignment_operator -> AO_SL
Rule 209   assignment_operator -> AO_SR
Rule 210   assignment_operator -> AO_AND
Rule 211   assignment_operator -> AO_XOR
Rule 212   assignment_operator -> AO_OR
Rule 213   conditional_expression_v -> logical_or_expression_v
Rule 214   conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v
Rule 215   logical_or_expression_v -> logical_and_expression_v
Rule 216   logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v
Rule 217   logical_and_expression_v -> inclusive_or_expression_v
Rule 218   logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v
Rule 219   inclusive_or_expression_v -> exclusive_or_expression_v
Rule 220   inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v
Rule 221   exclusive_or_expression_v -> and_expression_v
Rule 222   exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v
Rule 223   and_expression_v -> equality_expression_v
Rule 224   and_expression_v -> and_expression_v & equality_expression_v
Rule 225   equality_expression_v -> relational_expression_v
Rule 226   equality_expression_v -> equality_expression_v EQUAL relational_expression_v
Rule 227   equality_expression_v -> equality_expression_v NE relational_expression_v
Rule 228   relational_expression_v -> shift_expression_v
Rule 229   relational_expression_v -> relational_expression_v < shift_expression_v
Rule 230   relational_expression_v -> relational_expression_v > shift_expression_v
Rule 231   relational_expression_v -> relational_expression_v LE shift_expression_v
Rule 232   relational_expression_v -> relational_expression_v GE shift_expression_v
Rule 233   shift_expression_v -> additive_expression_v
Rule 234   shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v
Rule 235   shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v
Rule 236   additive_expression_v -> multiplicative_expression_v
Rule 237   additive_expression_v -> additive_expression_v + multiplicative_expression_v
Rule 238   additive_expression_v -> additive_expression_v - multiplicative_expression_v
Rule 239   multiplicative_expression_v -> cast_expression_v
Rule 240   multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v
Rule 241   multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v
Rule 242   multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v
Rule 243   cast_expression_v -> unary_expression_v
Rule 244   cast_expression_v -> unary_expression_v_constance
Rule 245   cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v
Rule 246   unary_expression_v_constance -> primary_expression_v
Rule 247   unary_expression_v_constance -> SIZEOF unary_expression_v_constance
Rule 248   unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list )
Rule 249   unary_expression_v -> postfix_expression_v
Rule 250   unary_expression_v -> INC unary_expression_v
Rule 251   unary_expression_v -> DEC unary_expression_v
Rule 252   unary_expression_v -> unary_operator_v cast_expression_v
Rule 253   unary_expression_v -> SIZEOF unary_expression_v
Rule 254   unary_operator_v -> &
Rule 255   unary_operator_v -> *
Rule 256   unary_operator_v -> +
Rule 257   unary_operator_v -> -
Rule 258   unary_operator_v -> ~
Rule 259   unary_operator_v -> !
Rule 260   postfix_expression_v -> postfix_expression_v_no_func
Rule 261   postfix_expression_v -> postfix_expression_v [ expression ]
Rule 262   postfix_expression_v -> identifier ( )
Rule 263   postfix_expression_v -> identifier ( argument_expression_list )
Rule 264   postfix_expression_v -> postfix_expression_v . ID
Rule 265   postfix_expression_v -> postfix_expression_v PTR ID
Rule 266   postfix_expression_v -> postfix_expression_v_no_func INC
Rule 267   postfix_expression_v -> postfix_expression_v_no_func DEC
Rule 268   postfix_expression_v_no_func -> identifier
Rule 269   postfix_expression_v_no_func -> ( postfix_expression_v_no_func )
Rule 270   postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ]
Rule 271   postfix_expression_v_no_func -> postfix_expression_v_no_func . ID
Rule 272   postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID
Rule 273   primary_expression_v -> CONSTANCE
Rule 274   primary_expression_v -> STRING_LITERAL
Rule 275   primary_expression_v -> ( expression_variable )
Rule 276   selection_statement -> IF ( expression_variable ) statement ELSE statement
Rule 277   selection_statement -> IF ( expression_variable ) statement
Rule 278   selection_statement -> SWITCH ( expression_variable ) statement_switch
Rule 279   compound_statement_switch -> { }
Rule 280   compound_statement_switch -> { block_item_list_switch }
Rule 281   block_item_list_switch -> block_item_switch
Rule 282   block_item_list_switch -> block_item_list_switch block_item_switch
Rule 283   block_item_switch -> declaration
Rule 284   block_item_switch -> statement_switch
Rule 285   statement_switch -> labeled_statement_switch
Rule 286   statement_switch -> compound_statement_switch
Rule 287   statement_switch -> expression_statement
Rule 288   statement_switch -> selection_statement
Rule 289   statement_switch -> iteration_statement
Rule 290   statement_switch -> jump_statement
Rule 291   labeled_statement_switch -> ID :
Rule 292   labeled_statement_switch -> CASE constant_expression : statement
Rule 293   labeled_statement_switch -> DEFAULT : statement
Rule 294   iteration_statement -> WHILE ( expression_variable ) statement
Rule 295   iteration_statement -> DO statement WHILE ( expression_variable ) ;
Rule 296   iteration_statement -> FOR ( expression_statement expression_statement ) statement
Rule 297   iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement
Rule 298   iteration_statement -> FOR ( declaration expression_statement ) statement
Rule 299   iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement
Rule 300   jump_statement -> GOTO ID ;
Rule 301   jump_statement -> CONTINUE ;
Rule 302   jump_statement -> BREAK ;
Rule 303   jump_statement -> RETURN ;
Rule 304   jump_statement -> RETURN expression_variable ;
Rule 305   argument_expression_list -> assignment_expression
Rule 306   argument_expression_list -> argument_expression_list , assignment_expression
Rule 307   initializer_list -> initializer
Rule 308   initializer_list -> designation initializer
Rule 309   initializer_list -> initializer_list , initializer
Rule 310   initializer_list -> initializer_list , designation initializer
Rule 311   initializer -> assignment_expression
Rule 312   initializer -> { initializer_list }
Rule 313   initializer -> { initializer_list , }
Rule 314   designation -> designator_list =
Rule 315   designator_list -> designator
Rule 316   designator_list -> designator_list designator
Rule 317   designator -> [ constant_expression ]
Rule 318   designator -> . ID

Terminals, with rules where they appear

!                    : 157 259
%                    : 147 242
&                    : 129 224 254
(                    : 103 106 107 149 153 160 166 173 175 177 178 179 245 248 262 263 269 275 276 277 278 294 295 296 297 298 299
)                    : 103 106 107 149 153 160 166 173 175 177 178 179 245 248 262 263 269 275 276 277 278 294 295 296 297 298 299
*                    : 96 97 98 99 145 240 255
+                    : 142 154 237 256
,                    : 8 68 69 72 90 113 162 180 199 306 309 310 313
-                    : 143 155 238 257
.                    : 264 271 318
/                    : 146 241
:                    : 92 93 119 195 214 291 292 293
;                    : 5 6 82 196 197 295 300 301 302 303 304
<                    : 134 229
=                    : 10 74 180 181 202 314
>                    : 135 230
?                    : 119 214
AND                  : 123 218
AO_AND               : 210
AO_DIV               : 204
AO_MOD               : 205
AO_MUL               : 203
AO_OR                : 212
AO_PLUS              : 206
AO_SL                : 208
AO_SR                : 209
AO_SUB               : 207
AO_XOR               : 211
AUTO                 : 27
BOOL                 : 62
BREAK                : 302
CASE                 : 292
CHAR                 : 30
CONST                : 63
CONSTANCE            : 158 273
CONTINUE             : 301
DEC                  : 251 267
DEFAULT              : 293
DO                   : 295
DOUBLE               : 39 42 43
ELLIPSIS             : 182
ELSE                 : 276
ENUM                 : 66 67 68 69 70
EQUAL                : 131 226
EXTERN               : 25
FLOAT                : 38 40 41
FOR                  : 296 297 298 299
GE                   : 137 232
GOTO                 : 300
ID                   : 176 264 265 271 272 291 300 318
IF                   : 276 277
INC                  : 250 266
INLINE               : 
INT                  : 32 33 34 36 37 45 47 48 50 51 53 55 56 58 59
LE                   : 136 231
LONG                 : 35 36 37 40 41 42 43 49 50 51 57 58 59
NE                   : 132 227
OR                   : 121 216
PTR                  : 265 272
REGISTER             : 28
RESTRICT             : 65
RETURN               : 303 304
SHIFT_LEFT           : 139 234
SHIFT_RIGHT          : 140 235
SHORT                : 31 32 33 46 47 48 54 55 56
SIGNED               : 44 45 46 47 48 49 50 51
SIZEOF               : 152 153 247 248 253
STATIC               : 26
STRING_LITERAL       : 159 274
STRUCT               : 78
SWITCH               : 278
TYPEDEF              : 24
UNION                : 79
UNSIGNED             : 52 53 54 55 56 57 58 59
VOID                 : 29
VOLATILE             : 64
WHILE                : 294 295
[                    : 108 109 110 167 168 169 261 270 317
]                    : 108 109 110 167 168 169 261 270 317
^                    : 127 222
error                : 
{                    : 66 67 68 69 75 76 183 184 279 280 312 313
|                    : 125 220
}                    : 66 67 68 69 75 76 183 184 279 280 312 313
~                    : 156 258

Nonterminals, with rules where they appear

abstract_declarator  : 115 166
additive_expression  : 138 139 140 142 143
additive_expression_v : 233 234 235 237 238
and_expression       : 126 127 129
and_expression_v     : 221 222 224
argument_expression_list : 263 306
assignment_expression : 198 199 201 305 306 311
assignment_operator  : 201
block_item           : 185 186
block_item_list      : 184 186
block_item_list_switch : 280 282
block_item_switch    : 281 282
cast_expression      : 144 145 146 147 149 151
cast_expression_v    : 239 240 241 242 245 252
compound_statement   : 171 172 190
compound_statement_switch : 286
conditional_expression : 117 119
conditional_expression_v : 200 214
constant_expression  : 74 92 93 108 109 161 162 168 169 180 181 292 317
declaration          : 4 187 283 298 299
declaration_specifiers : 5 6 14 114 115 116 171 172
declaration_specifiers_no_s : 11 17
declaration_specifiers_no_ts : 13 21
declaration_specifiers_no_ts_s : 16 19 23
declarator           : 9 10 91 93 103 114
designation          : 308 310
designator           : 315 316
designator_list      : 314 316
direct_abstract_declarator : 164 165 169
direct_declarator    : 94 95
direct_declarator_forlist : 102 106 107 108
direct_function_declarator : 104 171 172 173
enum_specifier       : 61
enumerator           : 71 72
enumerator_list      : 66 67 68 69 72
equality_expression  : 128 129 131 132
equality_expression_v : 223 224 226 227
exclusive_or_expression : 124 125 127
exclusive_or_expression_v : 219 220 222
expression           : 119 160 162 261 270
expression_statement : 191 287 296 296 297 297 298 299
expression_variable  : 197 199 214 275 276 277 278 294 295 297 299 304
function_definition  : 3
global_declaration   : 1 2
identifier           : 67 69 70 73 74 75 77 105 109 110 174 175 195 262 263 268
inclusive_or_expression : 122 123 125
inclusive_or_expression_v : 217 218 220
init_declarator      : 7 8
init_declarator_list : 6 8
initializer          : 10 307 308 309 310
initializer_list     : 309 310 312 313
iteration_statement  : 193 289
jump_statement       : 194 290
labeled_statement    : 189
labeled_statement_switch : 285
logical_and_expression : 120 121 123
logical_and_expression_v : 215 216 218
logical_or_expression : 118 119 121
logical_or_expression_v : 213 214 216
multiplicative_expression : 141 142 143 145 146 147
multiplicative_expression_v : 236 237 238 240 241 242
parameter_declaration : 112 113 180 181
parameter_list       : 113 179
parameter_list_definition : 111 180
parameter_type_list_definition : 170 174 178
pointer              : 94 98 99 106 163 165 171
postfix_expression_v : 249 261 264 265
postfix_expression_v_no_func : 260 266 267 269 270 271 272
primary_expression   : 150
primary_expression_v : 246
relational_expression : 130 131 132 134 135 136 137
relational_expression_v : 225 226 227 229 230 231 232
selection_statement  : 192 288
shift_expression     : 133 134 135 136 137 139 140
shift_expression_v   : 228 229 230 231 232 234 235
specifier_qualifier_list : 82 85 149 153 245 248
specifier_qualifier_list_no_ts : 83 87
start_node           : 1 0
statement            : 188 276 276 277 292 293 294 295 296 297 298 299
statement_switch     : 278 284
storage_class_specifier : 11 18 19
struct_declaration   : 80 81
struct_declaration_list : 75 76 81
struct_declarator    : 89 90
struct_declarator_list : 82 90
struct_or_union      : 75 76 77
struct_or_union_specifier : 60
type_qualifier       : 14 17 20 21 22 23 85 86 87 88 100 101
type_qualifier_list  : 97 99 101
type_specifier       : 12 13 15 16 83 84
unary_expression     : 148 152
unary_expression_v   : 201 243 250 251 253
unary_expression_v_constance : 244 247
unary_operator       : 151
unary_operator_v     : 252

Parsing method: LALR

state 0

    (0) S' -> . start_node
    (1) start_node -> . start_node global_declaration
    (2) start_node -> . global_declaration
    (3) global_declaration -> . function_definition
    (4) global_declaration -> . declaration
    (171) function_definition -> . declaration_specifiers pointer direct_function_declarator compound_statement
    (172) function_definition -> . declaration_specifiers direct_function_declarator compound_statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    start_node                     shift and go to state 1
    global_declaration             shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 1

    (0) S' -> start_node .
    (1) start_node -> start_node . global_declaration
    (3) global_declaration -> . function_definition
    (4) global_declaration -> . declaration
    (171) function_definition -> . declaration_specifiers pointer direct_function_declarator compound_statement
    (172) function_definition -> . declaration_specifiers direct_function_declarator compound_statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    global_declaration             shift and go to state 33
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 2

    (2) start_node -> global_declaration .

    TYPEDEF         reduce using rule 2 (start_node -> global_declaration .)
    EXTERN          reduce using rule 2 (start_node -> global_declaration .)
    STATIC          reduce using rule 2 (start_node -> global_declaration .)
    AUTO            reduce using rule 2 (start_node -> global_declaration .)
    REGISTER        reduce using rule 2 (start_node -> global_declaration .)
    VOID            reduce using rule 2 (start_node -> global_declaration .)
    CHAR            reduce using rule 2 (start_node -> global_declaration .)
    SHORT           reduce using rule 2 (start_node -> global_declaration .)
    INT             reduce using rule 2 (start_node -> global_declaration .)
    LONG            reduce using rule 2 (start_node -> global_declaration .)
    FLOAT           reduce using rule 2 (start_node -> global_declaration .)
    DOUBLE          reduce using rule 2 (start_node -> global_declaration .)
    SIGNED          reduce using rule 2 (start_node -> global_declaration .)
    UNSIGNED        reduce using rule 2 (start_node -> global_declaration .)
    BOOL            reduce using rule 2 (start_node -> global_declaration .)
    CONST           reduce using rule 2 (start_node -> global_declaration .)
    VOLATILE        reduce using rule 2 (start_node -> global_declaration .)
    RESTRICT        reduce using rule 2 (start_node -> global_declaration .)
    ENUM            reduce using rule 2 (start_node -> global_declaration .)
    STRUCT          reduce using rule 2 (start_node -> global_declaration .)
    UNION           reduce using rule 2 (start_node -> global_declaration .)
    $end            reduce using rule 2 (start_node -> global_declaration .)


state 3

    (3) global_declaration -> function_definition .

    TYPEDEF         reduce using rule 3 (global_declaration -> function_definition .)
    EXTERN          reduce using rule 3 (global_declaration -> function_definition .)
    STATIC          reduce using rule 3 (global_declaration -> function_definition .)
    AUTO            reduce using rule 3 (global_declaration -> function_definition .)
    REGISTER        reduce using rule 3 (global_declaration -> function_definition .)
    VOID            reduce using rule 3 (global_declaration -> function_definition .)
    CHAR            reduce using rule 3 (global_declaration -> function_definition .)
    SHORT           reduce using rule 3 (global_declaration -> function_definition .)
    INT             reduce using rule 3 (global_declaration -> function_definition .)
    LONG            reduce using rule 3 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 3 (global_declaration -> function_definition .)
    DOUBLE          reduce using rule 3 (global_declaration -> function_definition .)
    SIGNED          reduce using rule 3 (global_declaration -> function_definition .)
    UNSIGNED        reduce using rule 3 (global_declaration -> function_definition .)
    BOOL            reduce using rule 3 (global_declaration -> function_definition .)
    CONST           reduce using rule 3 (global_declaration -> function_definition .)
    VOLATILE        reduce using rule 3 (global_declaration -> function_definition .)
    RESTRICT        reduce using rule 3 (global_declaration -> function_definition .)
    ENUM            reduce using rule 3 (global_declaration -> function_definition .)
    STRUCT          reduce using rule 3 (global_declaration -> function_definition .)
    UNION           reduce using rule 3 (global_declaration -> function_definition .)
    $end            reduce using rule 3 (global_declaration -> function_definition .)


state 4

    (4) global_declaration -> declaration .

    TYPEDEF         reduce using rule 4 (global_declaration -> declaration .)
    EXTERN          reduce using rule 4 (global_declaration -> declaration .)
    STATIC          reduce using rule 4 (global_declaration -> declaration .)
    AUTO            reduce using rule 4 (global_declaration -> declaration .)
    REGISTER        reduce using rule 4 (global_declaration -> declaration .)
    VOID            reduce using rule 4 (global_declaration -> declaration .)
    CHAR            reduce using rule 4 (global_declaration -> declaration .)
    SHORT           reduce using rule 4 (global_declaration -> declaration .)
    INT             reduce using rule 4 (global_declaration -> declaration .)
    LONG            reduce using rule 4 (global_declaration -> declaration .)
    FLOAT           reduce using rule 4 (global_declaration -> declaration .)
    DOUBLE          reduce using rule 4 (global_declaration -> declaration .)
    SIGNED          reduce using rule 4 (global_declaration -> declaration .)
    UNSIGNED        reduce using rule 4 (global_declaration -> declaration .)
    BOOL            reduce using rule 4 (global_declaration -> declaration .)
    CONST           reduce using rule 4 (global_declaration -> declaration .)
    VOLATILE        reduce using rule 4 (global_declaration -> declaration .)
    RESTRICT        reduce using rule 4 (global_declaration -> declaration .)
    ENUM            reduce using rule 4 (global_declaration -> declaration .)
    STRUCT          reduce using rule 4 (global_declaration -> declaration .)
    UNION           reduce using rule 4 (global_declaration -> declaration .)
    $end            reduce using rule 4 (global_declaration -> declaration .)


state 5

    (171) function_definition -> declaration_specifiers . pointer direct_function_declarator compound_statement
    (172) function_definition -> declaration_specifiers . direct_function_declarator compound_statement
    (5) declaration -> declaration_specifiers . ;
    (6) declaration -> declaration_specifiers . init_declarator_list ;
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (7) init_declarator_list -> . init_declarator
    (8) init_declarator_list -> . init_declarator_list , init_declarator
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (9) init_declarator -> . declarator
    (10) init_declarator -> . declarator = initializer
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]

    ;               shift and go to state 36
    *               shift and go to state 38
    (               shift and go to state 39
    ID              shift and go to state 42

    pointer                        shift and go to state 34
    direct_function_declarator     shift and go to state 35
    init_declarator_list           shift and go to state 37
    identifier                     shift and go to state 40
    init_declarator                shift and go to state 41
    declarator                     shift and go to state 43
    direct_declarator              shift and go to state 44
    direct_declarator_forlist      shift and go to state 45

state 6

    (11) declaration_specifiers -> storage_class_specifier . declaration_specifiers_no_s
    (15) declaration_specifiers_no_s -> . type_specifier
    (16) declaration_specifiers_no_s -> . type_specifier declaration_specifiers_no_ts_s
    (17) declaration_specifiers_no_s -> . type_qualifier declaration_specifiers_no_s
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    declaration_specifiers_no_s    shift and go to state 46
    type_specifier                 shift and go to state 47
    type_qualifier                 shift and go to state 48
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 7

    (12) declaration_specifiers -> type_specifier .
    (13) declaration_specifiers -> type_specifier . declaration_specifiers_no_ts
    (18) declaration_specifiers_no_ts -> . storage_class_specifier
    (19) declaration_specifiers_no_ts -> . storage_class_specifier declaration_specifiers_no_ts_s
    (20) declaration_specifiers_no_ts -> . type_qualifier
    (21) declaration_specifiers_no_ts -> . type_qualifier declaration_specifiers_no_ts
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    ;               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    *               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    (               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 12 (declaration_specifiers -> type_specifier .)
    [               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    ,               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    =               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    )               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    declaration_specifiers_no_ts   shift and go to state 49
    storage_class_specifier        shift and go to state 50
    type_qualifier                 shift and go to state 51

state 8

    (14) declaration_specifiers -> type_qualifier . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    type_qualifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 52
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 9

    (24) storage_class_specifier -> TYPEDEF .

    VOID            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    ;               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    *               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    (               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    [               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    ,               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    =               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    )               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)


state 10

    (25) storage_class_specifier -> EXTERN .

    VOID            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 25 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 25 (storage_class_specifier -> EXTERN .)
    BOOL            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 25 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 25 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    ;               reduce using rule 25 (storage_class_specifier -> EXTERN .)
    *               reduce using rule 25 (storage_class_specifier -> EXTERN .)
    (               reduce using rule 25 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 25 (storage_class_specifier -> EXTERN .)
    [               reduce using rule 25 (storage_class_specifier -> EXTERN .)
    ,               reduce using rule 25 (storage_class_specifier -> EXTERN .)
    =               reduce using rule 25 (storage_class_specifier -> EXTERN .)
    )               reduce using rule 25 (storage_class_specifier -> EXTERN .)


state 11

    (26) storage_class_specifier -> STATIC .

    VOID            reduce using rule 26 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 26 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 26 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 26 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 26 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 26 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 26 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 26 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 26 (storage_class_specifier -> STATIC .)
    BOOL            reduce using rule 26 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 26 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 26 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 26 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 26 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 26 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 26 (storage_class_specifier -> STATIC .)
    ;               reduce using rule 26 (storage_class_specifier -> STATIC .)
    *               reduce using rule 26 (storage_class_specifier -> STATIC .)
    (               reduce using rule 26 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 26 (storage_class_specifier -> STATIC .)
    [               reduce using rule 26 (storage_class_specifier -> STATIC .)
    ,               reduce using rule 26 (storage_class_specifier -> STATIC .)
    =               reduce using rule 26 (storage_class_specifier -> STATIC .)
    )               reduce using rule 26 (storage_class_specifier -> STATIC .)


state 12

    (27) storage_class_specifier -> AUTO .

    VOID            reduce using rule 27 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 27 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 27 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 27 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 27 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 27 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 27 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 27 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 27 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 27 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 27 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 27 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 27 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 27 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 27 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 27 (storage_class_specifier -> AUTO .)
    ;               reduce using rule 27 (storage_class_specifier -> AUTO .)
    *               reduce using rule 27 (storage_class_specifier -> AUTO .)
    (               reduce using rule 27 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 27 (storage_class_specifier -> AUTO .)
    [               reduce using rule 27 (storage_class_specifier -> AUTO .)
    ,               reduce using rule 27 (storage_class_specifier -> AUTO .)
    =               reduce using rule 27 (storage_class_specifier -> AUTO .)
    )               reduce using rule 27 (storage_class_specifier -> AUTO .)


state 13

    (28) storage_class_specifier -> REGISTER .

    VOID            reduce using rule 28 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 28 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 28 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 28 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 28 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 28 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 28 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 28 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 28 (storage_class_specifier -> REGISTER .)
    BOOL            reduce using rule 28 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 28 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 28 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 28 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 28 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 28 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 28 (storage_class_specifier -> REGISTER .)
    ;               reduce using rule 28 (storage_class_specifier -> REGISTER .)
    *               reduce using rule 28 (storage_class_specifier -> REGISTER .)
    (               reduce using rule 28 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 28 (storage_class_specifier -> REGISTER .)
    [               reduce using rule 28 (storage_class_specifier -> REGISTER .)
    ,               reduce using rule 28 (storage_class_specifier -> REGISTER .)
    =               reduce using rule 28 (storage_class_specifier -> REGISTER .)
    )               reduce using rule 28 (storage_class_specifier -> REGISTER .)


state 14

    (29) type_specifier -> VOID .

    TYPEDEF         reduce using rule 29 (type_specifier -> VOID .)
    EXTERN          reduce using rule 29 (type_specifier -> VOID .)
    STATIC          reduce using rule 29 (type_specifier -> VOID .)
    AUTO            reduce using rule 29 (type_specifier -> VOID .)
    REGISTER        reduce using rule 29 (type_specifier -> VOID .)
    CONST           reduce using rule 29 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 29 (type_specifier -> VOID .)
    RESTRICT        reduce using rule 29 (type_specifier -> VOID .)
    ;               reduce using rule 29 (type_specifier -> VOID .)
    *               reduce using rule 29 (type_specifier -> VOID .)
    (               reduce using rule 29 (type_specifier -> VOID .)
    ID              reduce using rule 29 (type_specifier -> VOID .)
    [               reduce using rule 29 (type_specifier -> VOID .)
    ,               reduce using rule 29 (type_specifier -> VOID .)
    =               reduce using rule 29 (type_specifier -> VOID .)
    )               reduce using rule 29 (type_specifier -> VOID .)
    :               reduce using rule 29 (type_specifier -> VOID .)


state 15

    (30) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 30 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 30 (type_specifier -> CHAR .)
    STATIC          reduce using rule 30 (type_specifier -> CHAR .)
    AUTO            reduce using rule 30 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 30 (type_specifier -> CHAR .)
    CONST           reduce using rule 30 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 30 (type_specifier -> CHAR .)
    RESTRICT        reduce using rule 30 (type_specifier -> CHAR .)
    ;               reduce using rule 30 (type_specifier -> CHAR .)
    *               reduce using rule 30 (type_specifier -> CHAR .)
    (               reduce using rule 30 (type_specifier -> CHAR .)
    ID              reduce using rule 30 (type_specifier -> CHAR .)
    [               reduce using rule 30 (type_specifier -> CHAR .)
    ,               reduce using rule 30 (type_specifier -> CHAR .)
    =               reduce using rule 30 (type_specifier -> CHAR .)
    )               reduce using rule 30 (type_specifier -> CHAR .)
    :               reduce using rule 30 (type_specifier -> CHAR .)


state 16

    (31) type_specifier -> SHORT .
    (32) type_specifier -> SHORT . INT

    TYPEDEF         reduce using rule 31 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 31 (type_specifier -> SHORT .)
    STATIC          reduce using rule 31 (type_specifier -> SHORT .)
    AUTO            reduce using rule 31 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 31 (type_specifier -> SHORT .)
    CONST           reduce using rule 31 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 31 (type_specifier -> SHORT .)
    RESTRICT        reduce using rule 31 (type_specifier -> SHORT .)
    ;               reduce using rule 31 (type_specifier -> SHORT .)
    *               reduce using rule 31 (type_specifier -> SHORT .)
    (               reduce using rule 31 (type_specifier -> SHORT .)
    ID              reduce using rule 31 (type_specifier -> SHORT .)
    [               reduce using rule 31 (type_specifier -> SHORT .)
    ,               reduce using rule 31 (type_specifier -> SHORT .)
    =               reduce using rule 31 (type_specifier -> SHORT .)
    )               reduce using rule 31 (type_specifier -> SHORT .)
    :               reduce using rule 31 (type_specifier -> SHORT .)
    INT             shift and go to state 53


state 17

    (33) type_specifier -> INT . SHORT
    (34) type_specifier -> INT .
    (37) type_specifier -> INT . LONG

    SHORT           shift and go to state 54
    TYPEDEF         reduce using rule 34 (type_specifier -> INT .)
    EXTERN          reduce using rule 34 (type_specifier -> INT .)
    STATIC          reduce using rule 34 (type_specifier -> INT .)
    AUTO            reduce using rule 34 (type_specifier -> INT .)
    REGISTER        reduce using rule 34 (type_specifier -> INT .)
    CONST           reduce using rule 34 (type_specifier -> INT .)
    VOLATILE        reduce using rule 34 (type_specifier -> INT .)
    RESTRICT        reduce using rule 34 (type_specifier -> INT .)
    ;               reduce using rule 34 (type_specifier -> INT .)
    *               reduce using rule 34 (type_specifier -> INT .)
    (               reduce using rule 34 (type_specifier -> INT .)
    ID              reduce using rule 34 (type_specifier -> INT .)
    [               reduce using rule 34 (type_specifier -> INT .)
    ,               reduce using rule 34 (type_specifier -> INT .)
    =               reduce using rule 34 (type_specifier -> INT .)
    )               reduce using rule 34 (type_specifier -> INT .)
    :               reduce using rule 34 (type_specifier -> INT .)
    LONG            shift and go to state 55


state 18

    (35) type_specifier -> LONG .
    (36) type_specifier -> LONG . INT
    (41) type_specifier -> LONG . FLOAT
    (43) type_specifier -> LONG . DOUBLE

    TYPEDEF         reduce using rule 35 (type_specifier -> LONG .)
    EXTERN          reduce using rule 35 (type_specifier -> LONG .)
    STATIC          reduce using rule 35 (type_specifier -> LONG .)
    AUTO            reduce using rule 35 (type_specifier -> LONG .)
    REGISTER        reduce using rule 35 (type_specifier -> LONG .)
    CONST           reduce using rule 35 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 35 (type_specifier -> LONG .)
    RESTRICT        reduce using rule 35 (type_specifier -> LONG .)
    ;               reduce using rule 35 (type_specifier -> LONG .)
    *               reduce using rule 35 (type_specifier -> LONG .)
    (               reduce using rule 35 (type_specifier -> LONG .)
    ID              reduce using rule 35 (type_specifier -> LONG .)
    [               reduce using rule 35 (type_specifier -> LONG .)
    ,               reduce using rule 35 (type_specifier -> LONG .)
    =               reduce using rule 35 (type_specifier -> LONG .)
    )               reduce using rule 35 (type_specifier -> LONG .)
    :               reduce using rule 35 (type_specifier -> LONG .)
    INT             shift and go to state 56
    FLOAT           shift and go to state 57
    DOUBLE          shift and go to state 58


state 19

    (38) type_specifier -> FLOAT .
    (40) type_specifier -> FLOAT . LONG

    TYPEDEF         reduce using rule 38 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 38 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 38 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 38 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 38 (type_specifier -> FLOAT .)
    CONST           reduce using rule 38 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 38 (type_specifier -> FLOAT .)
    RESTRICT        reduce using rule 38 (type_specifier -> FLOAT .)
    ;               reduce using rule 38 (type_specifier -> FLOAT .)
    *               reduce using rule 38 (type_specifier -> FLOAT .)
    (               reduce using rule 38 (type_specifier -> FLOAT .)
    ID              reduce using rule 38 (type_specifier -> FLOAT .)
    [               reduce using rule 38 (type_specifier -> FLOAT .)
    ,               reduce using rule 38 (type_specifier -> FLOAT .)
    =               reduce using rule 38 (type_specifier -> FLOAT .)
    )               reduce using rule 38 (type_specifier -> FLOAT .)
    :               reduce using rule 38 (type_specifier -> FLOAT .)
    LONG            shift and go to state 59


state 20

    (39) type_specifier -> DOUBLE .
    (42) type_specifier -> DOUBLE . LONG

    TYPEDEF         reduce using rule 39 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 39 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 39 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 39 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 39 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 39 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 39 (type_specifier -> DOUBLE .)
    RESTRICT        reduce using rule 39 (type_specifier -> DOUBLE .)
    ;               reduce using rule 39 (type_specifier -> DOUBLE .)
    *               reduce using rule 39 (type_specifier -> DOUBLE .)
    (               reduce using rule 39 (type_specifier -> DOUBLE .)
    ID              reduce using rule 39 (type_specifier -> DOUBLE .)
    [               reduce using rule 39 (type_specifier -> DOUBLE .)
    ,               reduce using rule 39 (type_specifier -> DOUBLE .)
    =               reduce using rule 39 (type_specifier -> DOUBLE .)
    )               reduce using rule 39 (type_specifier -> DOUBLE .)
    :               reduce using rule 39 (type_specifier -> DOUBLE .)
    LONG            shift and go to state 60


state 21

    (44) type_specifier -> SIGNED .
    (45) type_specifier -> SIGNED . INT
    (46) type_specifier -> SIGNED . SHORT
    (47) type_specifier -> SIGNED . SHORT INT
    (48) type_specifier -> SIGNED . INT SHORT
    (49) type_specifier -> SIGNED . LONG
    (50) type_specifier -> SIGNED . LONG INT
    (51) type_specifier -> SIGNED . INT LONG

    TYPEDEF         reduce using rule 44 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 44 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 44 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 44 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 44 (type_specifier -> SIGNED .)
    CONST           reduce using rule 44 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 44 (type_specifier -> SIGNED .)
    RESTRICT        reduce using rule 44 (type_specifier -> SIGNED .)
    ;               reduce using rule 44 (type_specifier -> SIGNED .)
    *               reduce using rule 44 (type_specifier -> SIGNED .)
    (               reduce using rule 44 (type_specifier -> SIGNED .)
    ID              reduce using rule 44 (type_specifier -> SIGNED .)
    [               reduce using rule 44 (type_specifier -> SIGNED .)
    ,               reduce using rule 44 (type_specifier -> SIGNED .)
    =               reduce using rule 44 (type_specifier -> SIGNED .)
    )               reduce using rule 44 (type_specifier -> SIGNED .)
    :               reduce using rule 44 (type_specifier -> SIGNED .)
    INT             shift and go to state 61
    SHORT           shift and go to state 62
    LONG            shift and go to state 63


state 22

    (52) type_specifier -> UNSIGNED .
    (53) type_specifier -> UNSIGNED . INT
    (54) type_specifier -> UNSIGNED . SHORT
    (55) type_specifier -> UNSIGNED . SHORT INT
    (56) type_specifier -> UNSIGNED . INT SHORT
    (57) type_specifier -> UNSIGNED . LONG
    (58) type_specifier -> UNSIGNED . LONG INT
    (59) type_specifier -> UNSIGNED . INT LONG

    TYPEDEF         reduce using rule 52 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 52 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 52 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 52 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 52 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 52 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 52 (type_specifier -> UNSIGNED .)
    RESTRICT        reduce using rule 52 (type_specifier -> UNSIGNED .)
    ;               reduce using rule 52 (type_specifier -> UNSIGNED .)
    *               reduce using rule 52 (type_specifier -> UNSIGNED .)
    (               reduce using rule 52 (type_specifier -> UNSIGNED .)
    ID              reduce using rule 52 (type_specifier -> UNSIGNED .)
    [               reduce using rule 52 (type_specifier -> UNSIGNED .)
    ,               reduce using rule 52 (type_specifier -> UNSIGNED .)
    =               reduce using rule 52 (type_specifier -> UNSIGNED .)
    )               reduce using rule 52 (type_specifier -> UNSIGNED .)
    :               reduce using rule 52 (type_specifier -> UNSIGNED .)
    INT             shift and go to state 64
    SHORT           shift and go to state 65
    LONG            shift and go to state 66


state 23

    (60) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    ;               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    *               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    (               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    ID              reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    [               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    ,               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    =               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    )               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    :               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)


state 24

    (61) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 61 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 61 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 61 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 61 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 61 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 61 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 61 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 61 (type_specifier -> enum_specifier .)
    ;               reduce using rule 61 (type_specifier -> enum_specifier .)
    *               reduce using rule 61 (type_specifier -> enum_specifier .)
    (               reduce using rule 61 (type_specifier -> enum_specifier .)
    ID              reduce using rule 61 (type_specifier -> enum_specifier .)
    [               reduce using rule 61 (type_specifier -> enum_specifier .)
    ,               reduce using rule 61 (type_specifier -> enum_specifier .)
    =               reduce using rule 61 (type_specifier -> enum_specifier .)
    )               reduce using rule 61 (type_specifier -> enum_specifier .)
    :               reduce using rule 61 (type_specifier -> enum_specifier .)


state 25

    (62) type_specifier -> BOOL .

    TYPEDEF         reduce using rule 62 (type_specifier -> BOOL .)
    EXTERN          reduce using rule 62 (type_specifier -> BOOL .)
    STATIC          reduce using rule 62 (type_specifier -> BOOL .)
    AUTO            reduce using rule 62 (type_specifier -> BOOL .)
    REGISTER        reduce using rule 62 (type_specifier -> BOOL .)
    CONST           reduce using rule 62 (type_specifier -> BOOL .)
    VOLATILE        reduce using rule 62 (type_specifier -> BOOL .)
    RESTRICT        reduce using rule 62 (type_specifier -> BOOL .)
    ;               reduce using rule 62 (type_specifier -> BOOL .)
    *               reduce using rule 62 (type_specifier -> BOOL .)
    (               reduce using rule 62 (type_specifier -> BOOL .)
    ID              reduce using rule 62 (type_specifier -> BOOL .)
    [               reduce using rule 62 (type_specifier -> BOOL .)
    ,               reduce using rule 62 (type_specifier -> BOOL .)
    =               reduce using rule 62 (type_specifier -> BOOL .)
    )               reduce using rule 62 (type_specifier -> BOOL .)
    :               reduce using rule 62 (type_specifier -> BOOL .)


state 26

    (63) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 63 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 63 (type_qualifier -> CONST .)
    STATIC          reduce using rule 63 (type_qualifier -> CONST .)
    AUTO            reduce using rule 63 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 63 (type_qualifier -> CONST .)
    VOID            reduce using rule 63 (type_qualifier -> CONST .)
    CHAR            reduce using rule 63 (type_qualifier -> CONST .)
    SHORT           reduce using rule 63 (type_qualifier -> CONST .)
    INT             reduce using rule 63 (type_qualifier -> CONST .)
    LONG            reduce using rule 63 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 63 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 63 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 63 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 63 (type_qualifier -> CONST .)
    BOOL            reduce using rule 63 (type_qualifier -> CONST .)
    CONST           reduce using rule 63 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 63 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 63 (type_qualifier -> CONST .)
    ENUM            reduce using rule 63 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 63 (type_qualifier -> CONST .)
    UNION           reduce using rule 63 (type_qualifier -> CONST .)
    ;               reduce using rule 63 (type_qualifier -> CONST .)
    *               reduce using rule 63 (type_qualifier -> CONST .)
    (               reduce using rule 63 (type_qualifier -> CONST .)
    ID              reduce using rule 63 (type_qualifier -> CONST .)
    [               reduce using rule 63 (type_qualifier -> CONST .)
    ,               reduce using rule 63 (type_qualifier -> CONST .)
    =               reduce using rule 63 (type_qualifier -> CONST .)
    )               reduce using rule 63 (type_qualifier -> CONST .)
    :               reduce using rule 63 (type_qualifier -> CONST .)


state 27

    (64) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 64 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 64 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 64 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 64 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 64 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 64 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 64 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 64 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 64 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 64 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 64 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 64 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 64 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 64 (type_qualifier -> VOLATILE .)
    BOOL            reduce using rule 64 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 64 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 64 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 64 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 64 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 64 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 64 (type_qualifier -> VOLATILE .)
    ;               reduce using rule 64 (type_qualifier -> VOLATILE .)
    *               reduce using rule 64 (type_qualifier -> VOLATILE .)
    (               reduce using rule 64 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 64 (type_qualifier -> VOLATILE .)
    [               reduce using rule 64 (type_qualifier -> VOLATILE .)
    ,               reduce using rule 64 (type_qualifier -> VOLATILE .)
    =               reduce using rule 64 (type_qualifier -> VOLATILE .)
    )               reduce using rule 64 (type_qualifier -> VOLATILE .)
    :               reduce using rule 64 (type_qualifier -> VOLATILE .)


state 28

    (65) type_qualifier -> RESTRICT .

    TYPEDEF         reduce using rule 65 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 65 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 65 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 65 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 65 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 65 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 65 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 65 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 65 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 65 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 65 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 65 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 65 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 65 (type_qualifier -> RESTRICT .)
    BOOL            reduce using rule 65 (type_qualifier -> RESTRICT .)
    CONST           reduce using rule 65 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 65 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 65 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 65 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 65 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 65 (type_qualifier -> RESTRICT .)
    ;               reduce using rule 65 (type_qualifier -> RESTRICT .)
    *               reduce using rule 65 (type_qualifier -> RESTRICT .)
    (               reduce using rule 65 (type_qualifier -> RESTRICT .)
    ID              reduce using rule 65 (type_qualifier -> RESTRICT .)
    [               reduce using rule 65 (type_qualifier -> RESTRICT .)
    ,               reduce using rule 65 (type_qualifier -> RESTRICT .)
    =               reduce using rule 65 (type_qualifier -> RESTRICT .)
    )               reduce using rule 65 (type_qualifier -> RESTRICT .)
    :               reduce using rule 65 (type_qualifier -> RESTRICT .)


state 29

    (75) struct_or_union_specifier -> struct_or_union . identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> struct_or_union . { struct_declaration_list }
    (77) struct_or_union_specifier -> struct_or_union . identifier
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    {               shift and go to state 68
    (               shift and go to state 69
    ID              shift and go to state 42

    identifier                     shift and go to state 67

state 30

    (66) enum_specifier -> ENUM . { enumerator_list }
    (67) enum_specifier -> ENUM . identifier { enumerator_list }
    (68) enum_specifier -> ENUM . { enumerator_list , }
    (69) enum_specifier -> ENUM . identifier { enumerator_list , }
    (70) enum_specifier -> ENUM . identifier
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    {               shift and go to state 70
    (               shift and go to state 69
    ID              shift and go to state 42

    identifier                     shift and go to state 71

state 31

    (78) struct_or_union -> STRUCT .

    {               reduce using rule 78 (struct_or_union -> STRUCT .)
    (               reduce using rule 78 (struct_or_union -> STRUCT .)
    ID              reduce using rule 78 (struct_or_union -> STRUCT .)


state 32

    (79) struct_or_union -> UNION .

    {               reduce using rule 79 (struct_or_union -> UNION .)
    (               reduce using rule 79 (struct_or_union -> UNION .)
    ID              reduce using rule 79 (struct_or_union -> UNION .)


state 33

    (1) start_node -> start_node global_declaration .

    TYPEDEF         reduce using rule 1 (start_node -> start_node global_declaration .)
    EXTERN          reduce using rule 1 (start_node -> start_node global_declaration .)
    STATIC          reduce using rule 1 (start_node -> start_node global_declaration .)
    AUTO            reduce using rule 1 (start_node -> start_node global_declaration .)
    REGISTER        reduce using rule 1 (start_node -> start_node global_declaration .)
    VOID            reduce using rule 1 (start_node -> start_node global_declaration .)
    CHAR            reduce using rule 1 (start_node -> start_node global_declaration .)
    SHORT           reduce using rule 1 (start_node -> start_node global_declaration .)
    INT             reduce using rule 1 (start_node -> start_node global_declaration .)
    LONG            reduce using rule 1 (start_node -> start_node global_declaration .)
    FLOAT           reduce using rule 1 (start_node -> start_node global_declaration .)
    DOUBLE          reduce using rule 1 (start_node -> start_node global_declaration .)
    SIGNED          reduce using rule 1 (start_node -> start_node global_declaration .)
    UNSIGNED        reduce using rule 1 (start_node -> start_node global_declaration .)
    BOOL            reduce using rule 1 (start_node -> start_node global_declaration .)
    CONST           reduce using rule 1 (start_node -> start_node global_declaration .)
    VOLATILE        reduce using rule 1 (start_node -> start_node global_declaration .)
    RESTRICT        reduce using rule 1 (start_node -> start_node global_declaration .)
    ENUM            reduce using rule 1 (start_node -> start_node global_declaration .)
    STRUCT          reduce using rule 1 (start_node -> start_node global_declaration .)
    UNION           reduce using rule 1 (start_node -> start_node global_declaration .)
    $end            reduce using rule 1 (start_node -> start_node global_declaration .)


state 34

    (171) function_definition -> declaration_specifiers pointer . direct_function_declarator compound_statement
    (94) declarator -> pointer . direct_declarator
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]

    (               shift and go to state 74
    ID              shift and go to state 42

    direct_function_declarator     shift and go to state 72
    direct_declarator              shift and go to state 73
    identifier                     shift and go to state 40
    direct_declarator_forlist      shift and go to state 45

state 35

    (172) function_definition -> declaration_specifiers direct_function_declarator . compound_statement
    (104) direct_declarator -> direct_function_declarator .
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }

    =               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    ;               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    ,               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    {               shift and go to state 76

    compound_statement             shift and go to state 75

state 36

    (5) declaration -> declaration_specifiers ; .

    TYPEDEF         reduce using rule 5 (declaration -> declaration_specifiers ; .)
    EXTERN          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    STATIC          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    AUTO            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    REGISTER        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    VOID            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CHAR            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SHORT           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    INT             reduce using rule 5 (declaration -> declaration_specifiers ; .)
    LONG            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    FLOAT           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DOUBLE          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SIGNED          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    UNSIGNED        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    BOOL            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CONST           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    VOLATILE        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    RESTRICT        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ENUM            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    STRUCT          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    UNION           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    $end            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    }               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    {               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ;               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    IF              reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SWITCH          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    WHILE           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DO              reduce using rule 5 (declaration -> declaration_specifiers ; .)
    FOR             reduce using rule 5 (declaration -> declaration_specifiers ; .)
    GOTO            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CONTINUE        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    BREAK           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    RETURN          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    (               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ID              reduce using rule 5 (declaration -> declaration_specifiers ; .)
    INC             reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DEC             reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SIZEOF          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    &               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    *               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    +               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    -               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ~               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    !               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CONSTANCE       reduce using rule 5 (declaration -> declaration_specifiers ; .)
    STRING_LITERAL  reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CASE            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DEFAULT         reduce using rule 5 (declaration -> declaration_specifiers ; .)


state 37

    (6) declaration -> declaration_specifiers init_declarator_list . ;
    (8) init_declarator_list -> init_declarator_list . , init_declarator

    ;               shift and go to state 77
    ,               shift and go to state 78


state 38

    (96) pointer -> * .
    (97) pointer -> * . type_qualifier_list
    (98) pointer -> * . pointer
    (99) pointer -> * . type_qualifier_list pointer
    (100) type_qualifier_list -> . type_qualifier
    (101) type_qualifier_list -> . type_qualifier_list type_qualifier
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    (               reduce using rule 96 (pointer -> * .)
    ID              reduce using rule 96 (pointer -> * .)
    [               reduce using rule 96 (pointer -> * .)
    ,               reduce using rule 96 (pointer -> * .)
    =               reduce using rule 96 (pointer -> * .)
    )               reduce using rule 96 (pointer -> * .)
    *               shift and go to state 38
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    type_qualifier_list            shift and go to state 79
    pointer                        shift and go to state 80
    type_qualifier                 shift and go to state 81

state 39

    (173) direct_function_declarator -> ( . direct_function_declarator )
    (175) identifier -> ( . identifier )
    (103) direct_declarator -> ( . declarator )
    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    (               shift and go to state 82
    ID              shift and go to state 42
    *               shift and go to state 38

    direct_function_declarator     shift and go to state 83
    identifier                     shift and go to state 84
    declarator                     shift and go to state 85
    pointer                        shift and go to state 86
    direct_declarator_forlist      shift and go to state 87
    direct_declarator              shift and go to state 44

state 40

    (174) direct_function_declarator -> identifier . parameter_type_list_definition
    (105) direct_declarator_forlist -> identifier .
    (109) direct_declarator_forlist -> identifier . [ constant_expression ]
    (110) direct_declarator_forlist -> identifier . [ ]
    (177) parameter_type_list_definition -> . ( )
    (178) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (179) parameter_type_list_definition -> . ( parameter_list )

  ! shift/reduce conflict for [ resolved as shift
    =               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    ;               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    ,               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    [               shift and go to state 89
    (               shift and go to state 90

  ! [               [ reduce using rule 105 (direct_declarator_forlist -> identifier .) ]

    parameter_type_list_definition shift and go to state 88

state 41

    (7) init_declarator_list -> init_declarator .

    ;               reduce using rule 7 (init_declarator_list -> init_declarator .)
    ,               reduce using rule 7 (init_declarator_list -> init_declarator .)


state 42

    (176) identifier -> ID .

    [               reduce using rule 176 (identifier -> ID .)
    (               reduce using rule 176 (identifier -> ID .)
    =               reduce using rule 176 (identifier -> ID .)
    ;               reduce using rule 176 (identifier -> ID .)
    ,               reduce using rule 176 (identifier -> ID .)
    {               reduce using rule 176 (identifier -> ID .)
    TYPEDEF         reduce using rule 176 (identifier -> ID .)
    EXTERN          reduce using rule 176 (identifier -> ID .)
    STATIC          reduce using rule 176 (identifier -> ID .)
    AUTO            reduce using rule 176 (identifier -> ID .)
    REGISTER        reduce using rule 176 (identifier -> ID .)
    CONST           reduce using rule 176 (identifier -> ID .)
    VOLATILE        reduce using rule 176 (identifier -> ID .)
    RESTRICT        reduce using rule 176 (identifier -> ID .)
    *               reduce using rule 176 (identifier -> ID .)
    ID              reduce using rule 176 (identifier -> ID .)
    )               reduce using rule 176 (identifier -> ID .)
    :               reduce using rule 176 (identifier -> ID .)
    }               reduce using rule 176 (identifier -> ID .)
    INC             reduce using rule 176 (identifier -> ID .)
    DEC             reduce using rule 176 (identifier -> ID .)
    .               reduce using rule 176 (identifier -> ID .)
    PTR             reduce using rule 176 (identifier -> ID .)
    AO_MUL          reduce using rule 176 (identifier -> ID .)
    AO_DIV          reduce using rule 176 (identifier -> ID .)
    AO_MOD          reduce using rule 176 (identifier -> ID .)
    AO_PLUS         reduce using rule 176 (identifier -> ID .)
    AO_SUB          reduce using rule 176 (identifier -> ID .)
    AO_SL           reduce using rule 176 (identifier -> ID .)
    AO_SR           reduce using rule 176 (identifier -> ID .)
    AO_AND          reduce using rule 176 (identifier -> ID .)
    AO_XOR          reduce using rule 176 (identifier -> ID .)
    AO_OR           reduce using rule 176 (identifier -> ID .)
    /               reduce using rule 176 (identifier -> ID .)
    %               reduce using rule 176 (identifier -> ID .)
    +               reduce using rule 176 (identifier -> ID .)
    -               reduce using rule 176 (identifier -> ID .)
    SHIFT_LEFT      reduce using rule 176 (identifier -> ID .)
    SHIFT_RIGHT     reduce using rule 176 (identifier -> ID .)
    <               reduce using rule 176 (identifier -> ID .)
    >               reduce using rule 176 (identifier -> ID .)
    LE              reduce using rule 176 (identifier -> ID .)
    GE              reduce using rule 176 (identifier -> ID .)
    EQUAL           reduce using rule 176 (identifier -> ID .)
    NE              reduce using rule 176 (identifier -> ID .)
    &               reduce using rule 176 (identifier -> ID .)
    ^               reduce using rule 176 (identifier -> ID .)
    |               reduce using rule 176 (identifier -> ID .)
    AND             reduce using rule 176 (identifier -> ID .)
    ?               reduce using rule 176 (identifier -> ID .)
    OR              reduce using rule 176 (identifier -> ID .)


state 43

    (9) init_declarator -> declarator .
    (10) init_declarator -> declarator . = initializer

    ;               reduce using rule 9 (init_declarator -> declarator .)
    ,               reduce using rule 9 (init_declarator -> declarator .)
    =               shift and go to state 91


state 44

    (95) declarator -> direct_declarator .

    =               reduce using rule 95 (declarator -> direct_declarator .)
    ;               reduce using rule 95 (declarator -> direct_declarator .)
    ,               reduce using rule 95 (declarator -> direct_declarator .)
    )               reduce using rule 95 (declarator -> direct_declarator .)
    :               reduce using rule 95 (declarator -> direct_declarator .)


state 45

    (102) direct_declarator -> direct_declarator_forlist .
    (108) direct_declarator_forlist -> direct_declarator_forlist . [ constant_expression ]

    =               reduce using rule 102 (direct_declarator -> direct_declarator_forlist .)
    ;               reduce using rule 102 (direct_declarator -> direct_declarator_forlist .)
    ,               reduce using rule 102 (direct_declarator -> direct_declarator_forlist .)
    :               reduce using rule 102 (direct_declarator -> direct_declarator_forlist .)
    )               reduce using rule 102 (direct_declarator -> direct_declarator_forlist .)
    [               shift and go to state 92


state 46

    (11) declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .

    ;               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    *               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    (               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    ID              reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    [               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    ,               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    =               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    )               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)


state 47

    (15) declaration_specifiers_no_s -> type_specifier .
    (16) declaration_specifiers_no_s -> type_specifier . declaration_specifiers_no_ts_s
    (22) declaration_specifiers_no_ts_s -> . type_qualifier
    (23) declaration_specifiers_no_ts_s -> . type_qualifier declaration_specifiers_no_ts_s
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    ;               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    *               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    (               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    ID              reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    [               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    ,               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    =               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    )               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    declaration_specifiers_no_ts_s shift and go to state 93
    type_qualifier                 shift and go to state 94

state 48

    (17) declaration_specifiers_no_s -> type_qualifier . declaration_specifiers_no_s
    (15) declaration_specifiers_no_s -> . type_specifier
    (16) declaration_specifiers_no_s -> . type_specifier declaration_specifiers_no_ts_s
    (17) declaration_specifiers_no_s -> . type_qualifier declaration_specifiers_no_s
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    type_qualifier                 shift and go to state 48
    declaration_specifiers_no_s    shift and go to state 95
    type_specifier                 shift and go to state 47
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 49

    (13) declaration_specifiers -> type_specifier declaration_specifiers_no_ts .

    ;               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    *               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    (               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    ID              reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    [               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    ,               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    =               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    )               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)


state 50

    (18) declaration_specifiers_no_ts -> storage_class_specifier .
    (19) declaration_specifiers_no_ts -> storage_class_specifier . declaration_specifiers_no_ts_s
    (22) declaration_specifiers_no_ts_s -> . type_qualifier
    (23) declaration_specifiers_no_ts_s -> . type_qualifier declaration_specifiers_no_ts_s
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    ;               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    *               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    (               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    ID              reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    [               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    ,               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    =               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    )               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    declaration_specifiers_no_ts_s shift and go to state 96
    type_qualifier                 shift and go to state 94

state 51

    (20) declaration_specifiers_no_ts -> type_qualifier .
    (21) declaration_specifiers_no_ts -> type_qualifier . declaration_specifiers_no_ts
    (18) declaration_specifiers_no_ts -> . storage_class_specifier
    (19) declaration_specifiers_no_ts -> . storage_class_specifier declaration_specifiers_no_ts_s
    (20) declaration_specifiers_no_ts -> . type_qualifier
    (21) declaration_specifiers_no_ts -> . type_qualifier declaration_specifiers_no_ts
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    ;               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    *               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    (               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    ID              reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    [               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    ,               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    =               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    )               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    type_qualifier                 shift and go to state 51
    declaration_specifiers_no_ts   shift and go to state 97
    storage_class_specifier        shift and go to state 50

state 52

    (14) declaration_specifiers -> type_qualifier declaration_specifiers .

    ;               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    *               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    (               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ID              reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    [               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ,               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    =               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    )               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 53

    (32) type_specifier -> SHORT INT .

    TYPEDEF         reduce using rule 32 (type_specifier -> SHORT INT .)
    EXTERN          reduce using rule 32 (type_specifier -> SHORT INT .)
    STATIC          reduce using rule 32 (type_specifier -> SHORT INT .)
    AUTO            reduce using rule 32 (type_specifier -> SHORT INT .)
    REGISTER        reduce using rule 32 (type_specifier -> SHORT INT .)
    CONST           reduce using rule 32 (type_specifier -> SHORT INT .)
    VOLATILE        reduce using rule 32 (type_specifier -> SHORT INT .)
    RESTRICT        reduce using rule 32 (type_specifier -> SHORT INT .)
    ;               reduce using rule 32 (type_specifier -> SHORT INT .)
    *               reduce using rule 32 (type_specifier -> SHORT INT .)
    (               reduce using rule 32 (type_specifier -> SHORT INT .)
    ID              reduce using rule 32 (type_specifier -> SHORT INT .)
    [               reduce using rule 32 (type_specifier -> SHORT INT .)
    ,               reduce using rule 32 (type_specifier -> SHORT INT .)
    =               reduce using rule 32 (type_specifier -> SHORT INT .)
    )               reduce using rule 32 (type_specifier -> SHORT INT .)
    :               reduce using rule 32 (type_specifier -> SHORT INT .)


state 54

    (33) type_specifier -> INT SHORT .

    TYPEDEF         reduce using rule 33 (type_specifier -> INT SHORT .)
    EXTERN          reduce using rule 33 (type_specifier -> INT SHORT .)
    STATIC          reduce using rule 33 (type_specifier -> INT SHORT .)
    AUTO            reduce using rule 33 (type_specifier -> INT SHORT .)
    REGISTER        reduce using rule 33 (type_specifier -> INT SHORT .)
    CONST           reduce using rule 33 (type_specifier -> INT SHORT .)
    VOLATILE        reduce using rule 33 (type_specifier -> INT SHORT .)
    RESTRICT        reduce using rule 33 (type_specifier -> INT SHORT .)
    ;               reduce using rule 33 (type_specifier -> INT SHORT .)
    *               reduce using rule 33 (type_specifier -> INT SHORT .)
    (               reduce using rule 33 (type_specifier -> INT SHORT .)
    ID              reduce using rule 33 (type_specifier -> INT SHORT .)
    [               reduce using rule 33 (type_specifier -> INT SHORT .)
    ,               reduce using rule 33 (type_specifier -> INT SHORT .)
    =               reduce using rule 33 (type_specifier -> INT SHORT .)
    )               reduce using rule 33 (type_specifier -> INT SHORT .)
    :               reduce using rule 33 (type_specifier -> INT SHORT .)


state 55

    (37) type_specifier -> INT LONG .

    TYPEDEF         reduce using rule 37 (type_specifier -> INT LONG .)
    EXTERN          reduce using rule 37 (type_specifier -> INT LONG .)
    STATIC          reduce using rule 37 (type_specifier -> INT LONG .)
    AUTO            reduce using rule 37 (type_specifier -> INT LONG .)
    REGISTER        reduce using rule 37 (type_specifier -> INT LONG .)
    CONST           reduce using rule 37 (type_specifier -> INT LONG .)
    VOLATILE        reduce using rule 37 (type_specifier -> INT LONG .)
    RESTRICT        reduce using rule 37 (type_specifier -> INT LONG .)
    ;               reduce using rule 37 (type_specifier -> INT LONG .)
    *               reduce using rule 37 (type_specifier -> INT LONG .)
    (               reduce using rule 37 (type_specifier -> INT LONG .)
    ID              reduce using rule 37 (type_specifier -> INT LONG .)
    [               reduce using rule 37 (type_specifier -> INT LONG .)
    ,               reduce using rule 37 (type_specifier -> INT LONG .)
    =               reduce using rule 37 (type_specifier -> INT LONG .)
    )               reduce using rule 37 (type_specifier -> INT LONG .)
    :               reduce using rule 37 (type_specifier -> INT LONG .)


state 56

    (36) type_specifier -> LONG INT .

    TYPEDEF         reduce using rule 36 (type_specifier -> LONG INT .)
    EXTERN          reduce using rule 36 (type_specifier -> LONG INT .)
    STATIC          reduce using rule 36 (type_specifier -> LONG INT .)
    AUTO            reduce using rule 36 (type_specifier -> LONG INT .)
    REGISTER        reduce using rule 36 (type_specifier -> LONG INT .)
    CONST           reduce using rule 36 (type_specifier -> LONG INT .)
    VOLATILE        reduce using rule 36 (type_specifier -> LONG INT .)
    RESTRICT        reduce using rule 36 (type_specifier -> LONG INT .)
    ;               reduce using rule 36 (type_specifier -> LONG INT .)
    *               reduce using rule 36 (type_specifier -> LONG INT .)
    (               reduce using rule 36 (type_specifier -> LONG INT .)
    ID              reduce using rule 36 (type_specifier -> LONG INT .)
    [               reduce using rule 36 (type_specifier -> LONG INT .)
    ,               reduce using rule 36 (type_specifier -> LONG INT .)
    =               reduce using rule 36 (type_specifier -> LONG INT .)
    )               reduce using rule 36 (type_specifier -> LONG INT .)
    :               reduce using rule 36 (type_specifier -> LONG INT .)


state 57

    (41) type_specifier -> LONG FLOAT .

    TYPEDEF         reduce using rule 41 (type_specifier -> LONG FLOAT .)
    EXTERN          reduce using rule 41 (type_specifier -> LONG FLOAT .)
    STATIC          reduce using rule 41 (type_specifier -> LONG FLOAT .)
    AUTO            reduce using rule 41 (type_specifier -> LONG FLOAT .)
    REGISTER        reduce using rule 41 (type_specifier -> LONG FLOAT .)
    CONST           reduce using rule 41 (type_specifier -> LONG FLOAT .)
    VOLATILE        reduce using rule 41 (type_specifier -> LONG FLOAT .)
    RESTRICT        reduce using rule 41 (type_specifier -> LONG FLOAT .)
    ;               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    *               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    (               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    ID              reduce using rule 41 (type_specifier -> LONG FLOAT .)
    [               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    ,               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    =               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    )               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    :               reduce using rule 41 (type_specifier -> LONG FLOAT .)


state 58

    (43) type_specifier -> LONG DOUBLE .

    TYPEDEF         reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    EXTERN          reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    STATIC          reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    AUTO            reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    REGISTER        reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    CONST           reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    VOLATILE        reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    RESTRICT        reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    ;               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    *               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    (               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    ID              reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    [               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    ,               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    =               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    )               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    :               reduce using rule 43 (type_specifier -> LONG DOUBLE .)


state 59

    (40) type_specifier -> FLOAT LONG .

    TYPEDEF         reduce using rule 40 (type_specifier -> FLOAT LONG .)
    EXTERN          reduce using rule 40 (type_specifier -> FLOAT LONG .)
    STATIC          reduce using rule 40 (type_specifier -> FLOAT LONG .)
    AUTO            reduce using rule 40 (type_specifier -> FLOAT LONG .)
    REGISTER        reduce using rule 40 (type_specifier -> FLOAT LONG .)
    CONST           reduce using rule 40 (type_specifier -> FLOAT LONG .)
    VOLATILE        reduce using rule 40 (type_specifier -> FLOAT LONG .)
    RESTRICT        reduce using rule 40 (type_specifier -> FLOAT LONG .)
    ;               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    *               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    (               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    ID              reduce using rule 40 (type_specifier -> FLOAT LONG .)
    [               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    ,               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    =               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    )               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    :               reduce using rule 40 (type_specifier -> FLOAT LONG .)


state 60

    (42) type_specifier -> DOUBLE LONG .

    TYPEDEF         reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    EXTERN          reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    STATIC          reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    AUTO            reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    REGISTER        reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    CONST           reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    VOLATILE        reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    RESTRICT        reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    ;               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    *               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    (               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    ID              reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    [               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    ,               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    =               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    )               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    :               reduce using rule 42 (type_specifier -> DOUBLE LONG .)


state 61

    (45) type_specifier -> SIGNED INT .
    (48) type_specifier -> SIGNED INT . SHORT
    (51) type_specifier -> SIGNED INT . LONG

    TYPEDEF         reduce using rule 45 (type_specifier -> SIGNED INT .)
    EXTERN          reduce using rule 45 (type_specifier -> SIGNED INT .)
    STATIC          reduce using rule 45 (type_specifier -> SIGNED INT .)
    AUTO            reduce using rule 45 (type_specifier -> SIGNED INT .)
    REGISTER        reduce using rule 45 (type_specifier -> SIGNED INT .)
    CONST           reduce using rule 45 (type_specifier -> SIGNED INT .)
    VOLATILE        reduce using rule 45 (type_specifier -> SIGNED INT .)
    RESTRICT        reduce using rule 45 (type_specifier -> SIGNED INT .)
    ;               reduce using rule 45 (type_specifier -> SIGNED INT .)
    *               reduce using rule 45 (type_specifier -> SIGNED INT .)
    (               reduce using rule 45 (type_specifier -> SIGNED INT .)
    ID              reduce using rule 45 (type_specifier -> SIGNED INT .)
    [               reduce using rule 45 (type_specifier -> SIGNED INT .)
    ,               reduce using rule 45 (type_specifier -> SIGNED INT .)
    =               reduce using rule 45 (type_specifier -> SIGNED INT .)
    )               reduce using rule 45 (type_specifier -> SIGNED INT .)
    :               reduce using rule 45 (type_specifier -> SIGNED INT .)
    SHORT           shift and go to state 98
    LONG            shift and go to state 99


state 62

    (46) type_specifier -> SIGNED SHORT .
    (47) type_specifier -> SIGNED SHORT . INT

    TYPEDEF         reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    EXTERN          reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    STATIC          reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    AUTO            reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    REGISTER        reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    CONST           reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    VOLATILE        reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    RESTRICT        reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    ;               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    *               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    (               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    ID              reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    [               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    ,               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    =               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    )               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    :               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    INT             shift and go to state 100


state 63

    (49) type_specifier -> SIGNED LONG .
    (50) type_specifier -> SIGNED LONG . INT

    TYPEDEF         reduce using rule 49 (type_specifier -> SIGNED LONG .)
    EXTERN          reduce using rule 49 (type_specifier -> SIGNED LONG .)
    STATIC          reduce using rule 49 (type_specifier -> SIGNED LONG .)
    AUTO            reduce using rule 49 (type_specifier -> SIGNED LONG .)
    REGISTER        reduce using rule 49 (type_specifier -> SIGNED LONG .)
    CONST           reduce using rule 49 (type_specifier -> SIGNED LONG .)
    VOLATILE        reduce using rule 49 (type_specifier -> SIGNED LONG .)
    RESTRICT        reduce using rule 49 (type_specifier -> SIGNED LONG .)
    ;               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    *               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    (               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    ID              reduce using rule 49 (type_specifier -> SIGNED LONG .)
    [               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    ,               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    =               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    )               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    :               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    INT             shift and go to state 101


state 64

    (53) type_specifier -> UNSIGNED INT .
    (56) type_specifier -> UNSIGNED INT . SHORT
    (59) type_specifier -> UNSIGNED INT . LONG

    TYPEDEF         reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    EXTERN          reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    STATIC          reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    AUTO            reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    REGISTER        reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    CONST           reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    VOLATILE        reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    RESTRICT        reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    ;               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    *               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    (               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    ID              reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    [               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    ,               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    =               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    )               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    :               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    SHORT           shift and go to state 102
    LONG            shift and go to state 103


state 65

    (54) type_specifier -> UNSIGNED SHORT .
    (55) type_specifier -> UNSIGNED SHORT . INT

    TYPEDEF         reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    EXTERN          reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    STATIC          reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    AUTO            reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    REGISTER        reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    CONST           reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    VOLATILE        reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    RESTRICT        reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    ;               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    *               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    (               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    ID              reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    [               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    ,               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    =               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    )               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    :               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    INT             shift and go to state 104


state 66

    (57) type_specifier -> UNSIGNED LONG .
    (58) type_specifier -> UNSIGNED LONG . INT

    TYPEDEF         reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    EXTERN          reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    STATIC          reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    AUTO            reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    REGISTER        reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    CONST           reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    VOLATILE        reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    RESTRICT        reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    ;               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    *               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    (               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    ID              reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    [               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    ,               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    =               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    )               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    :               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    INT             shift and go to state 105


state 67

    (75) struct_or_union_specifier -> struct_or_union identifier . { struct_declaration_list }
    (77) struct_or_union_specifier -> struct_or_union identifier .

    {               shift and go to state 106
    TYPEDEF         reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    EXTERN          reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    STATIC          reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    AUTO            reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    REGISTER        reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    CONST           reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    VOLATILE        reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    RESTRICT        reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    ;               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    *               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    (               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    ID              reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    [               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    ,               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    =               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    )               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    :               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)


state 68

    (76) struct_or_union_specifier -> struct_or_union { . struct_declaration_list }
    (80) struct_declaration_list -> . struct_declaration
    (81) struct_declaration_list -> . struct_declaration_list struct_declaration
    (82) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    struct_or_union                shift and go to state 29
    struct_declaration_list        shift and go to state 107
    struct_declaration             shift and go to state 108
    specifier_qualifier_list       shift and go to state 109
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24

state 69

    (175) identifier -> ( . identifier )
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 69
    ID              shift and go to state 42

    identifier                     shift and go to state 112

state 70

    (66) enum_specifier -> ENUM { . enumerator_list }
    (68) enum_specifier -> ENUM { . enumerator_list , }
    (71) enumerator_list -> . enumerator
    (72) enumerator_list -> . enumerator_list , enumerator
    (73) enumerator -> . identifier
    (74) enumerator -> . identifier = constant_expression
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 69
    ID              shift and go to state 42

    enumerator_list                shift and go to state 113
    enumerator                     shift and go to state 114
    identifier                     shift and go to state 115

state 71

    (67) enum_specifier -> ENUM identifier . { enumerator_list }
    (69) enum_specifier -> ENUM identifier . { enumerator_list , }
    (70) enum_specifier -> ENUM identifier .

    {               shift and go to state 116
    TYPEDEF         reduce using rule 70 (enum_specifier -> ENUM identifier .)
    EXTERN          reduce using rule 70 (enum_specifier -> ENUM identifier .)
    STATIC          reduce using rule 70 (enum_specifier -> ENUM identifier .)
    AUTO            reduce using rule 70 (enum_specifier -> ENUM identifier .)
    REGISTER        reduce using rule 70 (enum_specifier -> ENUM identifier .)
    CONST           reduce using rule 70 (enum_specifier -> ENUM identifier .)
    VOLATILE        reduce using rule 70 (enum_specifier -> ENUM identifier .)
    RESTRICT        reduce using rule 70 (enum_specifier -> ENUM identifier .)
    ;               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    *               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    (               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    ID              reduce using rule 70 (enum_specifier -> ENUM identifier .)
    [               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    ,               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    =               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    )               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    :               reduce using rule 70 (enum_specifier -> ENUM identifier .)


state 72

    (171) function_definition -> declaration_specifiers pointer direct_function_declarator . compound_statement
    (104) direct_declarator -> direct_function_declarator .
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }

    =               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    ;               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    ,               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    {               shift and go to state 76

    compound_statement             shift and go to state 117

state 73

    (94) declarator -> pointer direct_declarator .

    =               reduce using rule 94 (declarator -> pointer direct_declarator .)
    ;               reduce using rule 94 (declarator -> pointer direct_declarator .)
    ,               reduce using rule 94 (declarator -> pointer direct_declarator .)
    )               reduce using rule 94 (declarator -> pointer direct_declarator .)
    :               reduce using rule 94 (declarator -> pointer direct_declarator .)


state 74

    (173) direct_function_declarator -> ( . direct_function_declarator )
    (103) direct_declarator -> ( . declarator )
    (175) identifier -> ( . identifier )
    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    (               shift and go to state 82
    ID              shift and go to state 42
    *               shift and go to state 38

    direct_function_declarator     shift and go to state 83
    declarator                     shift and go to state 85
    identifier                     shift and go to state 84
    pointer                        shift and go to state 86
    direct_declarator_forlist      shift and go to state 87
    direct_declarator              shift and go to state 44

state 75

    (172) function_definition -> declaration_specifiers direct_function_declarator compound_statement .

    TYPEDEF         reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    EXTERN          reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    STATIC          reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    AUTO            reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    REGISTER        reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    VOID            reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    CHAR            reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    SHORT           reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    INT             reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    LONG            reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    FLOAT           reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    DOUBLE          reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    SIGNED          reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    UNSIGNED        reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    BOOL            reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    CONST           reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    VOLATILE        reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    RESTRICT        reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    ENUM            reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    STRUCT          reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    UNION           reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    $end            reduce using rule 172 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)


state 76

    (183) compound_statement -> { . }
    (184) compound_statement -> { . block_item_list }
    (185) block_item_list -> . block_item
    (186) block_item_list -> . block_item_list block_item
    (187) block_item -> . declaration
    (188) block_item -> . statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (189) statement -> . labeled_statement
    (190) statement -> . compound_statement
    (191) statement -> . expression_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (195) labeled_statement -> . identifier :
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 118
    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    (               shift and go to state 134
    ID              shift and go to state 42
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    block_item_list                shift and go to state 119
    block_item                     shift and go to state 120
    declaration                    shift and go to state 121
    statement                      shift and go to state 122
    declaration_specifiers         shift and go to state 123
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    assignment_expression          shift and go to state 143
    struct_or_union                shift and go to state 29
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 77

    (6) declaration -> declaration_specifiers init_declarator_list ; .

    TYPEDEF         reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    EXTERN          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    STATIC          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    AUTO            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    REGISTER        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOID            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHAR            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SHORT           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    INT             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    LONG            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    FLOAT           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DOUBLE          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIGNED          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNSIGNED        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    BOOL            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONST           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOLATILE        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    RESTRICT        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ENUM            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRUCT          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNION           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    $end            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    }               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    {               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ;               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    IF              reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SWITCH          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    WHILE           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DO              reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    FOR             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    GOTO            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONTINUE        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    BREAK           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    RETURN          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    (               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ID              reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    INC             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEC             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIZEOF          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    &               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    *               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    +               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    -               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ~               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    !               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONSTANCE       reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRING_LITERAL  reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CASE            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEFAULT         reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)


state 78

    (8) init_declarator_list -> init_declarator_list , . init_declarator
    (9) init_declarator -> . declarator
    (10) init_declarator -> . declarator = initializer
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    *               shift and go to state 38
    (               shift and go to state 175
    ID              shift and go to state 42

    init_declarator                shift and go to state 173
    declarator                     shift and go to state 43
    pointer                        shift and go to state 174
    direct_declarator              shift and go to state 44
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 176
    identifier                     shift and go to state 177

state 79

    (97) pointer -> * type_qualifier_list .
    (99) pointer -> * type_qualifier_list . pointer
    (101) type_qualifier_list -> type_qualifier_list . type_qualifier
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    (               reduce using rule 97 (pointer -> * type_qualifier_list .)
    ID              reduce using rule 97 (pointer -> * type_qualifier_list .)
    [               reduce using rule 97 (pointer -> * type_qualifier_list .)
    ,               reduce using rule 97 (pointer -> * type_qualifier_list .)
    =               reduce using rule 97 (pointer -> * type_qualifier_list .)
    )               reduce using rule 97 (pointer -> * type_qualifier_list .)
    *               shift and go to state 38
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    pointer                        shift and go to state 178
    type_qualifier                 shift and go to state 179

state 80

    (98) pointer -> * pointer .

    (               reduce using rule 98 (pointer -> * pointer .)
    ID              reduce using rule 98 (pointer -> * pointer .)
    [               reduce using rule 98 (pointer -> * pointer .)
    ,               reduce using rule 98 (pointer -> * pointer .)
    =               reduce using rule 98 (pointer -> * pointer .)
    )               reduce using rule 98 (pointer -> * pointer .)


state 81

    (100) type_qualifier_list -> type_qualifier .

    *               reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    (               reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    [               reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    ,               reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    =               reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    )               reduce using rule 100 (type_qualifier_list -> type_qualifier .)


state 82

    (173) direct_function_declarator -> ( . direct_function_declarator )
    (175) identifier -> ( . identifier )
    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (103) direct_declarator -> ( . declarator )
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    (               shift and go to state 82
    ID              shift and go to state 42
    *               shift and go to state 38

    direct_function_declarator     shift and go to state 83
    identifier                     shift and go to state 84
    pointer                        shift and go to state 86
    direct_declarator_forlist      shift and go to state 87
    declarator                     shift and go to state 85
    direct_declarator              shift and go to state 44

state 83

    (173) direct_function_declarator -> ( direct_function_declarator . )
    (104) direct_declarator -> direct_function_declarator .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 180

  ! )               [ reduce using rule 104 (direct_declarator -> direct_function_declarator .) ]


state 84

    (175) identifier -> ( identifier . )
    (174) direct_function_declarator -> identifier . parameter_type_list_definition
    (105) direct_declarator_forlist -> identifier .
    (109) direct_declarator_forlist -> identifier . [ constant_expression ]
    (110) direct_declarator_forlist -> identifier . [ ]
    (177) parameter_type_list_definition -> . ( )
    (178) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (179) parameter_type_list_definition -> . ( parameter_list )

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for [ resolved as shift
    )               shift and go to state 181
    [               shift and go to state 89
    (               shift and go to state 90

  ! )               [ reduce using rule 105 (direct_declarator_forlist -> identifier .) ]
  ! [               [ reduce using rule 105 (direct_declarator_forlist -> identifier .) ]

    parameter_type_list_definition shift and go to state 88

state 85

    (103) direct_declarator -> ( declarator . )

    )               shift and go to state 182


state 86

    (106) direct_declarator_forlist -> ( pointer . direct_declarator_forlist )
    (94) declarator -> pointer . direct_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition

    (               shift and go to state 183
    ID              shift and go to state 42

    direct_declarator_forlist      shift and go to state 184
    direct_declarator              shift and go to state 73
    identifier                     shift and go to state 177
    direct_function_declarator     shift and go to state 176

state 87

    (107) direct_declarator_forlist -> ( direct_declarator_forlist . )
    (108) direct_declarator_forlist -> direct_declarator_forlist . [ constant_expression ]
    (102) direct_declarator -> direct_declarator_forlist .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 185
    [               shift and go to state 92

  ! )               [ reduce using rule 102 (direct_declarator -> direct_declarator_forlist .) ]


state 88

    (174) direct_function_declarator -> identifier parameter_type_list_definition .

    {               reduce using rule 174 (direct_function_declarator -> identifier parameter_type_list_definition .)
    =               reduce using rule 174 (direct_function_declarator -> identifier parameter_type_list_definition .)
    ;               reduce using rule 174 (direct_function_declarator -> identifier parameter_type_list_definition .)
    ,               reduce using rule 174 (direct_function_declarator -> identifier parameter_type_list_definition .)
    )               reduce using rule 174 (direct_function_declarator -> identifier parameter_type_list_definition .)
    :               reduce using rule 174 (direct_function_declarator -> identifier parameter_type_list_definition .)


state 89

    (109) direct_declarator_forlist -> identifier [ . constant_expression ]
    (110) direct_declarator_forlist -> identifier [ . ]
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    ]               shift and go to state 187
    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    constant_expression            shift and go to state 186
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 90

    (177) parameter_type_list_definition -> ( . )
    (178) parameter_type_list_definition -> ( . parameter_type_list_definition )
    (179) parameter_type_list_definition -> ( . parameter_list )
    (177) parameter_type_list_definition -> . ( )
    (178) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (179) parameter_type_list_definition -> . ( parameter_list )
    (111) parameter_list -> . parameter_list_definition
    (112) parameter_list -> . parameter_declaration
    (113) parameter_list -> . parameter_declaration , parameter_list
    (180) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (181) parameter_list_definition -> . parameter_declaration = constant_expression
    (182) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    )               shift and go to state 211
    (               shift and go to state 90
    ELLIPSIS        shift and go to state 216
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    parameter_type_list_definition shift and go to state 212
    parameter_list                 shift and go to state 213
    parameter_list_definition      shift and go to state 214
    parameter_declaration          shift and go to state 215
    declaration_specifiers         shift and go to state 217
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 91

    (10) init_declarator -> declarator = . initializer
    (311) initializer -> . assignment_expression
    (312) initializer -> . { initializer_list }
    (313) initializer -> . { initializer_list , }
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 220
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    initializer                    shift and go to state 218
    assignment_expression          shift and go to state 219
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 92

    (108) direct_declarator_forlist -> direct_declarator_forlist [ . constant_expression ]
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    constant_expression            shift and go to state 223
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 93

    (16) declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .

    ;               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    *               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    (               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    ID              reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    [               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    ,               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    =               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    )               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)


state 94

    (22) declaration_specifiers_no_ts_s -> type_qualifier .
    (23) declaration_specifiers_no_ts_s -> type_qualifier . declaration_specifiers_no_ts_s
    (22) declaration_specifiers_no_ts_s -> . type_qualifier
    (23) declaration_specifiers_no_ts_s -> . type_qualifier declaration_specifiers_no_ts_s
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    ;               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    *               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    (               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    ID              reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    [               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    ,               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    =               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    )               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    type_qualifier                 shift and go to state 94
    declaration_specifiers_no_ts_s shift and go to state 224

state 95

    (17) declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .

    ;               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    *               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    (               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    ID              reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    [               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    ,               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    =               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    )               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)


state 96

    (19) declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .

    ;               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    *               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    (               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    ID              reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    [               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    ,               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    =               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    )               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)


state 97

    (21) declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .

    ;               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    *               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    (               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    ID              reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    [               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    ,               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    =               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    )               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)


state 98

    (48) type_specifier -> SIGNED INT SHORT .

    TYPEDEF         reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    EXTERN          reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    STATIC          reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    AUTO            reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    REGISTER        reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    CONST           reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    VOLATILE        reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    RESTRICT        reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    ;               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    *               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    (               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    ID              reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    [               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    ,               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    =               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    )               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    :               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)


state 99

    (51) type_specifier -> SIGNED INT LONG .

    TYPEDEF         reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    EXTERN          reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    STATIC          reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    AUTO            reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    REGISTER        reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    CONST           reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    VOLATILE        reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    RESTRICT        reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    ;               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    *               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    (               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    ID              reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    [               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    ,               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    =               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    )               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    :               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)


state 100

    (47) type_specifier -> SIGNED SHORT INT .

    TYPEDEF         reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    EXTERN          reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    STATIC          reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    AUTO            reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    REGISTER        reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    CONST           reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    VOLATILE        reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    RESTRICT        reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    ;               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    *               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    (               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    ID              reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    [               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    ,               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    =               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    )               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    :               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)


state 101

    (50) type_specifier -> SIGNED LONG INT .

    TYPEDEF         reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    EXTERN          reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    STATIC          reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    AUTO            reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    REGISTER        reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    CONST           reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    VOLATILE        reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    RESTRICT        reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    ;               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    *               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    (               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    ID              reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    [               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    ,               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    =               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    )               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    :               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)


state 102

    (56) type_specifier -> UNSIGNED INT SHORT .

    TYPEDEF         reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    EXTERN          reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    STATIC          reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    AUTO            reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    REGISTER        reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    CONST           reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    VOLATILE        reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    RESTRICT        reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    ;               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    *               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    (               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    ID              reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    [               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    ,               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    =               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    )               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    :               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)


state 103

    (59) type_specifier -> UNSIGNED INT LONG .

    TYPEDEF         reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    EXTERN          reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    STATIC          reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    AUTO            reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    REGISTER        reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    CONST           reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    VOLATILE        reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    RESTRICT        reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    ;               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    *               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    (               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    ID              reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    [               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    ,               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    =               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    )               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    :               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)


state 104

    (55) type_specifier -> UNSIGNED SHORT INT .

    TYPEDEF         reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    EXTERN          reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    STATIC          reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    AUTO            reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    REGISTER        reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    CONST           reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    VOLATILE        reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    RESTRICT        reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    ;               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    *               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    (               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    ID              reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    [               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    ,               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    =               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    )               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    :               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)


state 105

    (58) type_specifier -> UNSIGNED LONG INT .

    TYPEDEF         reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    EXTERN          reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    STATIC          reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    AUTO            reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    REGISTER        reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    CONST           reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    VOLATILE        reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    RESTRICT        reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    ;               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    *               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    (               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    ID              reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    [               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    ,               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    =               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    )               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    :               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)


state 106

    (75) struct_or_union_specifier -> struct_or_union identifier { . struct_declaration_list }
    (80) struct_declaration_list -> . struct_declaration
    (81) struct_declaration_list -> . struct_declaration_list struct_declaration
    (82) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    struct_or_union                shift and go to state 29
    struct_declaration_list        shift and go to state 225
    struct_declaration             shift and go to state 108
    specifier_qualifier_list       shift and go to state 109
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24

state 107

    (76) struct_or_union_specifier -> struct_or_union { struct_declaration_list . }
    (81) struct_declaration_list -> struct_declaration_list . struct_declaration
    (82) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    }               shift and go to state 226
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    struct_or_union                shift and go to state 29
    struct_declaration             shift and go to state 227
    specifier_qualifier_list       shift and go to state 109
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24

state 108

    (80) struct_declaration_list -> struct_declaration .

    }               reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 80 (struct_declaration_list -> struct_declaration .)


state 109

    (82) struct_declaration -> specifier_qualifier_list . struct_declarator_list ;
    (89) struct_declarator_list -> . struct_declarator
    (90) struct_declarator_list -> . struct_declarator_list , struct_declarator
    (91) struct_declarator -> . declarator
    (92) struct_declarator -> . : constant_expression
    (93) struct_declarator -> . declarator : constant_expression
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    :               shift and go to state 231
    *               shift and go to state 38
    (               shift and go to state 175
    ID              shift and go to state 42

    struct_declarator_list         shift and go to state 228
    struct_declarator              shift and go to state 229
    declarator                     shift and go to state 230
    pointer                        shift and go to state 174
    direct_declarator              shift and go to state 44
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 176
    identifier                     shift and go to state 177

state 110

    (83) specifier_qualifier_list -> type_specifier . specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> type_specifier .
    (87) specifier_qualifier_list_no_ts -> . type_qualifier specifier_qualifier_list_no_ts
    (88) specifier_qualifier_list_no_ts -> . type_qualifier
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    :               reduce using rule 84 (specifier_qualifier_list -> type_specifier .)
    *               reduce using rule 84 (specifier_qualifier_list -> type_specifier .)
    (               reduce using rule 84 (specifier_qualifier_list -> type_specifier .)
    ID              reduce using rule 84 (specifier_qualifier_list -> type_specifier .)
    )               reduce using rule 84 (specifier_qualifier_list -> type_specifier .)
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    specifier_qualifier_list_no_ts shift and go to state 232
    type_qualifier                 shift and go to state 233

state 111

    (85) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (86) specifier_qualifier_list -> type_qualifier .
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    :               reduce using rule 86 (specifier_qualifier_list -> type_qualifier .)
    *               reduce using rule 86 (specifier_qualifier_list -> type_qualifier .)
    (               reduce using rule 86 (specifier_qualifier_list -> type_qualifier .)
    ID              reduce using rule 86 (specifier_qualifier_list -> type_qualifier .)
    )               reduce using rule 86 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    type_qualifier                 shift and go to state 111
    specifier_qualifier_list       shift and go to state 234
    type_specifier                 shift and go to state 110
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 112

    (175) identifier -> ( identifier . )

    )               shift and go to state 181


state 113

    (66) enum_specifier -> ENUM { enumerator_list . }
    (68) enum_specifier -> ENUM { enumerator_list . , }
    (72) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 235
    ,               shift and go to state 236


state 114

    (71) enumerator_list -> enumerator .

    }               reduce using rule 71 (enumerator_list -> enumerator .)
    ,               reduce using rule 71 (enumerator_list -> enumerator .)


state 115

    (73) enumerator -> identifier .
    (74) enumerator -> identifier . = constant_expression

    }               reduce using rule 73 (enumerator -> identifier .)
    ,               reduce using rule 73 (enumerator -> identifier .)
    =               shift and go to state 237


state 116

    (67) enum_specifier -> ENUM identifier { . enumerator_list }
    (69) enum_specifier -> ENUM identifier { . enumerator_list , }
    (71) enumerator_list -> . enumerator
    (72) enumerator_list -> . enumerator_list , enumerator
    (73) enumerator -> . identifier
    (74) enumerator -> . identifier = constant_expression
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 69
    ID              shift and go to state 42

    identifier                     shift and go to state 115
    enumerator_list                shift and go to state 238
    enumerator                     shift and go to state 114

state 117

    (171) function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .

    TYPEDEF         reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    EXTERN          reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    STATIC          reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    AUTO            reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    REGISTER        reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    VOID            reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    CHAR            reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    SHORT           reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    INT             reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    LONG            reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    FLOAT           reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    DOUBLE          reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    SIGNED          reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    UNSIGNED        reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    BOOL            reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    CONST           reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    VOLATILE        reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    RESTRICT        reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    ENUM            reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    STRUCT          reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    UNION           reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    $end            reduce using rule 171 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)


state 118

    (183) compound_statement -> { } .

    TYPEDEF         reduce using rule 183 (compound_statement -> { } .)
    EXTERN          reduce using rule 183 (compound_statement -> { } .)
    STATIC          reduce using rule 183 (compound_statement -> { } .)
    AUTO            reduce using rule 183 (compound_statement -> { } .)
    REGISTER        reduce using rule 183 (compound_statement -> { } .)
    VOID            reduce using rule 183 (compound_statement -> { } .)
    CHAR            reduce using rule 183 (compound_statement -> { } .)
    SHORT           reduce using rule 183 (compound_statement -> { } .)
    INT             reduce using rule 183 (compound_statement -> { } .)
    LONG            reduce using rule 183 (compound_statement -> { } .)
    FLOAT           reduce using rule 183 (compound_statement -> { } .)
    DOUBLE          reduce using rule 183 (compound_statement -> { } .)
    SIGNED          reduce using rule 183 (compound_statement -> { } .)
    UNSIGNED        reduce using rule 183 (compound_statement -> { } .)
    BOOL            reduce using rule 183 (compound_statement -> { } .)
    CONST           reduce using rule 183 (compound_statement -> { } .)
    VOLATILE        reduce using rule 183 (compound_statement -> { } .)
    RESTRICT        reduce using rule 183 (compound_statement -> { } .)
    ENUM            reduce using rule 183 (compound_statement -> { } .)
    STRUCT          reduce using rule 183 (compound_statement -> { } .)
    UNION           reduce using rule 183 (compound_statement -> { } .)
    $end            reduce using rule 183 (compound_statement -> { } .)
    }               reduce using rule 183 (compound_statement -> { } .)
    {               reduce using rule 183 (compound_statement -> { } .)
    ;               reduce using rule 183 (compound_statement -> { } .)
    IF              reduce using rule 183 (compound_statement -> { } .)
    SWITCH          reduce using rule 183 (compound_statement -> { } .)
    WHILE           reduce using rule 183 (compound_statement -> { } .)
    DO              reduce using rule 183 (compound_statement -> { } .)
    FOR             reduce using rule 183 (compound_statement -> { } .)
    GOTO            reduce using rule 183 (compound_statement -> { } .)
    CONTINUE        reduce using rule 183 (compound_statement -> { } .)
    BREAK           reduce using rule 183 (compound_statement -> { } .)
    RETURN          reduce using rule 183 (compound_statement -> { } .)
    (               reduce using rule 183 (compound_statement -> { } .)
    ID              reduce using rule 183 (compound_statement -> { } .)
    INC             reduce using rule 183 (compound_statement -> { } .)
    DEC             reduce using rule 183 (compound_statement -> { } .)
    SIZEOF          reduce using rule 183 (compound_statement -> { } .)
    &               reduce using rule 183 (compound_statement -> { } .)
    *               reduce using rule 183 (compound_statement -> { } .)
    +               reduce using rule 183 (compound_statement -> { } .)
    -               reduce using rule 183 (compound_statement -> { } .)
    ~               reduce using rule 183 (compound_statement -> { } .)
    !               reduce using rule 183 (compound_statement -> { } .)
    CONSTANCE       reduce using rule 183 (compound_statement -> { } .)
    STRING_LITERAL  reduce using rule 183 (compound_statement -> { } .)
    ELSE            reduce using rule 183 (compound_statement -> { } .)
    CASE            reduce using rule 183 (compound_statement -> { } .)
    DEFAULT         reduce using rule 183 (compound_statement -> { } .)


state 119

    (184) compound_statement -> { block_item_list . }
    (186) block_item_list -> block_item_list . block_item
    (187) block_item -> . declaration
    (188) block_item -> . statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (189) statement -> . labeled_statement
    (190) statement -> . compound_statement
    (191) statement -> . expression_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (195) labeled_statement -> . identifier :
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 239
    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    (               shift and go to state 134
    ID              shift and go to state 42
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    block_item                     shift and go to state 240
    declaration                    shift and go to state 121
    statement                      shift and go to state 122
    declaration_specifiers         shift and go to state 123
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    assignment_expression          shift and go to state 143
    struct_or_union                shift and go to state 29
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 120

    (185) block_item_list -> block_item .

    }               reduce using rule 185 (block_item_list -> block_item .)
    {               reduce using rule 185 (block_item_list -> block_item .)
    ;               reduce using rule 185 (block_item_list -> block_item .)
    IF              reduce using rule 185 (block_item_list -> block_item .)
    SWITCH          reduce using rule 185 (block_item_list -> block_item .)
    WHILE           reduce using rule 185 (block_item_list -> block_item .)
    DO              reduce using rule 185 (block_item_list -> block_item .)
    FOR             reduce using rule 185 (block_item_list -> block_item .)
    GOTO            reduce using rule 185 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 185 (block_item_list -> block_item .)
    BREAK           reduce using rule 185 (block_item_list -> block_item .)
    RETURN          reduce using rule 185 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 185 (block_item_list -> block_item .)
    EXTERN          reduce using rule 185 (block_item_list -> block_item .)
    STATIC          reduce using rule 185 (block_item_list -> block_item .)
    AUTO            reduce using rule 185 (block_item_list -> block_item .)
    REGISTER        reduce using rule 185 (block_item_list -> block_item .)
    VOID            reduce using rule 185 (block_item_list -> block_item .)
    CHAR            reduce using rule 185 (block_item_list -> block_item .)
    SHORT           reduce using rule 185 (block_item_list -> block_item .)
    INT             reduce using rule 185 (block_item_list -> block_item .)
    LONG            reduce using rule 185 (block_item_list -> block_item .)
    FLOAT           reduce using rule 185 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 185 (block_item_list -> block_item .)
    SIGNED          reduce using rule 185 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 185 (block_item_list -> block_item .)
    BOOL            reduce using rule 185 (block_item_list -> block_item .)
    CONST           reduce using rule 185 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 185 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 185 (block_item_list -> block_item .)
    (               reduce using rule 185 (block_item_list -> block_item .)
    ID              reduce using rule 185 (block_item_list -> block_item .)
    ENUM            reduce using rule 185 (block_item_list -> block_item .)
    STRUCT          reduce using rule 185 (block_item_list -> block_item .)
    UNION           reduce using rule 185 (block_item_list -> block_item .)
    INC             reduce using rule 185 (block_item_list -> block_item .)
    DEC             reduce using rule 185 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 185 (block_item_list -> block_item .)
    &               reduce using rule 185 (block_item_list -> block_item .)
    *               reduce using rule 185 (block_item_list -> block_item .)
    +               reduce using rule 185 (block_item_list -> block_item .)
    -               reduce using rule 185 (block_item_list -> block_item .)
    ~               reduce using rule 185 (block_item_list -> block_item .)
    !               reduce using rule 185 (block_item_list -> block_item .)
    CONSTANCE       reduce using rule 185 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 185 (block_item_list -> block_item .)


state 121

    (187) block_item -> declaration .

    }               reduce using rule 187 (block_item -> declaration .)
    {               reduce using rule 187 (block_item -> declaration .)
    ;               reduce using rule 187 (block_item -> declaration .)
    IF              reduce using rule 187 (block_item -> declaration .)
    SWITCH          reduce using rule 187 (block_item -> declaration .)
    WHILE           reduce using rule 187 (block_item -> declaration .)
    DO              reduce using rule 187 (block_item -> declaration .)
    FOR             reduce using rule 187 (block_item -> declaration .)
    GOTO            reduce using rule 187 (block_item -> declaration .)
    CONTINUE        reduce using rule 187 (block_item -> declaration .)
    BREAK           reduce using rule 187 (block_item -> declaration .)
    RETURN          reduce using rule 187 (block_item -> declaration .)
    TYPEDEF         reduce using rule 187 (block_item -> declaration .)
    EXTERN          reduce using rule 187 (block_item -> declaration .)
    STATIC          reduce using rule 187 (block_item -> declaration .)
    AUTO            reduce using rule 187 (block_item -> declaration .)
    REGISTER        reduce using rule 187 (block_item -> declaration .)
    VOID            reduce using rule 187 (block_item -> declaration .)
    CHAR            reduce using rule 187 (block_item -> declaration .)
    SHORT           reduce using rule 187 (block_item -> declaration .)
    INT             reduce using rule 187 (block_item -> declaration .)
    LONG            reduce using rule 187 (block_item -> declaration .)
    FLOAT           reduce using rule 187 (block_item -> declaration .)
    DOUBLE          reduce using rule 187 (block_item -> declaration .)
    SIGNED          reduce using rule 187 (block_item -> declaration .)
    UNSIGNED        reduce using rule 187 (block_item -> declaration .)
    BOOL            reduce using rule 187 (block_item -> declaration .)
    CONST           reduce using rule 187 (block_item -> declaration .)
    VOLATILE        reduce using rule 187 (block_item -> declaration .)
    RESTRICT        reduce using rule 187 (block_item -> declaration .)
    (               reduce using rule 187 (block_item -> declaration .)
    ID              reduce using rule 187 (block_item -> declaration .)
    ENUM            reduce using rule 187 (block_item -> declaration .)
    STRUCT          reduce using rule 187 (block_item -> declaration .)
    UNION           reduce using rule 187 (block_item -> declaration .)
    INC             reduce using rule 187 (block_item -> declaration .)
    DEC             reduce using rule 187 (block_item -> declaration .)
    SIZEOF          reduce using rule 187 (block_item -> declaration .)
    &               reduce using rule 187 (block_item -> declaration .)
    *               reduce using rule 187 (block_item -> declaration .)
    +               reduce using rule 187 (block_item -> declaration .)
    -               reduce using rule 187 (block_item -> declaration .)
    ~               reduce using rule 187 (block_item -> declaration .)
    !               reduce using rule 187 (block_item -> declaration .)
    CONSTANCE       reduce using rule 187 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 187 (block_item -> declaration .)


state 122

    (188) block_item -> statement .

    }               reduce using rule 188 (block_item -> statement .)
    {               reduce using rule 188 (block_item -> statement .)
    ;               reduce using rule 188 (block_item -> statement .)
    IF              reduce using rule 188 (block_item -> statement .)
    SWITCH          reduce using rule 188 (block_item -> statement .)
    WHILE           reduce using rule 188 (block_item -> statement .)
    DO              reduce using rule 188 (block_item -> statement .)
    FOR             reduce using rule 188 (block_item -> statement .)
    GOTO            reduce using rule 188 (block_item -> statement .)
    CONTINUE        reduce using rule 188 (block_item -> statement .)
    BREAK           reduce using rule 188 (block_item -> statement .)
    RETURN          reduce using rule 188 (block_item -> statement .)
    TYPEDEF         reduce using rule 188 (block_item -> statement .)
    EXTERN          reduce using rule 188 (block_item -> statement .)
    STATIC          reduce using rule 188 (block_item -> statement .)
    AUTO            reduce using rule 188 (block_item -> statement .)
    REGISTER        reduce using rule 188 (block_item -> statement .)
    VOID            reduce using rule 188 (block_item -> statement .)
    CHAR            reduce using rule 188 (block_item -> statement .)
    SHORT           reduce using rule 188 (block_item -> statement .)
    INT             reduce using rule 188 (block_item -> statement .)
    LONG            reduce using rule 188 (block_item -> statement .)
    FLOAT           reduce using rule 188 (block_item -> statement .)
    DOUBLE          reduce using rule 188 (block_item -> statement .)
    SIGNED          reduce using rule 188 (block_item -> statement .)
    UNSIGNED        reduce using rule 188 (block_item -> statement .)
    BOOL            reduce using rule 188 (block_item -> statement .)
    CONST           reduce using rule 188 (block_item -> statement .)
    VOLATILE        reduce using rule 188 (block_item -> statement .)
    RESTRICT        reduce using rule 188 (block_item -> statement .)
    (               reduce using rule 188 (block_item -> statement .)
    ID              reduce using rule 188 (block_item -> statement .)
    ENUM            reduce using rule 188 (block_item -> statement .)
    STRUCT          reduce using rule 188 (block_item -> statement .)
    UNION           reduce using rule 188 (block_item -> statement .)
    INC             reduce using rule 188 (block_item -> statement .)
    DEC             reduce using rule 188 (block_item -> statement .)
    SIZEOF          reduce using rule 188 (block_item -> statement .)
    &               reduce using rule 188 (block_item -> statement .)
    *               reduce using rule 188 (block_item -> statement .)
    +               reduce using rule 188 (block_item -> statement .)
    -               reduce using rule 188 (block_item -> statement .)
    ~               reduce using rule 188 (block_item -> statement .)
    !               reduce using rule 188 (block_item -> statement .)
    CONSTANCE       reduce using rule 188 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 188 (block_item -> statement .)


state 123

    (5) declaration -> declaration_specifiers . ;
    (6) declaration -> declaration_specifiers . init_declarator_list ;
    (7) init_declarator_list -> . init_declarator
    (8) init_declarator_list -> . init_declarator_list , init_declarator
    (9) init_declarator -> . declarator
    (10) init_declarator -> . declarator = initializer
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    ;               shift and go to state 36
    *               shift and go to state 38
    (               shift and go to state 175
    ID              shift and go to state 42

    init_declarator_list           shift and go to state 37
    init_declarator                shift and go to state 41
    declarator                     shift and go to state 43
    pointer                        shift and go to state 174
    direct_declarator              shift and go to state 44
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 176
    identifier                     shift and go to state 177

state 124

    (196) expression_statement -> ; .

    }               reduce using rule 196 (expression_statement -> ; .)
    {               reduce using rule 196 (expression_statement -> ; .)
    ;               reduce using rule 196 (expression_statement -> ; .)
    IF              reduce using rule 196 (expression_statement -> ; .)
    SWITCH          reduce using rule 196 (expression_statement -> ; .)
    WHILE           reduce using rule 196 (expression_statement -> ; .)
    DO              reduce using rule 196 (expression_statement -> ; .)
    FOR             reduce using rule 196 (expression_statement -> ; .)
    GOTO            reduce using rule 196 (expression_statement -> ; .)
    CONTINUE        reduce using rule 196 (expression_statement -> ; .)
    BREAK           reduce using rule 196 (expression_statement -> ; .)
    RETURN          reduce using rule 196 (expression_statement -> ; .)
    TYPEDEF         reduce using rule 196 (expression_statement -> ; .)
    EXTERN          reduce using rule 196 (expression_statement -> ; .)
    STATIC          reduce using rule 196 (expression_statement -> ; .)
    AUTO            reduce using rule 196 (expression_statement -> ; .)
    REGISTER        reduce using rule 196 (expression_statement -> ; .)
    VOID            reduce using rule 196 (expression_statement -> ; .)
    CHAR            reduce using rule 196 (expression_statement -> ; .)
    SHORT           reduce using rule 196 (expression_statement -> ; .)
    INT             reduce using rule 196 (expression_statement -> ; .)
    LONG            reduce using rule 196 (expression_statement -> ; .)
    FLOAT           reduce using rule 196 (expression_statement -> ; .)
    DOUBLE          reduce using rule 196 (expression_statement -> ; .)
    SIGNED          reduce using rule 196 (expression_statement -> ; .)
    UNSIGNED        reduce using rule 196 (expression_statement -> ; .)
    BOOL            reduce using rule 196 (expression_statement -> ; .)
    CONST           reduce using rule 196 (expression_statement -> ; .)
    VOLATILE        reduce using rule 196 (expression_statement -> ; .)
    RESTRICT        reduce using rule 196 (expression_statement -> ; .)
    (               reduce using rule 196 (expression_statement -> ; .)
    ID              reduce using rule 196 (expression_statement -> ; .)
    ENUM            reduce using rule 196 (expression_statement -> ; .)
    STRUCT          reduce using rule 196 (expression_statement -> ; .)
    UNION           reduce using rule 196 (expression_statement -> ; .)
    INC             reduce using rule 196 (expression_statement -> ; .)
    DEC             reduce using rule 196 (expression_statement -> ; .)
    SIZEOF          reduce using rule 196 (expression_statement -> ; .)
    &               reduce using rule 196 (expression_statement -> ; .)
    *               reduce using rule 196 (expression_statement -> ; .)
    +               reduce using rule 196 (expression_statement -> ; .)
    -               reduce using rule 196 (expression_statement -> ; .)
    ~               reduce using rule 196 (expression_statement -> ; .)
    !               reduce using rule 196 (expression_statement -> ; .)
    CONSTANCE       reduce using rule 196 (expression_statement -> ; .)
    STRING_LITERAL  reduce using rule 196 (expression_statement -> ; .)
    )               reduce using rule 196 (expression_statement -> ; .)
    ELSE            reduce using rule 196 (expression_statement -> ; .)
    CASE            reduce using rule 196 (expression_statement -> ; .)
    DEFAULT         reduce using rule 196 (expression_statement -> ; .)


state 125

    (189) statement -> labeled_statement .

    }               reduce using rule 189 (statement -> labeled_statement .)
    {               reduce using rule 189 (statement -> labeled_statement .)
    ;               reduce using rule 189 (statement -> labeled_statement .)
    IF              reduce using rule 189 (statement -> labeled_statement .)
    SWITCH          reduce using rule 189 (statement -> labeled_statement .)
    WHILE           reduce using rule 189 (statement -> labeled_statement .)
    DO              reduce using rule 189 (statement -> labeled_statement .)
    FOR             reduce using rule 189 (statement -> labeled_statement .)
    GOTO            reduce using rule 189 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 189 (statement -> labeled_statement .)
    BREAK           reduce using rule 189 (statement -> labeled_statement .)
    RETURN          reduce using rule 189 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 189 (statement -> labeled_statement .)
    EXTERN          reduce using rule 189 (statement -> labeled_statement .)
    STATIC          reduce using rule 189 (statement -> labeled_statement .)
    AUTO            reduce using rule 189 (statement -> labeled_statement .)
    REGISTER        reduce using rule 189 (statement -> labeled_statement .)
    VOID            reduce using rule 189 (statement -> labeled_statement .)
    CHAR            reduce using rule 189 (statement -> labeled_statement .)
    SHORT           reduce using rule 189 (statement -> labeled_statement .)
    INT             reduce using rule 189 (statement -> labeled_statement .)
    LONG            reduce using rule 189 (statement -> labeled_statement .)
    FLOAT           reduce using rule 189 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 189 (statement -> labeled_statement .)
    SIGNED          reduce using rule 189 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 189 (statement -> labeled_statement .)
    BOOL            reduce using rule 189 (statement -> labeled_statement .)
    CONST           reduce using rule 189 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 189 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 189 (statement -> labeled_statement .)
    (               reduce using rule 189 (statement -> labeled_statement .)
    ID              reduce using rule 189 (statement -> labeled_statement .)
    ENUM            reduce using rule 189 (statement -> labeled_statement .)
    STRUCT          reduce using rule 189 (statement -> labeled_statement .)
    UNION           reduce using rule 189 (statement -> labeled_statement .)
    INC             reduce using rule 189 (statement -> labeled_statement .)
    DEC             reduce using rule 189 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 189 (statement -> labeled_statement .)
    &               reduce using rule 189 (statement -> labeled_statement .)
    *               reduce using rule 189 (statement -> labeled_statement .)
    +               reduce using rule 189 (statement -> labeled_statement .)
    -               reduce using rule 189 (statement -> labeled_statement .)
    ~               reduce using rule 189 (statement -> labeled_statement .)
    !               reduce using rule 189 (statement -> labeled_statement .)
    CONSTANCE       reduce using rule 189 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 189 (statement -> labeled_statement .)
    ELSE            reduce using rule 189 (statement -> labeled_statement .)
    CASE            reduce using rule 189 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 189 (statement -> labeled_statement .)


state 126

    (190) statement -> compound_statement .

    }               reduce using rule 190 (statement -> compound_statement .)
    {               reduce using rule 190 (statement -> compound_statement .)
    ;               reduce using rule 190 (statement -> compound_statement .)
    IF              reduce using rule 190 (statement -> compound_statement .)
    SWITCH          reduce using rule 190 (statement -> compound_statement .)
    WHILE           reduce using rule 190 (statement -> compound_statement .)
    DO              reduce using rule 190 (statement -> compound_statement .)
    FOR             reduce using rule 190 (statement -> compound_statement .)
    GOTO            reduce using rule 190 (statement -> compound_statement .)
    CONTINUE        reduce using rule 190 (statement -> compound_statement .)
    BREAK           reduce using rule 190 (statement -> compound_statement .)
    RETURN          reduce using rule 190 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 190 (statement -> compound_statement .)
    EXTERN          reduce using rule 190 (statement -> compound_statement .)
    STATIC          reduce using rule 190 (statement -> compound_statement .)
    AUTO            reduce using rule 190 (statement -> compound_statement .)
    REGISTER        reduce using rule 190 (statement -> compound_statement .)
    VOID            reduce using rule 190 (statement -> compound_statement .)
    CHAR            reduce using rule 190 (statement -> compound_statement .)
    SHORT           reduce using rule 190 (statement -> compound_statement .)
    INT             reduce using rule 190 (statement -> compound_statement .)
    LONG            reduce using rule 190 (statement -> compound_statement .)
    FLOAT           reduce using rule 190 (statement -> compound_statement .)
    DOUBLE          reduce using rule 190 (statement -> compound_statement .)
    SIGNED          reduce using rule 190 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 190 (statement -> compound_statement .)
    BOOL            reduce using rule 190 (statement -> compound_statement .)
    CONST           reduce using rule 190 (statement -> compound_statement .)
    VOLATILE        reduce using rule 190 (statement -> compound_statement .)
    RESTRICT        reduce using rule 190 (statement -> compound_statement .)
    (               reduce using rule 190 (statement -> compound_statement .)
    ID              reduce using rule 190 (statement -> compound_statement .)
    ENUM            reduce using rule 190 (statement -> compound_statement .)
    STRUCT          reduce using rule 190 (statement -> compound_statement .)
    UNION           reduce using rule 190 (statement -> compound_statement .)
    INC             reduce using rule 190 (statement -> compound_statement .)
    DEC             reduce using rule 190 (statement -> compound_statement .)
    SIZEOF          reduce using rule 190 (statement -> compound_statement .)
    &               reduce using rule 190 (statement -> compound_statement .)
    *               reduce using rule 190 (statement -> compound_statement .)
    +               reduce using rule 190 (statement -> compound_statement .)
    -               reduce using rule 190 (statement -> compound_statement .)
    ~               reduce using rule 190 (statement -> compound_statement .)
    !               reduce using rule 190 (statement -> compound_statement .)
    CONSTANCE       reduce using rule 190 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 190 (statement -> compound_statement .)
    ELSE            reduce using rule 190 (statement -> compound_statement .)
    CASE            reduce using rule 190 (statement -> compound_statement .)
    DEFAULT         reduce using rule 190 (statement -> compound_statement .)


state 127

    (191) statement -> expression_statement .

    }               reduce using rule 191 (statement -> expression_statement .)
    {               reduce using rule 191 (statement -> expression_statement .)
    ;               reduce using rule 191 (statement -> expression_statement .)
    IF              reduce using rule 191 (statement -> expression_statement .)
    SWITCH          reduce using rule 191 (statement -> expression_statement .)
    WHILE           reduce using rule 191 (statement -> expression_statement .)
    DO              reduce using rule 191 (statement -> expression_statement .)
    FOR             reduce using rule 191 (statement -> expression_statement .)
    GOTO            reduce using rule 191 (statement -> expression_statement .)
    CONTINUE        reduce using rule 191 (statement -> expression_statement .)
    BREAK           reduce using rule 191 (statement -> expression_statement .)
    RETURN          reduce using rule 191 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 191 (statement -> expression_statement .)
    EXTERN          reduce using rule 191 (statement -> expression_statement .)
    STATIC          reduce using rule 191 (statement -> expression_statement .)
    AUTO            reduce using rule 191 (statement -> expression_statement .)
    REGISTER        reduce using rule 191 (statement -> expression_statement .)
    VOID            reduce using rule 191 (statement -> expression_statement .)
    CHAR            reduce using rule 191 (statement -> expression_statement .)
    SHORT           reduce using rule 191 (statement -> expression_statement .)
    INT             reduce using rule 191 (statement -> expression_statement .)
    LONG            reduce using rule 191 (statement -> expression_statement .)
    FLOAT           reduce using rule 191 (statement -> expression_statement .)
    DOUBLE          reduce using rule 191 (statement -> expression_statement .)
    SIGNED          reduce using rule 191 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 191 (statement -> expression_statement .)
    BOOL            reduce using rule 191 (statement -> expression_statement .)
    CONST           reduce using rule 191 (statement -> expression_statement .)
    VOLATILE        reduce using rule 191 (statement -> expression_statement .)
    RESTRICT        reduce using rule 191 (statement -> expression_statement .)
    (               reduce using rule 191 (statement -> expression_statement .)
    ID              reduce using rule 191 (statement -> expression_statement .)
    ENUM            reduce using rule 191 (statement -> expression_statement .)
    STRUCT          reduce using rule 191 (statement -> expression_statement .)
    UNION           reduce using rule 191 (statement -> expression_statement .)
    INC             reduce using rule 191 (statement -> expression_statement .)
    DEC             reduce using rule 191 (statement -> expression_statement .)
    SIZEOF          reduce using rule 191 (statement -> expression_statement .)
    &               reduce using rule 191 (statement -> expression_statement .)
    *               reduce using rule 191 (statement -> expression_statement .)
    +               reduce using rule 191 (statement -> expression_statement .)
    -               reduce using rule 191 (statement -> expression_statement .)
    ~               reduce using rule 191 (statement -> expression_statement .)
    !               reduce using rule 191 (statement -> expression_statement .)
    CONSTANCE       reduce using rule 191 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 191 (statement -> expression_statement .)
    ELSE            reduce using rule 191 (statement -> expression_statement .)
    CASE            reduce using rule 191 (statement -> expression_statement .)
    DEFAULT         reduce using rule 191 (statement -> expression_statement .)


state 128

    (192) statement -> selection_statement .

    }               reduce using rule 192 (statement -> selection_statement .)
    {               reduce using rule 192 (statement -> selection_statement .)
    ;               reduce using rule 192 (statement -> selection_statement .)
    IF              reduce using rule 192 (statement -> selection_statement .)
    SWITCH          reduce using rule 192 (statement -> selection_statement .)
    WHILE           reduce using rule 192 (statement -> selection_statement .)
    DO              reduce using rule 192 (statement -> selection_statement .)
    FOR             reduce using rule 192 (statement -> selection_statement .)
    GOTO            reduce using rule 192 (statement -> selection_statement .)
    CONTINUE        reduce using rule 192 (statement -> selection_statement .)
    BREAK           reduce using rule 192 (statement -> selection_statement .)
    RETURN          reduce using rule 192 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 192 (statement -> selection_statement .)
    EXTERN          reduce using rule 192 (statement -> selection_statement .)
    STATIC          reduce using rule 192 (statement -> selection_statement .)
    AUTO            reduce using rule 192 (statement -> selection_statement .)
    REGISTER        reduce using rule 192 (statement -> selection_statement .)
    VOID            reduce using rule 192 (statement -> selection_statement .)
    CHAR            reduce using rule 192 (statement -> selection_statement .)
    SHORT           reduce using rule 192 (statement -> selection_statement .)
    INT             reduce using rule 192 (statement -> selection_statement .)
    LONG            reduce using rule 192 (statement -> selection_statement .)
    FLOAT           reduce using rule 192 (statement -> selection_statement .)
    DOUBLE          reduce using rule 192 (statement -> selection_statement .)
    SIGNED          reduce using rule 192 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 192 (statement -> selection_statement .)
    BOOL            reduce using rule 192 (statement -> selection_statement .)
    CONST           reduce using rule 192 (statement -> selection_statement .)
    VOLATILE        reduce using rule 192 (statement -> selection_statement .)
    RESTRICT        reduce using rule 192 (statement -> selection_statement .)
    (               reduce using rule 192 (statement -> selection_statement .)
    ID              reduce using rule 192 (statement -> selection_statement .)
    ENUM            reduce using rule 192 (statement -> selection_statement .)
    STRUCT          reduce using rule 192 (statement -> selection_statement .)
    UNION           reduce using rule 192 (statement -> selection_statement .)
    INC             reduce using rule 192 (statement -> selection_statement .)
    DEC             reduce using rule 192 (statement -> selection_statement .)
    SIZEOF          reduce using rule 192 (statement -> selection_statement .)
    &               reduce using rule 192 (statement -> selection_statement .)
    *               reduce using rule 192 (statement -> selection_statement .)
    +               reduce using rule 192 (statement -> selection_statement .)
    -               reduce using rule 192 (statement -> selection_statement .)
    ~               reduce using rule 192 (statement -> selection_statement .)
    !               reduce using rule 192 (statement -> selection_statement .)
    CONSTANCE       reduce using rule 192 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 192 (statement -> selection_statement .)
    ELSE            reduce using rule 192 (statement -> selection_statement .)
    CASE            reduce using rule 192 (statement -> selection_statement .)
    DEFAULT         reduce using rule 192 (statement -> selection_statement .)


state 129

    (193) statement -> iteration_statement .

    }               reduce using rule 193 (statement -> iteration_statement .)
    {               reduce using rule 193 (statement -> iteration_statement .)
    ;               reduce using rule 193 (statement -> iteration_statement .)
    IF              reduce using rule 193 (statement -> iteration_statement .)
    SWITCH          reduce using rule 193 (statement -> iteration_statement .)
    WHILE           reduce using rule 193 (statement -> iteration_statement .)
    DO              reduce using rule 193 (statement -> iteration_statement .)
    FOR             reduce using rule 193 (statement -> iteration_statement .)
    GOTO            reduce using rule 193 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 193 (statement -> iteration_statement .)
    BREAK           reduce using rule 193 (statement -> iteration_statement .)
    RETURN          reduce using rule 193 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 193 (statement -> iteration_statement .)
    EXTERN          reduce using rule 193 (statement -> iteration_statement .)
    STATIC          reduce using rule 193 (statement -> iteration_statement .)
    AUTO            reduce using rule 193 (statement -> iteration_statement .)
    REGISTER        reduce using rule 193 (statement -> iteration_statement .)
    VOID            reduce using rule 193 (statement -> iteration_statement .)
    CHAR            reduce using rule 193 (statement -> iteration_statement .)
    SHORT           reduce using rule 193 (statement -> iteration_statement .)
    INT             reduce using rule 193 (statement -> iteration_statement .)
    LONG            reduce using rule 193 (statement -> iteration_statement .)
    FLOAT           reduce using rule 193 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 193 (statement -> iteration_statement .)
    SIGNED          reduce using rule 193 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 193 (statement -> iteration_statement .)
    BOOL            reduce using rule 193 (statement -> iteration_statement .)
    CONST           reduce using rule 193 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 193 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 193 (statement -> iteration_statement .)
    (               reduce using rule 193 (statement -> iteration_statement .)
    ID              reduce using rule 193 (statement -> iteration_statement .)
    ENUM            reduce using rule 193 (statement -> iteration_statement .)
    STRUCT          reduce using rule 193 (statement -> iteration_statement .)
    UNION           reduce using rule 193 (statement -> iteration_statement .)
    INC             reduce using rule 193 (statement -> iteration_statement .)
    DEC             reduce using rule 193 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 193 (statement -> iteration_statement .)
    &               reduce using rule 193 (statement -> iteration_statement .)
    *               reduce using rule 193 (statement -> iteration_statement .)
    +               reduce using rule 193 (statement -> iteration_statement .)
    -               reduce using rule 193 (statement -> iteration_statement .)
    ~               reduce using rule 193 (statement -> iteration_statement .)
    !               reduce using rule 193 (statement -> iteration_statement .)
    CONSTANCE       reduce using rule 193 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 193 (statement -> iteration_statement .)
    ELSE            reduce using rule 193 (statement -> iteration_statement .)
    CASE            reduce using rule 193 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 193 (statement -> iteration_statement .)


state 130

    (194) statement -> jump_statement .

    }               reduce using rule 194 (statement -> jump_statement .)
    {               reduce using rule 194 (statement -> jump_statement .)
    ;               reduce using rule 194 (statement -> jump_statement .)
    IF              reduce using rule 194 (statement -> jump_statement .)
    SWITCH          reduce using rule 194 (statement -> jump_statement .)
    WHILE           reduce using rule 194 (statement -> jump_statement .)
    DO              reduce using rule 194 (statement -> jump_statement .)
    FOR             reduce using rule 194 (statement -> jump_statement .)
    GOTO            reduce using rule 194 (statement -> jump_statement .)
    CONTINUE        reduce using rule 194 (statement -> jump_statement .)
    BREAK           reduce using rule 194 (statement -> jump_statement .)
    RETURN          reduce using rule 194 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 194 (statement -> jump_statement .)
    EXTERN          reduce using rule 194 (statement -> jump_statement .)
    STATIC          reduce using rule 194 (statement -> jump_statement .)
    AUTO            reduce using rule 194 (statement -> jump_statement .)
    REGISTER        reduce using rule 194 (statement -> jump_statement .)
    VOID            reduce using rule 194 (statement -> jump_statement .)
    CHAR            reduce using rule 194 (statement -> jump_statement .)
    SHORT           reduce using rule 194 (statement -> jump_statement .)
    INT             reduce using rule 194 (statement -> jump_statement .)
    LONG            reduce using rule 194 (statement -> jump_statement .)
    FLOAT           reduce using rule 194 (statement -> jump_statement .)
    DOUBLE          reduce using rule 194 (statement -> jump_statement .)
    SIGNED          reduce using rule 194 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 194 (statement -> jump_statement .)
    BOOL            reduce using rule 194 (statement -> jump_statement .)
    CONST           reduce using rule 194 (statement -> jump_statement .)
    VOLATILE        reduce using rule 194 (statement -> jump_statement .)
    RESTRICT        reduce using rule 194 (statement -> jump_statement .)
    (               reduce using rule 194 (statement -> jump_statement .)
    ID              reduce using rule 194 (statement -> jump_statement .)
    ENUM            reduce using rule 194 (statement -> jump_statement .)
    STRUCT          reduce using rule 194 (statement -> jump_statement .)
    UNION           reduce using rule 194 (statement -> jump_statement .)
    INC             reduce using rule 194 (statement -> jump_statement .)
    DEC             reduce using rule 194 (statement -> jump_statement .)
    SIZEOF          reduce using rule 194 (statement -> jump_statement .)
    &               reduce using rule 194 (statement -> jump_statement .)
    *               reduce using rule 194 (statement -> jump_statement .)
    +               reduce using rule 194 (statement -> jump_statement .)
    -               reduce using rule 194 (statement -> jump_statement .)
    ~               reduce using rule 194 (statement -> jump_statement .)
    !               reduce using rule 194 (statement -> jump_statement .)
    CONSTANCE       reduce using rule 194 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 194 (statement -> jump_statement .)
    ELSE            reduce using rule 194 (statement -> jump_statement .)
    CASE            reduce using rule 194 (statement -> jump_statement .)
    DEFAULT         reduce using rule 194 (statement -> jump_statement .)


state 131

    (195) labeled_statement -> identifier . :
    (262) postfix_expression_v -> identifier . ( )
    (263) postfix_expression_v -> identifier . ( argument_expression_list )
    (268) postfix_expression_v_no_func -> identifier .

    :               shift and go to state 241
    (               shift and go to state 242
    INC             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    DEC             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    [               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    .               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    PTR             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    =               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_MUL          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_DIV          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_MOD          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_PLUS         reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_SUB          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_SL           reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_SR           reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_AND          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_XOR          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_OR           reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    *               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    /               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    %               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    +               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    -               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    SHIFT_LEFT      reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    SHIFT_RIGHT     reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    <               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    >               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    LE              reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    GE              reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    EQUAL           reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    NE              reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    &               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    ^               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    |               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AND             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    ?               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    OR              reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    ;               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    ,               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)


state 132

    (197) expression_statement -> expression_variable . ;
    (199) expression_variable -> expression_variable . , assignment_expression

    ;               shift and go to state 243
    ,               shift and go to state 244


state 133

    (276) selection_statement -> IF . ( expression_variable ) statement ELSE statement
    (277) selection_statement -> IF . ( expression_variable ) statement

    (               shift and go to state 245


state 134

    (175) identifier -> ( . identifier )
    (269) postfix_expression_v_no_func -> ( . postfix_expression_v_no_func )
    (245) cast_expression_v -> ( . specifier_qualifier_list ) cast_expression_v
    (275) primary_expression_v -> ( . expression_variable )
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    (               shift and go to state 134
    ID              shift and go to state 42
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    identifier                     shift and go to state 246
    postfix_expression_v_no_func   shift and go to state 247
    specifier_qualifier_list       shift and go to state 248
    cast_expression_v              shift and go to state 151
    expression_variable            shift and go to state 249
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    assignment_expression          shift and go to state 143
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    struct_or_union                shift and go to state 29
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    logical_and_expression_v       shift and go to state 153
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 135

    (278) selection_statement -> SWITCH . ( expression_variable ) statement_switch

    (               shift and go to state 250


state 136

    (294) iteration_statement -> WHILE . ( expression_variable ) statement

    (               shift and go to state 251


state 137

    (295) iteration_statement -> DO . statement WHILE ( expression_variable ) ;
    (189) statement -> . labeled_statement
    (190) statement -> . compound_statement
    (191) statement -> . expression_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) labeled_statement -> . identifier :
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    statement                      shift and go to state 252
    expression_variable            shift and go to state 132
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 138

    (296) iteration_statement -> FOR . ( expression_statement expression_statement ) statement
    (297) iteration_statement -> FOR . ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> FOR . ( declaration expression_statement ) statement
    (299) iteration_statement -> FOR . ( declaration expression_statement expression_variable ) statement

    (               shift and go to state 253


state 139

    (300) jump_statement -> GOTO . ID ;

    ID              shift and go to state 254


state 140

    (301) jump_statement -> CONTINUE . ;

    ;               shift and go to state 255


state 141

    (302) jump_statement -> BREAK . ;

    ;               shift and go to state 256


state 142

    (303) jump_statement -> RETURN . ;
    (304) jump_statement -> RETURN . expression_variable ;
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    ;               shift and go to state 257
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_variable            shift and go to state 258
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 143

    (198) expression_variable -> assignment_expression .

    ;               reduce using rule 198 (expression_variable -> assignment_expression .)
    ,               reduce using rule 198 (expression_variable -> assignment_expression .)
    )               reduce using rule 198 (expression_variable -> assignment_expression .)
    :               reduce using rule 198 (expression_variable -> assignment_expression .)


state 144

    (200) assignment_expression -> conditional_expression_v .

    ;               reduce using rule 200 (assignment_expression -> conditional_expression_v .)
    ,               reduce using rule 200 (assignment_expression -> conditional_expression_v .)
    )               reduce using rule 200 (assignment_expression -> conditional_expression_v .)
    }               reduce using rule 200 (assignment_expression -> conditional_expression_v .)
    :               reduce using rule 200 (assignment_expression -> conditional_expression_v .)


state 145

    (201) assignment_expression -> unary_expression_v . assignment_operator assignment_expression
    (243) cast_expression_v -> unary_expression_v .
    (202) assignment_operator -> . =
    (203) assignment_operator -> . AO_MUL
    (204) assignment_operator -> . AO_DIV
    (205) assignment_operator -> . AO_MOD
    (206) assignment_operator -> . AO_PLUS
    (207) assignment_operator -> . AO_SUB
    (208) assignment_operator -> . AO_SL
    (209) assignment_operator -> . AO_SR
    (210) assignment_operator -> . AO_AND
    (211) assignment_operator -> . AO_XOR
    (212) assignment_operator -> . AO_OR

    *               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    /               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    %               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    +               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    -               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    SHIFT_LEFT      reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    SHIFT_RIGHT     reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    <               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    >               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    LE              reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    GE              reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    EQUAL           reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    NE              reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    &               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    ^               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    |               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    AND             reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    ?               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    OR              reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    ;               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    ,               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    )               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    }               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    :               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    =               shift and go to state 260
    AO_MUL          shift and go to state 261
    AO_DIV          shift and go to state 262
    AO_MOD          shift and go to state 263
    AO_PLUS         shift and go to state 264
    AO_SUB          shift and go to state 265
    AO_SL           shift and go to state 266
    AO_SR           shift and go to state 267
    AO_AND          shift and go to state 268
    AO_XOR          shift and go to state 269
    AO_OR           shift and go to state 270

    assignment_operator            shift and go to state 259

state 146

    (213) conditional_expression_v -> logical_or_expression_v .
    (214) conditional_expression_v -> logical_or_expression_v . ? expression_variable : conditional_expression_v
    (216) logical_or_expression_v -> logical_or_expression_v . OR logical_and_expression_v

    ;               reduce using rule 213 (conditional_expression_v -> logical_or_expression_v .)
    ,               reduce using rule 213 (conditional_expression_v -> logical_or_expression_v .)
    )               reduce using rule 213 (conditional_expression_v -> logical_or_expression_v .)
    }               reduce using rule 213 (conditional_expression_v -> logical_or_expression_v .)
    :               reduce using rule 213 (conditional_expression_v -> logical_or_expression_v .)
    ?               shift and go to state 271
    OR              shift and go to state 272


state 147

    (249) unary_expression_v -> postfix_expression_v .
    (261) postfix_expression_v -> postfix_expression_v . [ expression ]
    (264) postfix_expression_v -> postfix_expression_v . . ID
    (265) postfix_expression_v -> postfix_expression_v . PTR ID

    =               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    AO_MUL          reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    AO_DIV          reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    AO_MOD          reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    AO_PLUS         reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    AO_SUB          reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    AO_SL           reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    AO_SR           reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    AO_AND          reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    AO_XOR          reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    AO_OR           reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    *               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    /               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    %               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    +               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    -               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    SHIFT_LEFT      reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    SHIFT_RIGHT     reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    <               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    >               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    LE              reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    GE              reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    EQUAL           reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    NE              reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    &               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    ^               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    |               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    AND             reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    ?               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    OR              reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    ;               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    ,               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    )               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    }               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    :               reduce using rule 249 (unary_expression_v -> postfix_expression_v .)
    [               shift and go to state 273
    .               shift and go to state 274
    PTR             shift and go to state 275


state 148

    (250) unary_expression_v -> INC . unary_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 277
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 278
    ID              shift and go to state 42

    unary_expression_v             shift and go to state 276
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 149

    (251) unary_expression_v -> DEC . unary_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 277
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 278
    ID              shift and go to state 42

    unary_expression_v             shift and go to state 279
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 150

    (252) unary_expression_v -> unary_operator_v . cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 280
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 151

    (239) multiplicative_expression_v -> cast_expression_v .

    *               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    /               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    %               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    +               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    -               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    SHIFT_LEFT      reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    SHIFT_RIGHT     reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    <               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    >               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    LE              reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    GE              reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    EQUAL           reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    NE              reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    &               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    ^               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    |               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    AND             reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    ?               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    OR              reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    ;               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    ,               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    )               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    }               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)
    :               reduce using rule 239 (multiplicative_expression_v -> cast_expression_v .)


state 152

    (253) unary_expression_v -> SIZEOF . unary_expression_v
    (247) unary_expression_v_constance -> SIZEOF . unary_expression_v_constance
    (248) unary_expression_v_constance -> SIZEOF . ( specifier_qualifier_list )
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 285
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    unary_expression_v             shift and go to state 283
    unary_expression_v_constance   shift and go to state 284
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 153

    (215) logical_or_expression_v -> logical_and_expression_v .
    (218) logical_and_expression_v -> logical_and_expression_v . AND inclusive_or_expression_v

    ?               reduce using rule 215 (logical_or_expression_v -> logical_and_expression_v .)
    OR              reduce using rule 215 (logical_or_expression_v -> logical_and_expression_v .)
    ;               reduce using rule 215 (logical_or_expression_v -> logical_and_expression_v .)
    ,               reduce using rule 215 (logical_or_expression_v -> logical_and_expression_v .)
    )               reduce using rule 215 (logical_or_expression_v -> logical_and_expression_v .)
    }               reduce using rule 215 (logical_or_expression_v -> logical_and_expression_v .)
    :               reduce using rule 215 (logical_or_expression_v -> logical_and_expression_v .)
    AND             shift and go to state 286


state 154

    (260) postfix_expression_v -> postfix_expression_v_no_func .
    (266) postfix_expression_v -> postfix_expression_v_no_func . INC
    (267) postfix_expression_v -> postfix_expression_v_no_func . DEC
    (270) postfix_expression_v_no_func -> postfix_expression_v_no_func . [ expression ]
    (271) postfix_expression_v_no_func -> postfix_expression_v_no_func . . ID
    (272) postfix_expression_v_no_func -> postfix_expression_v_no_func . PTR ID

  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for PTR resolved as shift
    =               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_MUL          reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_DIV          reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_MOD          reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_PLUS         reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_SUB          reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_SL           reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_SR           reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_AND          reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_XOR          reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_OR           reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    *               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    /               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    %               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    +               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    -               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    SHIFT_LEFT      reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    SHIFT_RIGHT     reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    <               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    >               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    LE              reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    GE              reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    EQUAL           reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    NE              reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    &               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    ^               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    |               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AND             reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    ?               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    OR              reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    ;               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    ,               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    )               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    }               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    :               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    INC             shift and go to state 287
    DEC             shift and go to state 288
    [               shift and go to state 289
    .               shift and go to state 290
    PTR             shift and go to state 291

  ! [               [ reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .) ]
  ! .               [ reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .) ]
  ! PTR             [ reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .) ]


state 155

    (254) unary_operator_v -> & .

    (               reduce using rule 254 (unary_operator_v -> & .)
    INC             reduce using rule 254 (unary_operator_v -> & .)
    DEC             reduce using rule 254 (unary_operator_v -> & .)
    SIZEOF          reduce using rule 254 (unary_operator_v -> & .)
    &               reduce using rule 254 (unary_operator_v -> & .)
    *               reduce using rule 254 (unary_operator_v -> & .)
    +               reduce using rule 254 (unary_operator_v -> & .)
    -               reduce using rule 254 (unary_operator_v -> & .)
    ~               reduce using rule 254 (unary_operator_v -> & .)
    !               reduce using rule 254 (unary_operator_v -> & .)
    CONSTANCE       reduce using rule 254 (unary_operator_v -> & .)
    STRING_LITERAL  reduce using rule 254 (unary_operator_v -> & .)
    ID              reduce using rule 254 (unary_operator_v -> & .)


state 156

    (255) unary_operator_v -> * .

    (               reduce using rule 255 (unary_operator_v -> * .)
    INC             reduce using rule 255 (unary_operator_v -> * .)
    DEC             reduce using rule 255 (unary_operator_v -> * .)
    SIZEOF          reduce using rule 255 (unary_operator_v -> * .)
    &               reduce using rule 255 (unary_operator_v -> * .)
    *               reduce using rule 255 (unary_operator_v -> * .)
    +               reduce using rule 255 (unary_operator_v -> * .)
    -               reduce using rule 255 (unary_operator_v -> * .)
    ~               reduce using rule 255 (unary_operator_v -> * .)
    !               reduce using rule 255 (unary_operator_v -> * .)
    CONSTANCE       reduce using rule 255 (unary_operator_v -> * .)
    STRING_LITERAL  reduce using rule 255 (unary_operator_v -> * .)
    ID              reduce using rule 255 (unary_operator_v -> * .)


state 157

    (256) unary_operator_v -> + .

    (               reduce using rule 256 (unary_operator_v -> + .)
    INC             reduce using rule 256 (unary_operator_v -> + .)
    DEC             reduce using rule 256 (unary_operator_v -> + .)
    SIZEOF          reduce using rule 256 (unary_operator_v -> + .)
    &               reduce using rule 256 (unary_operator_v -> + .)
    *               reduce using rule 256 (unary_operator_v -> + .)
    +               reduce using rule 256 (unary_operator_v -> + .)
    -               reduce using rule 256 (unary_operator_v -> + .)
    ~               reduce using rule 256 (unary_operator_v -> + .)
    !               reduce using rule 256 (unary_operator_v -> + .)
    CONSTANCE       reduce using rule 256 (unary_operator_v -> + .)
    STRING_LITERAL  reduce using rule 256 (unary_operator_v -> + .)
    ID              reduce using rule 256 (unary_operator_v -> + .)


state 158

    (257) unary_operator_v -> - .

    (               reduce using rule 257 (unary_operator_v -> - .)
    INC             reduce using rule 257 (unary_operator_v -> - .)
    DEC             reduce using rule 257 (unary_operator_v -> - .)
    SIZEOF          reduce using rule 257 (unary_operator_v -> - .)
    &               reduce using rule 257 (unary_operator_v -> - .)
    *               reduce using rule 257 (unary_operator_v -> - .)
    +               reduce using rule 257 (unary_operator_v -> - .)
    -               reduce using rule 257 (unary_operator_v -> - .)
    ~               reduce using rule 257 (unary_operator_v -> - .)
    !               reduce using rule 257 (unary_operator_v -> - .)
    CONSTANCE       reduce using rule 257 (unary_operator_v -> - .)
    STRING_LITERAL  reduce using rule 257 (unary_operator_v -> - .)
    ID              reduce using rule 257 (unary_operator_v -> - .)


state 159

    (258) unary_operator_v -> ~ .

    (               reduce using rule 258 (unary_operator_v -> ~ .)
    INC             reduce using rule 258 (unary_operator_v -> ~ .)
    DEC             reduce using rule 258 (unary_operator_v -> ~ .)
    SIZEOF          reduce using rule 258 (unary_operator_v -> ~ .)
    &               reduce using rule 258 (unary_operator_v -> ~ .)
    *               reduce using rule 258 (unary_operator_v -> ~ .)
    +               reduce using rule 258 (unary_operator_v -> ~ .)
    -               reduce using rule 258 (unary_operator_v -> ~ .)
    ~               reduce using rule 258 (unary_operator_v -> ~ .)
    !               reduce using rule 258 (unary_operator_v -> ~ .)
    CONSTANCE       reduce using rule 258 (unary_operator_v -> ~ .)
    STRING_LITERAL  reduce using rule 258 (unary_operator_v -> ~ .)
    ID              reduce using rule 258 (unary_operator_v -> ~ .)


state 160

    (259) unary_operator_v -> ! .

    (               reduce using rule 259 (unary_operator_v -> ! .)
    INC             reduce using rule 259 (unary_operator_v -> ! .)
    DEC             reduce using rule 259 (unary_operator_v -> ! .)
    SIZEOF          reduce using rule 259 (unary_operator_v -> ! .)
    &               reduce using rule 259 (unary_operator_v -> ! .)
    *               reduce using rule 259 (unary_operator_v -> ! .)
    +               reduce using rule 259 (unary_operator_v -> ! .)
    -               reduce using rule 259 (unary_operator_v -> ! .)
    ~               reduce using rule 259 (unary_operator_v -> ! .)
    !               reduce using rule 259 (unary_operator_v -> ! .)
    CONSTANCE       reduce using rule 259 (unary_operator_v -> ! .)
    STRING_LITERAL  reduce using rule 259 (unary_operator_v -> ! .)
    ID              reduce using rule 259 (unary_operator_v -> ! .)


state 161

    (217) logical_and_expression_v -> inclusive_or_expression_v .
    (220) inclusive_or_expression_v -> inclusive_or_expression_v . | exclusive_or_expression_v

    AND             reduce using rule 217 (logical_and_expression_v -> inclusive_or_expression_v .)
    ?               reduce using rule 217 (logical_and_expression_v -> inclusive_or_expression_v .)
    OR              reduce using rule 217 (logical_and_expression_v -> inclusive_or_expression_v .)
    ;               reduce using rule 217 (logical_and_expression_v -> inclusive_or_expression_v .)
    ,               reduce using rule 217 (logical_and_expression_v -> inclusive_or_expression_v .)
    )               reduce using rule 217 (logical_and_expression_v -> inclusive_or_expression_v .)
    }               reduce using rule 217 (logical_and_expression_v -> inclusive_or_expression_v .)
    :               reduce using rule 217 (logical_and_expression_v -> inclusive_or_expression_v .)
    |               shift and go to state 292


state 162

    (219) inclusive_or_expression_v -> exclusive_or_expression_v .
    (222) exclusive_or_expression_v -> exclusive_or_expression_v . ^ and_expression_v

    |               reduce using rule 219 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    AND             reduce using rule 219 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    ?               reduce using rule 219 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    OR              reduce using rule 219 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    ;               reduce using rule 219 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    ,               reduce using rule 219 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    )               reduce using rule 219 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    }               reduce using rule 219 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    :               reduce using rule 219 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    ^               shift and go to state 293


state 163

    (221) exclusive_or_expression_v -> and_expression_v .
    (224) and_expression_v -> and_expression_v . & equality_expression_v

    ^               reduce using rule 221 (exclusive_or_expression_v -> and_expression_v .)
    |               reduce using rule 221 (exclusive_or_expression_v -> and_expression_v .)
    AND             reduce using rule 221 (exclusive_or_expression_v -> and_expression_v .)
    ?               reduce using rule 221 (exclusive_or_expression_v -> and_expression_v .)
    OR              reduce using rule 221 (exclusive_or_expression_v -> and_expression_v .)
    ;               reduce using rule 221 (exclusive_or_expression_v -> and_expression_v .)
    ,               reduce using rule 221 (exclusive_or_expression_v -> and_expression_v .)
    )               reduce using rule 221 (exclusive_or_expression_v -> and_expression_v .)
    }               reduce using rule 221 (exclusive_or_expression_v -> and_expression_v .)
    :               reduce using rule 221 (exclusive_or_expression_v -> and_expression_v .)
    &               shift and go to state 294


state 164

    (223) and_expression_v -> equality_expression_v .
    (226) equality_expression_v -> equality_expression_v . EQUAL relational_expression_v
    (227) equality_expression_v -> equality_expression_v . NE relational_expression_v

    &               reduce using rule 223 (and_expression_v -> equality_expression_v .)
    ^               reduce using rule 223 (and_expression_v -> equality_expression_v .)
    |               reduce using rule 223 (and_expression_v -> equality_expression_v .)
    AND             reduce using rule 223 (and_expression_v -> equality_expression_v .)
    ?               reduce using rule 223 (and_expression_v -> equality_expression_v .)
    OR              reduce using rule 223 (and_expression_v -> equality_expression_v .)
    ;               reduce using rule 223 (and_expression_v -> equality_expression_v .)
    ,               reduce using rule 223 (and_expression_v -> equality_expression_v .)
    )               reduce using rule 223 (and_expression_v -> equality_expression_v .)
    }               reduce using rule 223 (and_expression_v -> equality_expression_v .)
    :               reduce using rule 223 (and_expression_v -> equality_expression_v .)
    EQUAL           shift and go to state 295
    NE              shift and go to state 296


state 165

    (225) equality_expression_v -> relational_expression_v .
    (229) relational_expression_v -> relational_expression_v . < shift_expression_v
    (230) relational_expression_v -> relational_expression_v . > shift_expression_v
    (231) relational_expression_v -> relational_expression_v . LE shift_expression_v
    (232) relational_expression_v -> relational_expression_v . GE shift_expression_v

    EQUAL           reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    NE              reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    &               reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    ^               reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    |               reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    AND             reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    ?               reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    OR              reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    ;               reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    ,               reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    )               reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    }               reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    :               reduce using rule 225 (equality_expression_v -> relational_expression_v .)
    <               shift and go to state 297
    >               shift and go to state 298
    LE              shift and go to state 299
    GE              shift and go to state 300


state 166

    (228) relational_expression_v -> shift_expression_v .
    (234) shift_expression_v -> shift_expression_v . SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> shift_expression_v . SHIFT_RIGHT additive_expression_v

    <               reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    >               reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    LE              reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    GE              reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    EQUAL           reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    NE              reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    &               reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    ^               reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    |               reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    AND             reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    ?               reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    OR              reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    ;               reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    ,               reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    )               reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    }               reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    :               reduce using rule 228 (relational_expression_v -> shift_expression_v .)
    SHIFT_LEFT      shift and go to state 301
    SHIFT_RIGHT     shift and go to state 302


state 167

    (233) shift_expression_v -> additive_expression_v .
    (237) additive_expression_v -> additive_expression_v . + multiplicative_expression_v
    (238) additive_expression_v -> additive_expression_v . - multiplicative_expression_v

    SHIFT_LEFT      reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    SHIFT_RIGHT     reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    <               reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    >               reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    LE              reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    GE              reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    EQUAL           reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    NE              reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    &               reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    ^               reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    |               reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    AND             reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    ?               reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    OR              reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    ;               reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    ,               reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    )               reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    }               reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    :               reduce using rule 233 (shift_expression_v -> additive_expression_v .)
    +               shift and go to state 303
    -               shift and go to state 304


state 168

    (236) additive_expression_v -> multiplicative_expression_v .
    (240) multiplicative_expression_v -> multiplicative_expression_v . * cast_expression_v
    (241) multiplicative_expression_v -> multiplicative_expression_v . / cast_expression_v
    (242) multiplicative_expression_v -> multiplicative_expression_v . % cast_expression_v

    +               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    -               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    SHIFT_LEFT      reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    SHIFT_RIGHT     reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    <               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    >               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    LE              reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    GE              reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    EQUAL           reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    NE              reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    &               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    ^               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    |               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    AND             reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    ?               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    OR              reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    ;               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    ,               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    )               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    }               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    :               reduce using rule 236 (additive_expression_v -> multiplicative_expression_v .)
    *               shift and go to state 305
    /               shift and go to state 306
    %               shift and go to state 307


state 169

    (244) cast_expression_v -> unary_expression_v_constance .

    *               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    /               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    %               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    +               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    -               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    SHIFT_LEFT      reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    SHIFT_RIGHT     reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    <               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    >               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    LE              reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    GE              reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    EQUAL           reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    NE              reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    &               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    ^               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    |               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    AND             reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    ?               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    OR              reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    ;               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    ,               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    )               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    =               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    AO_MUL          reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    AO_DIV          reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    AO_MOD          reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    AO_PLUS         reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    AO_SUB          reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    AO_SL           reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    AO_SR           reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    AO_AND          reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    AO_XOR          reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    AO_OR           reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    }               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)
    :               reduce using rule 244 (cast_expression_v -> unary_expression_v_constance .)


state 170

    (246) unary_expression_v_constance -> primary_expression_v .

    *               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    /               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    %               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    +               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    -               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    SHIFT_LEFT      reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    SHIFT_RIGHT     reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    <               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    >               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    LE              reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    GE              reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    EQUAL           reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    NE              reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    &               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    ^               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    |               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    AND             reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    ?               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    OR              reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    ;               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    ,               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    )               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    =               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    AO_MUL          reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    AO_DIV          reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    AO_MOD          reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    AO_PLUS         reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    AO_SUB          reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    AO_SL           reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    AO_SR           reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    AO_AND          reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    AO_XOR          reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    AO_OR           reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    }               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)
    :               reduce using rule 246 (unary_expression_v_constance -> primary_expression_v .)


state 171

    (273) primary_expression_v -> CONSTANCE .

    *               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    /               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    %               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    +               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    -               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    SHIFT_LEFT      reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    SHIFT_RIGHT     reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    <               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    >               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    LE              reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    GE              reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    EQUAL           reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    NE              reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    &               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    ^               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    |               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    AND             reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    ?               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    OR              reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    ;               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    ,               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    )               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    =               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    AO_MUL          reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    AO_DIV          reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    AO_MOD          reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    AO_PLUS         reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    AO_SUB          reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    AO_SL           reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    AO_SR           reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    AO_AND          reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    AO_XOR          reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    AO_OR           reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    }               reduce using rule 273 (primary_expression_v -> CONSTANCE .)
    :               reduce using rule 273 (primary_expression_v -> CONSTANCE .)


state 172

    (274) primary_expression_v -> STRING_LITERAL .

    *               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    /               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    %               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    +               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    -               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    SHIFT_LEFT      reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    SHIFT_RIGHT     reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    <               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    >               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    LE              reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    GE              reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    EQUAL           reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    NE              reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    &               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    ^               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    |               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    AND             reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    ?               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    OR              reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    ;               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    ,               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    )               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    =               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    AO_MUL          reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    AO_DIV          reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    AO_MOD          reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    AO_PLUS         reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    AO_SUB          reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    AO_SL           reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    AO_SR           reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    AO_AND          reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    AO_XOR          reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    AO_OR           reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    }               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)
    :               reduce using rule 274 (primary_expression_v -> STRING_LITERAL .)


state 173

    (8) init_declarator_list -> init_declarator_list , init_declarator .

    ;               reduce using rule 8 (init_declarator_list -> init_declarator_list , init_declarator .)
    ,               reduce using rule 8 (init_declarator_list -> init_declarator_list , init_declarator .)


state 174

    (94) declarator -> pointer . direct_declarator
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 175
    ID              shift and go to state 42

    direct_declarator              shift and go to state 73
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 176
    identifier                     shift and go to state 177

state 175

    (103) direct_declarator -> ( . declarator )
    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (173) direct_function_declarator -> ( . direct_function_declarator )
    (175) identifier -> ( . identifier )
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    *               shift and go to state 38
    (               shift and go to state 308
    ID              shift and go to state 42

    declarator                     shift and go to state 85
    pointer                        shift and go to state 86
    direct_declarator_forlist      shift and go to state 87
    direct_function_declarator     shift and go to state 83
    identifier                     shift and go to state 309
    direct_declarator              shift and go to state 44

state 176

    (104) direct_declarator -> direct_function_declarator .

    =               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    ;               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    ,               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    )               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    :               reduce using rule 104 (direct_declarator -> direct_function_declarator .)


state 177

    (105) direct_declarator_forlist -> identifier .
    (109) direct_declarator_forlist -> identifier . [ constant_expression ]
    (110) direct_declarator_forlist -> identifier . [ ]
    (174) direct_function_declarator -> identifier . parameter_type_list_definition
    (177) parameter_type_list_definition -> . ( )
    (178) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (179) parameter_type_list_definition -> . ( parameter_list )

  ! shift/reduce conflict for [ resolved as shift
    =               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    ;               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    ,               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    )               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    :               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    [               shift and go to state 89
    (               shift and go to state 90

  ! [               [ reduce using rule 105 (direct_declarator_forlist -> identifier .) ]

    parameter_type_list_definition shift and go to state 88

state 178

    (99) pointer -> * type_qualifier_list pointer .

    (               reduce using rule 99 (pointer -> * type_qualifier_list pointer .)
    ID              reduce using rule 99 (pointer -> * type_qualifier_list pointer .)
    [               reduce using rule 99 (pointer -> * type_qualifier_list pointer .)
    ,               reduce using rule 99 (pointer -> * type_qualifier_list pointer .)
    =               reduce using rule 99 (pointer -> * type_qualifier_list pointer .)
    )               reduce using rule 99 (pointer -> * type_qualifier_list pointer .)


state 179

    (101) type_qualifier_list -> type_qualifier_list type_qualifier .

    *               reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    (               reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    [               reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ,               reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    =               reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    )               reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 180

    (173) direct_function_declarator -> ( direct_function_declarator ) .

    {               reduce using rule 173 (direct_function_declarator -> ( direct_function_declarator ) .)
    =               reduce using rule 173 (direct_function_declarator -> ( direct_function_declarator ) .)
    ;               reduce using rule 173 (direct_function_declarator -> ( direct_function_declarator ) .)
    ,               reduce using rule 173 (direct_function_declarator -> ( direct_function_declarator ) .)
    )               reduce using rule 173 (direct_function_declarator -> ( direct_function_declarator ) .)
    :               reduce using rule 173 (direct_function_declarator -> ( direct_function_declarator ) .)


state 181

    (175) identifier -> ( identifier ) .

    [               reduce using rule 175 (identifier -> ( identifier ) .)
    (               reduce using rule 175 (identifier -> ( identifier ) .)
    =               reduce using rule 175 (identifier -> ( identifier ) .)
    ;               reduce using rule 175 (identifier -> ( identifier ) .)
    ,               reduce using rule 175 (identifier -> ( identifier ) .)
    {               reduce using rule 175 (identifier -> ( identifier ) .)
    TYPEDEF         reduce using rule 175 (identifier -> ( identifier ) .)
    EXTERN          reduce using rule 175 (identifier -> ( identifier ) .)
    STATIC          reduce using rule 175 (identifier -> ( identifier ) .)
    AUTO            reduce using rule 175 (identifier -> ( identifier ) .)
    REGISTER        reduce using rule 175 (identifier -> ( identifier ) .)
    CONST           reduce using rule 175 (identifier -> ( identifier ) .)
    VOLATILE        reduce using rule 175 (identifier -> ( identifier ) .)
    RESTRICT        reduce using rule 175 (identifier -> ( identifier ) .)
    *               reduce using rule 175 (identifier -> ( identifier ) .)
    ID              reduce using rule 175 (identifier -> ( identifier ) .)
    )               reduce using rule 175 (identifier -> ( identifier ) .)
    :               reduce using rule 175 (identifier -> ( identifier ) .)
    }               reduce using rule 175 (identifier -> ( identifier ) .)
    INC             reduce using rule 175 (identifier -> ( identifier ) .)
    DEC             reduce using rule 175 (identifier -> ( identifier ) .)
    .               reduce using rule 175 (identifier -> ( identifier ) .)
    PTR             reduce using rule 175 (identifier -> ( identifier ) .)
    AO_MUL          reduce using rule 175 (identifier -> ( identifier ) .)
    AO_DIV          reduce using rule 175 (identifier -> ( identifier ) .)
    AO_MOD          reduce using rule 175 (identifier -> ( identifier ) .)
    AO_PLUS         reduce using rule 175 (identifier -> ( identifier ) .)
    AO_SUB          reduce using rule 175 (identifier -> ( identifier ) .)
    AO_SL           reduce using rule 175 (identifier -> ( identifier ) .)
    AO_SR           reduce using rule 175 (identifier -> ( identifier ) .)
    AO_AND          reduce using rule 175 (identifier -> ( identifier ) .)
    AO_XOR          reduce using rule 175 (identifier -> ( identifier ) .)
    AO_OR           reduce using rule 175 (identifier -> ( identifier ) .)
    /               reduce using rule 175 (identifier -> ( identifier ) .)
    %               reduce using rule 175 (identifier -> ( identifier ) .)
    +               reduce using rule 175 (identifier -> ( identifier ) .)
    -               reduce using rule 175 (identifier -> ( identifier ) .)
    SHIFT_LEFT      reduce using rule 175 (identifier -> ( identifier ) .)
    SHIFT_RIGHT     reduce using rule 175 (identifier -> ( identifier ) .)
    <               reduce using rule 175 (identifier -> ( identifier ) .)
    >               reduce using rule 175 (identifier -> ( identifier ) .)
    LE              reduce using rule 175 (identifier -> ( identifier ) .)
    GE              reduce using rule 175 (identifier -> ( identifier ) .)
    EQUAL           reduce using rule 175 (identifier -> ( identifier ) .)
    NE              reduce using rule 175 (identifier -> ( identifier ) .)
    &               reduce using rule 175 (identifier -> ( identifier ) .)
    ^               reduce using rule 175 (identifier -> ( identifier ) .)
    |               reduce using rule 175 (identifier -> ( identifier ) .)
    AND             reduce using rule 175 (identifier -> ( identifier ) .)
    ?               reduce using rule 175 (identifier -> ( identifier ) .)
    OR              reduce using rule 175 (identifier -> ( identifier ) .)


state 182

    (103) direct_declarator -> ( declarator ) .

    =               reduce using rule 103 (direct_declarator -> ( declarator ) .)
    ;               reduce using rule 103 (direct_declarator -> ( declarator ) .)
    ,               reduce using rule 103 (direct_declarator -> ( declarator ) .)
    )               reduce using rule 103 (direct_declarator -> ( declarator ) .)
    :               reduce using rule 103 (direct_declarator -> ( declarator ) .)


state 183

    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (103) direct_declarator -> ( . declarator )
    (175) identifier -> ( . identifier )
    (173) direct_function_declarator -> ( . direct_function_declarator )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    *               shift and go to state 38
    (               shift and go to state 310
    ID              shift and go to state 42

    pointer                        shift and go to state 86
    direct_declarator_forlist      shift and go to state 87
    declarator                     shift and go to state 85
    identifier                     shift and go to state 309
    direct_function_declarator     shift and go to state 83
    direct_declarator              shift and go to state 44

state 184

    (106) direct_declarator_forlist -> ( pointer direct_declarator_forlist . )
    (108) direct_declarator_forlist -> direct_declarator_forlist . [ constant_expression ]
    (102) direct_declarator -> direct_declarator_forlist .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 311
    [               shift and go to state 92

  ! )               [ reduce using rule 102 (direct_declarator -> direct_declarator_forlist .) ]


state 185

    (107) direct_declarator_forlist -> ( direct_declarator_forlist ) .

    [               reduce using rule 107 (direct_declarator_forlist -> ( direct_declarator_forlist ) .)
    =               reduce using rule 107 (direct_declarator_forlist -> ( direct_declarator_forlist ) .)
    ;               reduce using rule 107 (direct_declarator_forlist -> ( direct_declarator_forlist ) .)
    ,               reduce using rule 107 (direct_declarator_forlist -> ( direct_declarator_forlist ) .)
    )               reduce using rule 107 (direct_declarator_forlist -> ( direct_declarator_forlist ) .)
    :               reduce using rule 107 (direct_declarator_forlist -> ( direct_declarator_forlist ) .)


state 186

    (109) direct_declarator_forlist -> identifier [ constant_expression . ]

    ]               shift and go to state 312


state 187

    (110) direct_declarator_forlist -> identifier [ ] .

    [               reduce using rule 110 (direct_declarator_forlist -> identifier [ ] .)
    =               reduce using rule 110 (direct_declarator_forlist -> identifier [ ] .)
    ;               reduce using rule 110 (direct_declarator_forlist -> identifier [ ] .)
    ,               reduce using rule 110 (direct_declarator_forlist -> identifier [ ] .)
    )               reduce using rule 110 (direct_declarator_forlist -> identifier [ ] .)
    :               reduce using rule 110 (direct_declarator_forlist -> identifier [ ] .)


state 188

    (117) constant_expression -> conditional_expression .

    ]               reduce using rule 117 (constant_expression -> conditional_expression .)
    )               reduce using rule 117 (constant_expression -> conditional_expression .)
    ,               reduce using rule 117 (constant_expression -> conditional_expression .)
    ;               reduce using rule 117 (constant_expression -> conditional_expression .)
    }               reduce using rule 117 (constant_expression -> conditional_expression .)
    :               reduce using rule 117 (constant_expression -> conditional_expression .)


state 189

    (118) conditional_expression -> logical_or_expression .
    (119) conditional_expression -> logical_or_expression . ? expression : conditional_expression
    (121) logical_or_expression -> logical_or_expression . OR logical_and_expression

    ]               reduce using rule 118 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 118 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 118 (conditional_expression -> logical_or_expression .)
    ;               reduce using rule 118 (conditional_expression -> logical_or_expression .)
    }               reduce using rule 118 (conditional_expression -> logical_or_expression .)
    :               reduce using rule 118 (conditional_expression -> logical_or_expression .)
    ?               shift and go to state 313
    OR              shift and go to state 314


state 190

    (120) logical_or_expression -> logical_and_expression .
    (123) logical_and_expression -> logical_and_expression . AND inclusive_or_expression

    ?               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    ]               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    }               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    :               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 315


state 191

    (122) logical_and_expression -> inclusive_or_expression .
    (125) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND             reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    ?               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    OR              reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    )               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    }               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    :               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    |               shift and go to state 316


state 192

    (124) inclusive_or_expression -> exclusive_or_expression .
    (127) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    AND             reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    ?               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    OR              reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    ]               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    ;               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    }               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 317


state 193

    (126) exclusive_or_expression -> and_expression .
    (129) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    AND             reduce using rule 126 (exclusive_or_expression -> and_expression .)
    ?               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 126 (exclusive_or_expression -> and_expression .)
    ]               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    ;               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    }               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 318


state 194

    (128) and_expression -> equality_expression .
    (131) equality_expression -> equality_expression . EQUAL relational_expression
    (132) equality_expression -> equality_expression . NE relational_expression

    &               reduce using rule 128 (and_expression -> equality_expression .)
    ^               reduce using rule 128 (and_expression -> equality_expression .)
    |               reduce using rule 128 (and_expression -> equality_expression .)
    AND             reduce using rule 128 (and_expression -> equality_expression .)
    ?               reduce using rule 128 (and_expression -> equality_expression .)
    OR              reduce using rule 128 (and_expression -> equality_expression .)
    ]               reduce using rule 128 (and_expression -> equality_expression .)
    )               reduce using rule 128 (and_expression -> equality_expression .)
    ,               reduce using rule 128 (and_expression -> equality_expression .)
    ;               reduce using rule 128 (and_expression -> equality_expression .)
    }               reduce using rule 128 (and_expression -> equality_expression .)
    :               reduce using rule 128 (and_expression -> equality_expression .)
    EQUAL           shift and go to state 319
    NE              shift and go to state 320


state 195

    (130) equality_expression -> relational_expression .
    (134) relational_expression -> relational_expression . < shift_expression
    (135) relational_expression -> relational_expression . > shift_expression
    (136) relational_expression -> relational_expression . LE shift_expression
    (137) relational_expression -> relational_expression . GE shift_expression

    EQUAL           reduce using rule 130 (equality_expression -> relational_expression .)
    NE              reduce using rule 130 (equality_expression -> relational_expression .)
    &               reduce using rule 130 (equality_expression -> relational_expression .)
    ^               reduce using rule 130 (equality_expression -> relational_expression .)
    |               reduce using rule 130 (equality_expression -> relational_expression .)
    AND             reduce using rule 130 (equality_expression -> relational_expression .)
    ?               reduce using rule 130 (equality_expression -> relational_expression .)
    OR              reduce using rule 130 (equality_expression -> relational_expression .)
    ]               reduce using rule 130 (equality_expression -> relational_expression .)
    )               reduce using rule 130 (equality_expression -> relational_expression .)
    ,               reduce using rule 130 (equality_expression -> relational_expression .)
    ;               reduce using rule 130 (equality_expression -> relational_expression .)
    }               reduce using rule 130 (equality_expression -> relational_expression .)
    :               reduce using rule 130 (equality_expression -> relational_expression .)
    <               shift and go to state 321
    >               shift and go to state 322
    LE              shift and go to state 323
    GE              shift and go to state 324


state 196

    (133) relational_expression -> shift_expression .
    (139) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (140) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    <               reduce using rule 133 (relational_expression -> shift_expression .)
    >               reduce using rule 133 (relational_expression -> shift_expression .)
    LE              reduce using rule 133 (relational_expression -> shift_expression .)
    GE              reduce using rule 133 (relational_expression -> shift_expression .)
    EQUAL           reduce using rule 133 (relational_expression -> shift_expression .)
    NE              reduce using rule 133 (relational_expression -> shift_expression .)
    &               reduce using rule 133 (relational_expression -> shift_expression .)
    ^               reduce using rule 133 (relational_expression -> shift_expression .)
    |               reduce using rule 133 (relational_expression -> shift_expression .)
    AND             reduce using rule 133 (relational_expression -> shift_expression .)
    ?               reduce using rule 133 (relational_expression -> shift_expression .)
    OR              reduce using rule 133 (relational_expression -> shift_expression .)
    ]               reduce using rule 133 (relational_expression -> shift_expression .)
    )               reduce using rule 133 (relational_expression -> shift_expression .)
    ,               reduce using rule 133 (relational_expression -> shift_expression .)
    ;               reduce using rule 133 (relational_expression -> shift_expression .)
    }               reduce using rule 133 (relational_expression -> shift_expression .)
    :               reduce using rule 133 (relational_expression -> shift_expression .)
    SHIFT_LEFT      shift and go to state 325
    SHIFT_RIGHT     shift and go to state 326


state 197

    (138) shift_expression -> additive_expression .
    (142) additive_expression -> additive_expression . + multiplicative_expression
    (143) additive_expression -> additive_expression . - multiplicative_expression

    SHIFT_LEFT      reduce using rule 138 (shift_expression -> additive_expression .)
    SHIFT_RIGHT     reduce using rule 138 (shift_expression -> additive_expression .)
    <               reduce using rule 138 (shift_expression -> additive_expression .)
    >               reduce using rule 138 (shift_expression -> additive_expression .)
    LE              reduce using rule 138 (shift_expression -> additive_expression .)
    GE              reduce using rule 138 (shift_expression -> additive_expression .)
    EQUAL           reduce using rule 138 (shift_expression -> additive_expression .)
    NE              reduce using rule 138 (shift_expression -> additive_expression .)
    &               reduce using rule 138 (shift_expression -> additive_expression .)
    ^               reduce using rule 138 (shift_expression -> additive_expression .)
    |               reduce using rule 138 (shift_expression -> additive_expression .)
    AND             reduce using rule 138 (shift_expression -> additive_expression .)
    ?               reduce using rule 138 (shift_expression -> additive_expression .)
    OR              reduce using rule 138 (shift_expression -> additive_expression .)
    ]               reduce using rule 138 (shift_expression -> additive_expression .)
    )               reduce using rule 138 (shift_expression -> additive_expression .)
    ,               reduce using rule 138 (shift_expression -> additive_expression .)
    ;               reduce using rule 138 (shift_expression -> additive_expression .)
    }               reduce using rule 138 (shift_expression -> additive_expression .)
    :               reduce using rule 138 (shift_expression -> additive_expression .)
    +               shift and go to state 327
    -               shift and go to state 328


state 198

    (141) additive_expression -> multiplicative_expression .
    (145) multiplicative_expression -> multiplicative_expression . * cast_expression
    (146) multiplicative_expression -> multiplicative_expression . / cast_expression
    (147) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    SHIFT_LEFT      reduce using rule 141 (additive_expression -> multiplicative_expression .)
    SHIFT_RIGHT     reduce using rule 141 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 141 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 141 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 141 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 141 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 141 (additive_expression -> multiplicative_expression .)
    ?               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 141 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    }               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 329
    /               shift and go to state 330
    %               shift and go to state 331


state 199

    (154) unary_operator -> + .

    (               reduce using rule 154 (unary_operator -> + .)
    SIZEOF          reduce using rule 154 (unary_operator -> + .)
    CONSTANCE       reduce using rule 154 (unary_operator -> + .)
    STRING_LITERAL  reduce using rule 154 (unary_operator -> + .)
    +               reduce using rule 154 (unary_operator -> + .)
    -               reduce using rule 154 (unary_operator -> + .)
    ~               reduce using rule 154 (unary_operator -> + .)
    !               reduce using rule 154 (unary_operator -> + .)


state 200

    (155) unary_operator -> - .

    (               reduce using rule 155 (unary_operator -> - .)
    SIZEOF          reduce using rule 155 (unary_operator -> - .)
    CONSTANCE       reduce using rule 155 (unary_operator -> - .)
    STRING_LITERAL  reduce using rule 155 (unary_operator -> - .)
    +               reduce using rule 155 (unary_operator -> - .)
    -               reduce using rule 155 (unary_operator -> - .)
    ~               reduce using rule 155 (unary_operator -> - .)
    !               reduce using rule 155 (unary_operator -> - .)


state 201

    (144) multiplicative_expression -> cast_expression .

    *               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    %               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    SHIFT_LEFT      reduce using rule 144 (multiplicative_expression -> cast_expression .)
    SHIFT_RIGHT     reduce using rule 144 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 144 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 144 (multiplicative_expression -> cast_expression .)
    EQUAL           reduce using rule 144 (multiplicative_expression -> cast_expression .)
    NE              reduce using rule 144 (multiplicative_expression -> cast_expression .)
    &               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    ^               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    |               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 144 (multiplicative_expression -> cast_expression .)
    ?               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 144 (multiplicative_expression -> cast_expression .)
    ]               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    }               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    :               reduce using rule 144 (multiplicative_expression -> cast_expression .)


state 202

    (148) cast_expression -> unary_expression .

    *               reduce using rule 148 (cast_expression -> unary_expression .)
    /               reduce using rule 148 (cast_expression -> unary_expression .)
    %               reduce using rule 148 (cast_expression -> unary_expression .)
    +               reduce using rule 148 (cast_expression -> unary_expression .)
    -               reduce using rule 148 (cast_expression -> unary_expression .)
    SHIFT_LEFT      reduce using rule 148 (cast_expression -> unary_expression .)
    SHIFT_RIGHT     reduce using rule 148 (cast_expression -> unary_expression .)
    <               reduce using rule 148 (cast_expression -> unary_expression .)
    >               reduce using rule 148 (cast_expression -> unary_expression .)
    LE              reduce using rule 148 (cast_expression -> unary_expression .)
    GE              reduce using rule 148 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 148 (cast_expression -> unary_expression .)
    NE              reduce using rule 148 (cast_expression -> unary_expression .)
    &               reduce using rule 148 (cast_expression -> unary_expression .)
    ^               reduce using rule 148 (cast_expression -> unary_expression .)
    |               reduce using rule 148 (cast_expression -> unary_expression .)
    AND             reduce using rule 148 (cast_expression -> unary_expression .)
    ?               reduce using rule 148 (cast_expression -> unary_expression .)
    OR              reduce using rule 148 (cast_expression -> unary_expression .)
    ]               reduce using rule 148 (cast_expression -> unary_expression .)
    )               reduce using rule 148 (cast_expression -> unary_expression .)
    ,               reduce using rule 148 (cast_expression -> unary_expression .)
    ;               reduce using rule 148 (cast_expression -> unary_expression .)
    }               reduce using rule 148 (cast_expression -> unary_expression .)
    :               reduce using rule 148 (cast_expression -> unary_expression .)


state 203

    (149) cast_expression -> ( . specifier_qualifier_list ) cast_expression
    (160) primary_expression -> ( . expression )
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (161) expression -> . constant_expression
    (162) expression -> . expression , constant_expression
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (117) constant_expression -> . conditional_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    specifier_qualifier_list       shift and go to state 332
    cast_expression                shift and go to state 201
    expression                     shift and go to state 333
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    constant_expression            shift and go to state 334
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    conditional_expression         shift and go to state 188
    struct_or_union                shift and go to state 29
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 204

    (150) unary_expression -> primary_expression .

    *               reduce using rule 150 (unary_expression -> primary_expression .)
    /               reduce using rule 150 (unary_expression -> primary_expression .)
    %               reduce using rule 150 (unary_expression -> primary_expression .)
    +               reduce using rule 150 (unary_expression -> primary_expression .)
    -               reduce using rule 150 (unary_expression -> primary_expression .)
    SHIFT_LEFT      reduce using rule 150 (unary_expression -> primary_expression .)
    SHIFT_RIGHT     reduce using rule 150 (unary_expression -> primary_expression .)
    <               reduce using rule 150 (unary_expression -> primary_expression .)
    >               reduce using rule 150 (unary_expression -> primary_expression .)
    LE              reduce using rule 150 (unary_expression -> primary_expression .)
    GE              reduce using rule 150 (unary_expression -> primary_expression .)
    EQUAL           reduce using rule 150 (unary_expression -> primary_expression .)
    NE              reduce using rule 150 (unary_expression -> primary_expression .)
    &               reduce using rule 150 (unary_expression -> primary_expression .)
    ^               reduce using rule 150 (unary_expression -> primary_expression .)
    |               reduce using rule 150 (unary_expression -> primary_expression .)
    AND             reduce using rule 150 (unary_expression -> primary_expression .)
    ?               reduce using rule 150 (unary_expression -> primary_expression .)
    OR              reduce using rule 150 (unary_expression -> primary_expression .)
    ]               reduce using rule 150 (unary_expression -> primary_expression .)
    )               reduce using rule 150 (unary_expression -> primary_expression .)
    ,               reduce using rule 150 (unary_expression -> primary_expression .)
    ;               reduce using rule 150 (unary_expression -> primary_expression .)
    }               reduce using rule 150 (unary_expression -> primary_expression .)
    :               reduce using rule 150 (unary_expression -> primary_expression .)


state 205

    (151) unary_expression -> unary_operator . cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    unary_operator                 shift and go to state 205
    cast_expression                shift and go to state 335
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204

state 206

    (152) unary_expression -> SIZEOF . unary_expression
    (153) unary_expression -> SIZEOF . ( specifier_qualifier_list )
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 337
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    unary_expression               shift and go to state 336
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 207

    (158) primary_expression -> CONSTANCE .

    *               reduce using rule 158 (primary_expression -> CONSTANCE .)
    /               reduce using rule 158 (primary_expression -> CONSTANCE .)
    %               reduce using rule 158 (primary_expression -> CONSTANCE .)
    +               reduce using rule 158 (primary_expression -> CONSTANCE .)
    -               reduce using rule 158 (primary_expression -> CONSTANCE .)
    SHIFT_LEFT      reduce using rule 158 (primary_expression -> CONSTANCE .)
    SHIFT_RIGHT     reduce using rule 158 (primary_expression -> CONSTANCE .)
    <               reduce using rule 158 (primary_expression -> CONSTANCE .)
    >               reduce using rule 158 (primary_expression -> CONSTANCE .)
    LE              reduce using rule 158 (primary_expression -> CONSTANCE .)
    GE              reduce using rule 158 (primary_expression -> CONSTANCE .)
    EQUAL           reduce using rule 158 (primary_expression -> CONSTANCE .)
    NE              reduce using rule 158 (primary_expression -> CONSTANCE .)
    &               reduce using rule 158 (primary_expression -> CONSTANCE .)
    ^               reduce using rule 158 (primary_expression -> CONSTANCE .)
    |               reduce using rule 158 (primary_expression -> CONSTANCE .)
    AND             reduce using rule 158 (primary_expression -> CONSTANCE .)
    ?               reduce using rule 158 (primary_expression -> CONSTANCE .)
    OR              reduce using rule 158 (primary_expression -> CONSTANCE .)
    ]               reduce using rule 158 (primary_expression -> CONSTANCE .)
    )               reduce using rule 158 (primary_expression -> CONSTANCE .)
    ,               reduce using rule 158 (primary_expression -> CONSTANCE .)
    ;               reduce using rule 158 (primary_expression -> CONSTANCE .)
    }               reduce using rule 158 (primary_expression -> CONSTANCE .)
    :               reduce using rule 158 (primary_expression -> CONSTANCE .)


state 208

    (159) primary_expression -> STRING_LITERAL .

    *               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    /               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    %               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    +               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    -               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    SHIFT_LEFT      reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    SHIFT_RIGHT     reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    <               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    >               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    LE              reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    GE              reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    EQUAL           reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    NE              reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    &               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    ^               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    |               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    AND             reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    ?               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    OR              reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    ]               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    )               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    ,               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    ;               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    }               reduce using rule 159 (primary_expression -> STRING_LITERAL .)
    :               reduce using rule 159 (primary_expression -> STRING_LITERAL .)


state 209

    (156) unary_operator -> ~ .

    (               reduce using rule 156 (unary_operator -> ~ .)
    SIZEOF          reduce using rule 156 (unary_operator -> ~ .)
    CONSTANCE       reduce using rule 156 (unary_operator -> ~ .)
    STRING_LITERAL  reduce using rule 156 (unary_operator -> ~ .)
    +               reduce using rule 156 (unary_operator -> ~ .)
    -               reduce using rule 156 (unary_operator -> ~ .)
    ~               reduce using rule 156 (unary_operator -> ~ .)
    !               reduce using rule 156 (unary_operator -> ~ .)


state 210

    (157) unary_operator -> ! .

    (               reduce using rule 157 (unary_operator -> ! .)
    SIZEOF          reduce using rule 157 (unary_operator -> ! .)
    CONSTANCE       reduce using rule 157 (unary_operator -> ! .)
    STRING_LITERAL  reduce using rule 157 (unary_operator -> ! .)
    +               reduce using rule 157 (unary_operator -> ! .)
    -               reduce using rule 157 (unary_operator -> ! .)
    ~               reduce using rule 157 (unary_operator -> ! .)
    !               reduce using rule 157 (unary_operator -> ! .)


state 211

    (177) parameter_type_list_definition -> ( ) .

    {               reduce using rule 177 (parameter_type_list_definition -> ( ) .)
    =               reduce using rule 177 (parameter_type_list_definition -> ( ) .)
    ;               reduce using rule 177 (parameter_type_list_definition -> ( ) .)
    ,               reduce using rule 177 (parameter_type_list_definition -> ( ) .)
    )               reduce using rule 177 (parameter_type_list_definition -> ( ) .)
    :               reduce using rule 177 (parameter_type_list_definition -> ( ) .)
    [               reduce using rule 177 (parameter_type_list_definition -> ( ) .)


state 212

    (178) parameter_type_list_definition -> ( parameter_type_list_definition . )

    )               shift and go to state 338


state 213

    (179) parameter_type_list_definition -> ( parameter_list . )

    )               shift and go to state 339


state 214

    (111) parameter_list -> parameter_list_definition .

    )               reduce using rule 111 (parameter_list -> parameter_list_definition .)


state 215

    (112) parameter_list -> parameter_declaration .
    (113) parameter_list -> parameter_declaration . , parameter_list
    (180) parameter_list_definition -> parameter_declaration . = constant_expression , parameter_list_definition
    (181) parameter_list_definition -> parameter_declaration . = constant_expression

    )               reduce using rule 112 (parameter_list -> parameter_declaration .)
    ,               shift and go to state 340
    =               shift and go to state 341


state 216

    (182) parameter_list_definition -> ELLIPSIS .

    )               reduce using rule 182 (parameter_list_definition -> ELLIPSIS .)


state 217

    (114) parameter_declaration -> declaration_specifiers . declarator
    (115) parameter_declaration -> declaration_specifiers . abstract_declarator
    (116) parameter_declaration -> declaration_specifiers .
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (163) abstract_declarator -> . pointer
    (164) abstract_declarator -> . direct_abstract_declarator
    (165) abstract_declarator -> . pointer direct_abstract_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (166) direct_abstract_declarator -> . ( abstract_declarator )
    (167) direct_abstract_declarator -> . [ ]
    (168) direct_abstract_declarator -> . [ constant_expression ]
    (169) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (170) direct_abstract_declarator -> . parameter_type_list_definition
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (177) parameter_type_list_definition -> . ( )
    (178) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (179) parameter_type_list_definition -> . ( parameter_list )
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    ,               reduce using rule 116 (parameter_declaration -> declaration_specifiers .)
    =               reduce using rule 116 (parameter_declaration -> declaration_specifiers .)
    )               reduce using rule 116 (parameter_declaration -> declaration_specifiers .)
    *               shift and go to state 38
    (               shift and go to state 346
    [               shift and go to state 347
    ID              shift and go to state 42

    declarator                     shift and go to state 342
    abstract_declarator            shift and go to state 343
    pointer                        shift and go to state 344
    direct_declarator              shift and go to state 44
    direct_abstract_declarator     shift and go to state 345
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 176
    parameter_type_list_definition shift and go to state 348
    identifier                     shift and go to state 177

state 218

    (10) init_declarator -> declarator = initializer .

    ;               reduce using rule 10 (init_declarator -> declarator = initializer .)
    ,               reduce using rule 10 (init_declarator -> declarator = initializer .)


state 219

    (311) initializer -> assignment_expression .

    ;               reduce using rule 311 (initializer -> assignment_expression .)
    ,               reduce using rule 311 (initializer -> assignment_expression .)
    }               reduce using rule 311 (initializer -> assignment_expression .)


state 220

    (312) initializer -> { . initializer_list }
    (313) initializer -> { . initializer_list , }
    (307) initializer_list -> . initializer
    (308) initializer_list -> . designation initializer
    (309) initializer_list -> . initializer_list , initializer
    (310) initializer_list -> . initializer_list , designation initializer
    (311) initializer -> . assignment_expression
    (312) initializer -> . { initializer_list }
    (313) initializer -> . { initializer_list , }
    (314) designation -> . designator_list =
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (315) designator_list -> . designator
    (316) designator_list -> . designator_list designator
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (317) designator -> . [ constant_expression ]
    (318) designator -> . . ID
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 220
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    [               shift and go to state 354
    .               shift and go to state 355
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    initializer_list               shift and go to state 349
    initializer                    shift and go to state 350
    designation                    shift and go to state 351
    assignment_expression          shift and go to state 219
    designator_list                shift and go to state 352
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    designator                     shift and go to state 353
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 221

    (262) postfix_expression_v -> identifier . ( )
    (263) postfix_expression_v -> identifier . ( argument_expression_list )
    (268) postfix_expression_v_no_func -> identifier .

    (               shift and go to state 242
    INC             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    DEC             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    [               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    .               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    PTR             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    =               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_MUL          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_DIV          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_MOD          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_PLUS         reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_SUB          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_SL           reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_SR           reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_AND          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_XOR          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_OR           reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    *               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    /               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    %               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    +               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    -               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    SHIFT_LEFT      reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    SHIFT_RIGHT     reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    <               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    >               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    LE              reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    GE              reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    EQUAL           reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    NE              reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    &               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    ^               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    |               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AND             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    ?               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    OR              reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    ;               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    ,               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    )               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    }               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    :               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)


state 222

    (269) postfix_expression_v_no_func -> ( . postfix_expression_v_no_func )
    (175) identifier -> ( . identifier )
    (245) cast_expression_v -> ( . specifier_qualifier_list ) cast_expression_v
    (275) primary_expression_v -> ( . expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    (               shift and go to state 222
    ID              shift and go to state 42
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    postfix_expression_v_no_func   shift and go to state 247
    identifier                     shift and go to state 246
    specifier_qualifier_list       shift and go to state 248
    cast_expression_v              shift and go to state 151
    expression_variable            shift and go to state 249
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    assignment_expression          shift and go to state 143
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    struct_or_union                shift and go to state 29
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    logical_and_expression_v       shift and go to state 153
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 223

    (108) direct_declarator_forlist -> direct_declarator_forlist [ constant_expression . ]

    ]               shift and go to state 356


state 224

    (23) declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .

    ;               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    *               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    (               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    ID              reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    [               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    ,               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    =               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    )               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)


state 225

    (75) struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list . }
    (81) struct_declaration_list -> struct_declaration_list . struct_declaration
    (82) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    }               shift and go to state 357
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    struct_or_union                shift and go to state 29
    struct_declaration             shift and go to state 227
    specifier_qualifier_list       shift and go to state 109
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24

state 226

    (76) struct_or_union_specifier -> struct_or_union { struct_declaration_list } .

    TYPEDEF         reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    EXTERN          reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    STATIC          reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    AUTO            reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    REGISTER        reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    CONST           reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    VOLATILE        reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    RESTRICT        reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ;               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    *               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    (               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ID              reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    [               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ,               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    =               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    )               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    :               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)


state 227

    (81) struct_declaration_list -> struct_declaration_list struct_declaration .

    }               reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 228

    (82) struct_declaration -> specifier_qualifier_list struct_declarator_list . ;
    (90) struct_declarator_list -> struct_declarator_list . , struct_declarator

    ;               shift and go to state 358
    ,               shift and go to state 359


state 229

    (89) struct_declarator_list -> struct_declarator .

    ;               reduce using rule 89 (struct_declarator_list -> struct_declarator .)
    ,               reduce using rule 89 (struct_declarator_list -> struct_declarator .)


state 230

    (91) struct_declarator -> declarator .
    (93) struct_declarator -> declarator . : constant_expression

    ;               reduce using rule 91 (struct_declarator -> declarator .)
    ,               reduce using rule 91 (struct_declarator -> declarator .)
    :               shift and go to state 360


state 231

    (92) struct_declarator -> : . constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    constant_expression            shift and go to state 361
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 232

    (83) specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts .

    :               reduce using rule 83 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts .)
    *               reduce using rule 83 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts .)
    (               reduce using rule 83 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts .)
    ID              reduce using rule 83 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts .)
    )               reduce using rule 83 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts .)


state 233

    (87) specifier_qualifier_list_no_ts -> type_qualifier . specifier_qualifier_list_no_ts
    (88) specifier_qualifier_list_no_ts -> type_qualifier .
    (87) specifier_qualifier_list_no_ts -> . type_qualifier specifier_qualifier_list_no_ts
    (88) specifier_qualifier_list_no_ts -> . type_qualifier
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    :               reduce using rule 88 (specifier_qualifier_list_no_ts -> type_qualifier .)
    *               reduce using rule 88 (specifier_qualifier_list_no_ts -> type_qualifier .)
    (               reduce using rule 88 (specifier_qualifier_list_no_ts -> type_qualifier .)
    ID              reduce using rule 88 (specifier_qualifier_list_no_ts -> type_qualifier .)
    )               reduce using rule 88 (specifier_qualifier_list_no_ts -> type_qualifier .)
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    type_qualifier                 shift and go to state 233
    specifier_qualifier_list_no_ts shift and go to state 362

state 234

    (85) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    :               reduce using rule 85 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    *               reduce using rule 85 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    (               reduce using rule 85 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    ID              reduce using rule 85 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    )               reduce using rule 85 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 235

    (66) enum_specifier -> ENUM { enumerator_list } .

    TYPEDEF         reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    EXTERN          reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    STATIC          reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    AUTO            reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    REGISTER        reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    CONST           reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    VOLATILE        reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    RESTRICT        reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    ;               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    *               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    (               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    ID              reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    [               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    ,               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    =               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    )               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    :               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)


state 236

    (68) enum_specifier -> ENUM { enumerator_list , . }
    (72) enumerator_list -> enumerator_list , . enumerator
    (73) enumerator -> . identifier
    (74) enumerator -> . identifier = constant_expression
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    }               shift and go to state 363
    (               shift and go to state 69
    ID              shift and go to state 42

    enumerator                     shift and go to state 364
    identifier                     shift and go to state 115

state 237

    (74) enumerator -> identifier = . constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    constant_expression            shift and go to state 365
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 238

    (67) enum_specifier -> ENUM identifier { enumerator_list . }
    (69) enum_specifier -> ENUM identifier { enumerator_list . , }
    (72) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 366
    ,               shift and go to state 367


state 239

    (184) compound_statement -> { block_item_list } .

    TYPEDEF         reduce using rule 184 (compound_statement -> { block_item_list } .)
    EXTERN          reduce using rule 184 (compound_statement -> { block_item_list } .)
    STATIC          reduce using rule 184 (compound_statement -> { block_item_list } .)
    AUTO            reduce using rule 184 (compound_statement -> { block_item_list } .)
    REGISTER        reduce using rule 184 (compound_statement -> { block_item_list } .)
    VOID            reduce using rule 184 (compound_statement -> { block_item_list } .)
    CHAR            reduce using rule 184 (compound_statement -> { block_item_list } .)
    SHORT           reduce using rule 184 (compound_statement -> { block_item_list } .)
    INT             reduce using rule 184 (compound_statement -> { block_item_list } .)
    LONG            reduce using rule 184 (compound_statement -> { block_item_list } .)
    FLOAT           reduce using rule 184 (compound_statement -> { block_item_list } .)
    DOUBLE          reduce using rule 184 (compound_statement -> { block_item_list } .)
    SIGNED          reduce using rule 184 (compound_statement -> { block_item_list } .)
    UNSIGNED        reduce using rule 184 (compound_statement -> { block_item_list } .)
    BOOL            reduce using rule 184 (compound_statement -> { block_item_list } .)
    CONST           reduce using rule 184 (compound_statement -> { block_item_list } .)
    VOLATILE        reduce using rule 184 (compound_statement -> { block_item_list } .)
    RESTRICT        reduce using rule 184 (compound_statement -> { block_item_list } .)
    ENUM            reduce using rule 184 (compound_statement -> { block_item_list } .)
    STRUCT          reduce using rule 184 (compound_statement -> { block_item_list } .)
    UNION           reduce using rule 184 (compound_statement -> { block_item_list } .)
    $end            reduce using rule 184 (compound_statement -> { block_item_list } .)
    }               reduce using rule 184 (compound_statement -> { block_item_list } .)
    {               reduce using rule 184 (compound_statement -> { block_item_list } .)
    ;               reduce using rule 184 (compound_statement -> { block_item_list } .)
    IF              reduce using rule 184 (compound_statement -> { block_item_list } .)
    SWITCH          reduce using rule 184 (compound_statement -> { block_item_list } .)
    WHILE           reduce using rule 184 (compound_statement -> { block_item_list } .)
    DO              reduce using rule 184 (compound_statement -> { block_item_list } .)
    FOR             reduce using rule 184 (compound_statement -> { block_item_list } .)
    GOTO            reduce using rule 184 (compound_statement -> { block_item_list } .)
    CONTINUE        reduce using rule 184 (compound_statement -> { block_item_list } .)
    BREAK           reduce using rule 184 (compound_statement -> { block_item_list } .)
    RETURN          reduce using rule 184 (compound_statement -> { block_item_list } .)
    (               reduce using rule 184 (compound_statement -> { block_item_list } .)
    ID              reduce using rule 184 (compound_statement -> { block_item_list } .)
    INC             reduce using rule 184 (compound_statement -> { block_item_list } .)
    DEC             reduce using rule 184 (compound_statement -> { block_item_list } .)
    SIZEOF          reduce using rule 184 (compound_statement -> { block_item_list } .)
    &               reduce using rule 184 (compound_statement -> { block_item_list } .)
    *               reduce using rule 184 (compound_statement -> { block_item_list } .)
    +               reduce using rule 184 (compound_statement -> { block_item_list } .)
    -               reduce using rule 184 (compound_statement -> { block_item_list } .)
    ~               reduce using rule 184 (compound_statement -> { block_item_list } .)
    !               reduce using rule 184 (compound_statement -> { block_item_list } .)
    CONSTANCE       reduce using rule 184 (compound_statement -> { block_item_list } .)
    STRING_LITERAL  reduce using rule 184 (compound_statement -> { block_item_list } .)
    ELSE            reduce using rule 184 (compound_statement -> { block_item_list } .)
    CASE            reduce using rule 184 (compound_statement -> { block_item_list } .)
    DEFAULT         reduce using rule 184 (compound_statement -> { block_item_list } .)


state 240

    (186) block_item_list -> block_item_list block_item .

    }               reduce using rule 186 (block_item_list -> block_item_list block_item .)
    {               reduce using rule 186 (block_item_list -> block_item_list block_item .)
    ;               reduce using rule 186 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 186 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 186 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 186 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 186 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 186 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 186 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 186 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 186 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 186 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 186 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 186 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 186 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 186 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 186 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 186 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 186 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 186 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 186 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 186 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 186 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 186 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 186 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 186 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 186 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 186 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 186 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 186 (block_item_list -> block_item_list block_item .)
    (               reduce using rule 186 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 186 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 186 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 186 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 186 (block_item_list -> block_item_list block_item .)
    INC             reduce using rule 186 (block_item_list -> block_item_list block_item .)
    DEC             reduce using rule 186 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 186 (block_item_list -> block_item_list block_item .)
    &               reduce using rule 186 (block_item_list -> block_item_list block_item .)
    *               reduce using rule 186 (block_item_list -> block_item_list block_item .)
    +               reduce using rule 186 (block_item_list -> block_item_list block_item .)
    -               reduce using rule 186 (block_item_list -> block_item_list block_item .)
    ~               reduce using rule 186 (block_item_list -> block_item_list block_item .)
    !               reduce using rule 186 (block_item_list -> block_item_list block_item .)
    CONSTANCE       reduce using rule 186 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 186 (block_item_list -> block_item_list block_item .)


state 241

    (195) labeled_statement -> identifier : .

    }               reduce using rule 195 (labeled_statement -> identifier : .)
    {               reduce using rule 195 (labeled_statement -> identifier : .)
    ;               reduce using rule 195 (labeled_statement -> identifier : .)
    IF              reduce using rule 195 (labeled_statement -> identifier : .)
    SWITCH          reduce using rule 195 (labeled_statement -> identifier : .)
    WHILE           reduce using rule 195 (labeled_statement -> identifier : .)
    DO              reduce using rule 195 (labeled_statement -> identifier : .)
    FOR             reduce using rule 195 (labeled_statement -> identifier : .)
    GOTO            reduce using rule 195 (labeled_statement -> identifier : .)
    CONTINUE        reduce using rule 195 (labeled_statement -> identifier : .)
    BREAK           reduce using rule 195 (labeled_statement -> identifier : .)
    RETURN          reduce using rule 195 (labeled_statement -> identifier : .)
    TYPEDEF         reduce using rule 195 (labeled_statement -> identifier : .)
    EXTERN          reduce using rule 195 (labeled_statement -> identifier : .)
    STATIC          reduce using rule 195 (labeled_statement -> identifier : .)
    AUTO            reduce using rule 195 (labeled_statement -> identifier : .)
    REGISTER        reduce using rule 195 (labeled_statement -> identifier : .)
    VOID            reduce using rule 195 (labeled_statement -> identifier : .)
    CHAR            reduce using rule 195 (labeled_statement -> identifier : .)
    SHORT           reduce using rule 195 (labeled_statement -> identifier : .)
    INT             reduce using rule 195 (labeled_statement -> identifier : .)
    LONG            reduce using rule 195 (labeled_statement -> identifier : .)
    FLOAT           reduce using rule 195 (labeled_statement -> identifier : .)
    DOUBLE          reduce using rule 195 (labeled_statement -> identifier : .)
    SIGNED          reduce using rule 195 (labeled_statement -> identifier : .)
    UNSIGNED        reduce using rule 195 (labeled_statement -> identifier : .)
    BOOL            reduce using rule 195 (labeled_statement -> identifier : .)
    CONST           reduce using rule 195 (labeled_statement -> identifier : .)
    VOLATILE        reduce using rule 195 (labeled_statement -> identifier : .)
    RESTRICT        reduce using rule 195 (labeled_statement -> identifier : .)
    (               reduce using rule 195 (labeled_statement -> identifier : .)
    ID              reduce using rule 195 (labeled_statement -> identifier : .)
    ENUM            reduce using rule 195 (labeled_statement -> identifier : .)
    STRUCT          reduce using rule 195 (labeled_statement -> identifier : .)
    UNION           reduce using rule 195 (labeled_statement -> identifier : .)
    INC             reduce using rule 195 (labeled_statement -> identifier : .)
    DEC             reduce using rule 195 (labeled_statement -> identifier : .)
    SIZEOF          reduce using rule 195 (labeled_statement -> identifier : .)
    &               reduce using rule 195 (labeled_statement -> identifier : .)
    *               reduce using rule 195 (labeled_statement -> identifier : .)
    +               reduce using rule 195 (labeled_statement -> identifier : .)
    -               reduce using rule 195 (labeled_statement -> identifier : .)
    ~               reduce using rule 195 (labeled_statement -> identifier : .)
    !               reduce using rule 195 (labeled_statement -> identifier : .)
    CONSTANCE       reduce using rule 195 (labeled_statement -> identifier : .)
    STRING_LITERAL  reduce using rule 195 (labeled_statement -> identifier : .)
    ELSE            reduce using rule 195 (labeled_statement -> identifier : .)
    CASE            reduce using rule 195 (labeled_statement -> identifier : .)
    DEFAULT         reduce using rule 195 (labeled_statement -> identifier : .)


state 242

    (262) postfix_expression_v -> identifier ( . )
    (263) postfix_expression_v -> identifier ( . argument_expression_list )
    (305) argument_expression_list -> . assignment_expression
    (306) argument_expression_list -> . argument_expression_list , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    )               shift and go to state 368
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    identifier                     shift and go to state 221
    argument_expression_list       shift and go to state 369
    assignment_expression          shift and go to state 370
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 243

    (197) expression_statement -> expression_variable ; .

    }               reduce using rule 197 (expression_statement -> expression_variable ; .)
    {               reduce using rule 197 (expression_statement -> expression_variable ; .)
    ;               reduce using rule 197 (expression_statement -> expression_variable ; .)
    IF              reduce using rule 197 (expression_statement -> expression_variable ; .)
    SWITCH          reduce using rule 197 (expression_statement -> expression_variable ; .)
    WHILE           reduce using rule 197 (expression_statement -> expression_variable ; .)
    DO              reduce using rule 197 (expression_statement -> expression_variable ; .)
    FOR             reduce using rule 197 (expression_statement -> expression_variable ; .)
    GOTO            reduce using rule 197 (expression_statement -> expression_variable ; .)
    CONTINUE        reduce using rule 197 (expression_statement -> expression_variable ; .)
    BREAK           reduce using rule 197 (expression_statement -> expression_variable ; .)
    RETURN          reduce using rule 197 (expression_statement -> expression_variable ; .)
    TYPEDEF         reduce using rule 197 (expression_statement -> expression_variable ; .)
    EXTERN          reduce using rule 197 (expression_statement -> expression_variable ; .)
    STATIC          reduce using rule 197 (expression_statement -> expression_variable ; .)
    AUTO            reduce using rule 197 (expression_statement -> expression_variable ; .)
    REGISTER        reduce using rule 197 (expression_statement -> expression_variable ; .)
    VOID            reduce using rule 197 (expression_statement -> expression_variable ; .)
    CHAR            reduce using rule 197 (expression_statement -> expression_variable ; .)
    SHORT           reduce using rule 197 (expression_statement -> expression_variable ; .)
    INT             reduce using rule 197 (expression_statement -> expression_variable ; .)
    LONG            reduce using rule 197 (expression_statement -> expression_variable ; .)
    FLOAT           reduce using rule 197 (expression_statement -> expression_variable ; .)
    DOUBLE          reduce using rule 197 (expression_statement -> expression_variable ; .)
    SIGNED          reduce using rule 197 (expression_statement -> expression_variable ; .)
    UNSIGNED        reduce using rule 197 (expression_statement -> expression_variable ; .)
    BOOL            reduce using rule 197 (expression_statement -> expression_variable ; .)
    CONST           reduce using rule 197 (expression_statement -> expression_variable ; .)
    VOLATILE        reduce using rule 197 (expression_statement -> expression_variable ; .)
    RESTRICT        reduce using rule 197 (expression_statement -> expression_variable ; .)
    (               reduce using rule 197 (expression_statement -> expression_variable ; .)
    ID              reduce using rule 197 (expression_statement -> expression_variable ; .)
    ENUM            reduce using rule 197 (expression_statement -> expression_variable ; .)
    STRUCT          reduce using rule 197 (expression_statement -> expression_variable ; .)
    UNION           reduce using rule 197 (expression_statement -> expression_variable ; .)
    INC             reduce using rule 197 (expression_statement -> expression_variable ; .)
    DEC             reduce using rule 197 (expression_statement -> expression_variable ; .)
    SIZEOF          reduce using rule 197 (expression_statement -> expression_variable ; .)
    &               reduce using rule 197 (expression_statement -> expression_variable ; .)
    *               reduce using rule 197 (expression_statement -> expression_variable ; .)
    +               reduce using rule 197 (expression_statement -> expression_variable ; .)
    -               reduce using rule 197 (expression_statement -> expression_variable ; .)
    ~               reduce using rule 197 (expression_statement -> expression_variable ; .)
    !               reduce using rule 197 (expression_statement -> expression_variable ; .)
    CONSTANCE       reduce using rule 197 (expression_statement -> expression_variable ; .)
    STRING_LITERAL  reduce using rule 197 (expression_statement -> expression_variable ; .)
    )               reduce using rule 197 (expression_statement -> expression_variable ; .)
    ELSE            reduce using rule 197 (expression_statement -> expression_variable ; .)
    CASE            reduce using rule 197 (expression_statement -> expression_variable ; .)
    DEFAULT         reduce using rule 197 (expression_statement -> expression_variable ; .)


state 244

    (199) expression_variable -> expression_variable , . assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    assignment_expression          shift and go to state 371
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 245

    (276) selection_statement -> IF ( . expression_variable ) statement ELSE statement
    (277) selection_statement -> IF ( . expression_variable ) statement
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_variable            shift and go to state 372
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 246

    (175) identifier -> ( identifier . )
    (268) postfix_expression_v_no_func -> identifier .
    (262) postfix_expression_v -> identifier . ( )
    (263) postfix_expression_v -> identifier . ( argument_expression_list )

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 181
    [               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    .               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    PTR             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    INC             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    DEC             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    =               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_MUL          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_DIV          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_MOD          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_PLUS         reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_SUB          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_SL           reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_SR           reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_AND          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_XOR          reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AO_OR           reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    *               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    /               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    %               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    +               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    -               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    SHIFT_LEFT      reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    SHIFT_RIGHT     reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    <               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    >               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    LE              reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    GE              reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    EQUAL           reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    NE              reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    &               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    ^               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    |               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    AND             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    ?               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    OR              reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    ,               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    (               shift and go to state 242

  ! )               [ reduce using rule 268 (postfix_expression_v_no_func -> identifier .) ]


state 247

    (269) postfix_expression_v_no_func -> ( postfix_expression_v_no_func . )
    (270) postfix_expression_v_no_func -> postfix_expression_v_no_func . [ expression ]
    (271) postfix_expression_v_no_func -> postfix_expression_v_no_func . . ID
    (272) postfix_expression_v_no_func -> postfix_expression_v_no_func . PTR ID
    (260) postfix_expression_v -> postfix_expression_v_no_func .
    (266) postfix_expression_v -> postfix_expression_v_no_func . INC
    (267) postfix_expression_v -> postfix_expression_v_no_func . DEC

  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for PTR resolved as shift
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 373
    [               shift and go to state 289
    .               shift and go to state 290
    PTR             shift and go to state 291
    =               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_MUL          reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_DIV          reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_MOD          reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_PLUS         reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_SUB          reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_SL           reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_SR           reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_AND          reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_XOR          reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_OR           reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    *               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    /               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    %               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    +               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    -               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    SHIFT_LEFT      reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    SHIFT_RIGHT     reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    <               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    >               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    LE              reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    GE              reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    EQUAL           reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    NE              reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    &               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    ^               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    |               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    AND             reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    ?               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    OR              reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    ,               reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .)
    INC             shift and go to state 287
    DEC             shift and go to state 288

  ! [               [ reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .) ]
  ! .               [ reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .) ]
  ! PTR             [ reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .) ]
  ! )               [ reduce using rule 260 (postfix_expression_v -> postfix_expression_v_no_func .) ]


state 248

    (245) cast_expression_v -> ( specifier_qualifier_list . ) cast_expression_v

    )               shift and go to state 374


state 249

    (275) primary_expression_v -> ( expression_variable . )
    (199) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 375
    ,               shift and go to state 244


state 250

    (278) selection_statement -> SWITCH ( . expression_variable ) statement_switch
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_variable            shift and go to state 376
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 251

    (294) iteration_statement -> WHILE ( . expression_variable ) statement
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_variable            shift and go to state 377
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 252

    (295) iteration_statement -> DO statement . WHILE ( expression_variable ) ;

    WHILE           shift and go to state 378


state 253

    (296) iteration_statement -> FOR ( . expression_statement expression_statement ) statement
    (297) iteration_statement -> FOR ( . expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> FOR ( . declaration expression_statement ) statement
    (299) iteration_statement -> FOR ( . declaration expression_statement expression_variable ) statement
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    ;               shift and go to state 124
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    ENUM            shift and go to state 30
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_statement           shift and go to state 379
    expression_variable            shift and go to state 132
    declaration                    shift and go to state 380
    declaration_specifiers         shift and go to state 123
    assignment_expression          shift and go to state 143
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    struct_or_union                shift and go to state 29
    identifier                     shift and go to state 221
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 254

    (300) jump_statement -> GOTO ID . ;

    ;               shift and go to state 381


state 255

    (301) jump_statement -> CONTINUE ; .

    }               reduce using rule 301 (jump_statement -> CONTINUE ; .)
    {               reduce using rule 301 (jump_statement -> CONTINUE ; .)
    ;               reduce using rule 301 (jump_statement -> CONTINUE ; .)
    IF              reduce using rule 301 (jump_statement -> CONTINUE ; .)
    SWITCH          reduce using rule 301 (jump_statement -> CONTINUE ; .)
    WHILE           reduce using rule 301 (jump_statement -> CONTINUE ; .)
    DO              reduce using rule 301 (jump_statement -> CONTINUE ; .)
    FOR             reduce using rule 301 (jump_statement -> CONTINUE ; .)
    GOTO            reduce using rule 301 (jump_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 301 (jump_statement -> CONTINUE ; .)
    BREAK           reduce using rule 301 (jump_statement -> CONTINUE ; .)
    RETURN          reduce using rule 301 (jump_statement -> CONTINUE ; .)
    TYPEDEF         reduce using rule 301 (jump_statement -> CONTINUE ; .)
    EXTERN          reduce using rule 301 (jump_statement -> CONTINUE ; .)
    STATIC          reduce using rule 301 (jump_statement -> CONTINUE ; .)
    AUTO            reduce using rule 301 (jump_statement -> CONTINUE ; .)
    REGISTER        reduce using rule 301 (jump_statement -> CONTINUE ; .)
    VOID            reduce using rule 301 (jump_statement -> CONTINUE ; .)
    CHAR            reduce using rule 301 (jump_statement -> CONTINUE ; .)
    SHORT           reduce using rule 301 (jump_statement -> CONTINUE ; .)
    INT             reduce using rule 301 (jump_statement -> CONTINUE ; .)
    LONG            reduce using rule 301 (jump_statement -> CONTINUE ; .)
    FLOAT           reduce using rule 301 (jump_statement -> CONTINUE ; .)
    DOUBLE          reduce using rule 301 (jump_statement -> CONTINUE ; .)
    SIGNED          reduce using rule 301 (jump_statement -> CONTINUE ; .)
    UNSIGNED        reduce using rule 301 (jump_statement -> CONTINUE ; .)
    BOOL            reduce using rule 301 (jump_statement -> CONTINUE ; .)
    CONST           reduce using rule 301 (jump_statement -> CONTINUE ; .)
    VOLATILE        reduce using rule 301 (jump_statement -> CONTINUE ; .)
    RESTRICT        reduce using rule 301 (jump_statement -> CONTINUE ; .)
    (               reduce using rule 301 (jump_statement -> CONTINUE ; .)
    ID              reduce using rule 301 (jump_statement -> CONTINUE ; .)
    ENUM            reduce using rule 301 (jump_statement -> CONTINUE ; .)
    STRUCT          reduce using rule 301 (jump_statement -> CONTINUE ; .)
    UNION           reduce using rule 301 (jump_statement -> CONTINUE ; .)
    INC             reduce using rule 301 (jump_statement -> CONTINUE ; .)
    DEC             reduce using rule 301 (jump_statement -> CONTINUE ; .)
    SIZEOF          reduce using rule 301 (jump_statement -> CONTINUE ; .)
    &               reduce using rule 301 (jump_statement -> CONTINUE ; .)
    *               reduce using rule 301 (jump_statement -> CONTINUE ; .)
    +               reduce using rule 301 (jump_statement -> CONTINUE ; .)
    -               reduce using rule 301 (jump_statement -> CONTINUE ; .)
    ~               reduce using rule 301 (jump_statement -> CONTINUE ; .)
    !               reduce using rule 301 (jump_statement -> CONTINUE ; .)
    CONSTANCE       reduce using rule 301 (jump_statement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 301 (jump_statement -> CONTINUE ; .)
    ELSE            reduce using rule 301 (jump_statement -> CONTINUE ; .)
    CASE            reduce using rule 301 (jump_statement -> CONTINUE ; .)
    DEFAULT         reduce using rule 301 (jump_statement -> CONTINUE ; .)


state 256

    (302) jump_statement -> BREAK ; .

    }               reduce using rule 302 (jump_statement -> BREAK ; .)
    {               reduce using rule 302 (jump_statement -> BREAK ; .)
    ;               reduce using rule 302 (jump_statement -> BREAK ; .)
    IF              reduce using rule 302 (jump_statement -> BREAK ; .)
    SWITCH          reduce using rule 302 (jump_statement -> BREAK ; .)
    WHILE           reduce using rule 302 (jump_statement -> BREAK ; .)
    DO              reduce using rule 302 (jump_statement -> BREAK ; .)
    FOR             reduce using rule 302 (jump_statement -> BREAK ; .)
    GOTO            reduce using rule 302 (jump_statement -> BREAK ; .)
    CONTINUE        reduce using rule 302 (jump_statement -> BREAK ; .)
    BREAK           reduce using rule 302 (jump_statement -> BREAK ; .)
    RETURN          reduce using rule 302 (jump_statement -> BREAK ; .)
    TYPEDEF         reduce using rule 302 (jump_statement -> BREAK ; .)
    EXTERN          reduce using rule 302 (jump_statement -> BREAK ; .)
    STATIC          reduce using rule 302 (jump_statement -> BREAK ; .)
    AUTO            reduce using rule 302 (jump_statement -> BREAK ; .)
    REGISTER        reduce using rule 302 (jump_statement -> BREAK ; .)
    VOID            reduce using rule 302 (jump_statement -> BREAK ; .)
    CHAR            reduce using rule 302 (jump_statement -> BREAK ; .)
    SHORT           reduce using rule 302 (jump_statement -> BREAK ; .)
    INT             reduce using rule 302 (jump_statement -> BREAK ; .)
    LONG            reduce using rule 302 (jump_statement -> BREAK ; .)
    FLOAT           reduce using rule 302 (jump_statement -> BREAK ; .)
    DOUBLE          reduce using rule 302 (jump_statement -> BREAK ; .)
    SIGNED          reduce using rule 302 (jump_statement -> BREAK ; .)
    UNSIGNED        reduce using rule 302 (jump_statement -> BREAK ; .)
    BOOL            reduce using rule 302 (jump_statement -> BREAK ; .)
    CONST           reduce using rule 302 (jump_statement -> BREAK ; .)
    VOLATILE        reduce using rule 302 (jump_statement -> BREAK ; .)
    RESTRICT        reduce using rule 302 (jump_statement -> BREAK ; .)
    (               reduce using rule 302 (jump_statement -> BREAK ; .)
    ID              reduce using rule 302 (jump_statement -> BREAK ; .)
    ENUM            reduce using rule 302 (jump_statement -> BREAK ; .)
    STRUCT          reduce using rule 302 (jump_statement -> BREAK ; .)
    UNION           reduce using rule 302 (jump_statement -> BREAK ; .)
    INC             reduce using rule 302 (jump_statement -> BREAK ; .)
    DEC             reduce using rule 302 (jump_statement -> BREAK ; .)
    SIZEOF          reduce using rule 302 (jump_statement -> BREAK ; .)
    &               reduce using rule 302 (jump_statement -> BREAK ; .)
    *               reduce using rule 302 (jump_statement -> BREAK ; .)
    +               reduce using rule 302 (jump_statement -> BREAK ; .)
    -               reduce using rule 302 (jump_statement -> BREAK ; .)
    ~               reduce using rule 302 (jump_statement -> BREAK ; .)
    !               reduce using rule 302 (jump_statement -> BREAK ; .)
    CONSTANCE       reduce using rule 302 (jump_statement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 302 (jump_statement -> BREAK ; .)
    ELSE            reduce using rule 302 (jump_statement -> BREAK ; .)
    CASE            reduce using rule 302 (jump_statement -> BREAK ; .)
    DEFAULT         reduce using rule 302 (jump_statement -> BREAK ; .)


state 257

    (303) jump_statement -> RETURN ; .

    }               reduce using rule 303 (jump_statement -> RETURN ; .)
    {               reduce using rule 303 (jump_statement -> RETURN ; .)
    ;               reduce using rule 303 (jump_statement -> RETURN ; .)
    IF              reduce using rule 303 (jump_statement -> RETURN ; .)
    SWITCH          reduce using rule 303 (jump_statement -> RETURN ; .)
    WHILE           reduce using rule 303 (jump_statement -> RETURN ; .)
    DO              reduce using rule 303 (jump_statement -> RETURN ; .)
    FOR             reduce using rule 303 (jump_statement -> RETURN ; .)
    GOTO            reduce using rule 303 (jump_statement -> RETURN ; .)
    CONTINUE        reduce using rule 303 (jump_statement -> RETURN ; .)
    BREAK           reduce using rule 303 (jump_statement -> RETURN ; .)
    RETURN          reduce using rule 303 (jump_statement -> RETURN ; .)
    TYPEDEF         reduce using rule 303 (jump_statement -> RETURN ; .)
    EXTERN          reduce using rule 303 (jump_statement -> RETURN ; .)
    STATIC          reduce using rule 303 (jump_statement -> RETURN ; .)
    AUTO            reduce using rule 303 (jump_statement -> RETURN ; .)
    REGISTER        reduce using rule 303 (jump_statement -> RETURN ; .)
    VOID            reduce using rule 303 (jump_statement -> RETURN ; .)
    CHAR            reduce using rule 303 (jump_statement -> RETURN ; .)
    SHORT           reduce using rule 303 (jump_statement -> RETURN ; .)
    INT             reduce using rule 303 (jump_statement -> RETURN ; .)
    LONG            reduce using rule 303 (jump_statement -> RETURN ; .)
    FLOAT           reduce using rule 303 (jump_statement -> RETURN ; .)
    DOUBLE          reduce using rule 303 (jump_statement -> RETURN ; .)
    SIGNED          reduce using rule 303 (jump_statement -> RETURN ; .)
    UNSIGNED        reduce using rule 303 (jump_statement -> RETURN ; .)
    BOOL            reduce using rule 303 (jump_statement -> RETURN ; .)
    CONST           reduce using rule 303 (jump_statement -> RETURN ; .)
    VOLATILE        reduce using rule 303 (jump_statement -> RETURN ; .)
    RESTRICT        reduce using rule 303 (jump_statement -> RETURN ; .)
    (               reduce using rule 303 (jump_statement -> RETURN ; .)
    ID              reduce using rule 303 (jump_statement -> RETURN ; .)
    ENUM            reduce using rule 303 (jump_statement -> RETURN ; .)
    STRUCT          reduce using rule 303 (jump_statement -> RETURN ; .)
    UNION           reduce using rule 303 (jump_statement -> RETURN ; .)
    INC             reduce using rule 303 (jump_statement -> RETURN ; .)
    DEC             reduce using rule 303 (jump_statement -> RETURN ; .)
    SIZEOF          reduce using rule 303 (jump_statement -> RETURN ; .)
    &               reduce using rule 303 (jump_statement -> RETURN ; .)
    *               reduce using rule 303 (jump_statement -> RETURN ; .)
    +               reduce using rule 303 (jump_statement -> RETURN ; .)
    -               reduce using rule 303 (jump_statement -> RETURN ; .)
    ~               reduce using rule 303 (jump_statement -> RETURN ; .)
    !               reduce using rule 303 (jump_statement -> RETURN ; .)
    CONSTANCE       reduce using rule 303 (jump_statement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 303 (jump_statement -> RETURN ; .)
    ELSE            reduce using rule 303 (jump_statement -> RETURN ; .)
    CASE            reduce using rule 303 (jump_statement -> RETURN ; .)
    DEFAULT         reduce using rule 303 (jump_statement -> RETURN ; .)


state 258

    (304) jump_statement -> RETURN expression_variable . ;
    (199) expression_variable -> expression_variable . , assignment_expression

    ;               shift and go to state 382
    ,               shift and go to state 244


state 259

    (201) assignment_expression -> unary_expression_v assignment_operator . assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    unary_expression_v             shift and go to state 145
    assignment_expression          shift and go to state 383
    conditional_expression_v       shift and go to state 144
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 260

    (202) assignment_operator -> = .

    INC             reduce using rule 202 (assignment_operator -> = .)
    DEC             reduce using rule 202 (assignment_operator -> = .)
    SIZEOF          reduce using rule 202 (assignment_operator -> = .)
    &               reduce using rule 202 (assignment_operator -> = .)
    *               reduce using rule 202 (assignment_operator -> = .)
    +               reduce using rule 202 (assignment_operator -> = .)
    -               reduce using rule 202 (assignment_operator -> = .)
    ~               reduce using rule 202 (assignment_operator -> = .)
    !               reduce using rule 202 (assignment_operator -> = .)
    (               reduce using rule 202 (assignment_operator -> = .)
    ID              reduce using rule 202 (assignment_operator -> = .)
    CONSTANCE       reduce using rule 202 (assignment_operator -> = .)
    STRING_LITERAL  reduce using rule 202 (assignment_operator -> = .)


state 261

    (203) assignment_operator -> AO_MUL .

    INC             reduce using rule 203 (assignment_operator -> AO_MUL .)
    DEC             reduce using rule 203 (assignment_operator -> AO_MUL .)
    SIZEOF          reduce using rule 203 (assignment_operator -> AO_MUL .)
    &               reduce using rule 203 (assignment_operator -> AO_MUL .)
    *               reduce using rule 203 (assignment_operator -> AO_MUL .)
    +               reduce using rule 203 (assignment_operator -> AO_MUL .)
    -               reduce using rule 203 (assignment_operator -> AO_MUL .)
    ~               reduce using rule 203 (assignment_operator -> AO_MUL .)
    !               reduce using rule 203 (assignment_operator -> AO_MUL .)
    (               reduce using rule 203 (assignment_operator -> AO_MUL .)
    ID              reduce using rule 203 (assignment_operator -> AO_MUL .)
    CONSTANCE       reduce using rule 203 (assignment_operator -> AO_MUL .)
    STRING_LITERAL  reduce using rule 203 (assignment_operator -> AO_MUL .)


state 262

    (204) assignment_operator -> AO_DIV .

    INC             reduce using rule 204 (assignment_operator -> AO_DIV .)
    DEC             reduce using rule 204 (assignment_operator -> AO_DIV .)
    SIZEOF          reduce using rule 204 (assignment_operator -> AO_DIV .)
    &               reduce using rule 204 (assignment_operator -> AO_DIV .)
    *               reduce using rule 204 (assignment_operator -> AO_DIV .)
    +               reduce using rule 204 (assignment_operator -> AO_DIV .)
    -               reduce using rule 204 (assignment_operator -> AO_DIV .)
    ~               reduce using rule 204 (assignment_operator -> AO_DIV .)
    !               reduce using rule 204 (assignment_operator -> AO_DIV .)
    (               reduce using rule 204 (assignment_operator -> AO_DIV .)
    ID              reduce using rule 204 (assignment_operator -> AO_DIV .)
    CONSTANCE       reduce using rule 204 (assignment_operator -> AO_DIV .)
    STRING_LITERAL  reduce using rule 204 (assignment_operator -> AO_DIV .)


state 263

    (205) assignment_operator -> AO_MOD .

    INC             reduce using rule 205 (assignment_operator -> AO_MOD .)
    DEC             reduce using rule 205 (assignment_operator -> AO_MOD .)
    SIZEOF          reduce using rule 205 (assignment_operator -> AO_MOD .)
    &               reduce using rule 205 (assignment_operator -> AO_MOD .)
    *               reduce using rule 205 (assignment_operator -> AO_MOD .)
    +               reduce using rule 205 (assignment_operator -> AO_MOD .)
    -               reduce using rule 205 (assignment_operator -> AO_MOD .)
    ~               reduce using rule 205 (assignment_operator -> AO_MOD .)
    !               reduce using rule 205 (assignment_operator -> AO_MOD .)
    (               reduce using rule 205 (assignment_operator -> AO_MOD .)
    ID              reduce using rule 205 (assignment_operator -> AO_MOD .)
    CONSTANCE       reduce using rule 205 (assignment_operator -> AO_MOD .)
    STRING_LITERAL  reduce using rule 205 (assignment_operator -> AO_MOD .)


state 264

    (206) assignment_operator -> AO_PLUS .

    INC             reduce using rule 206 (assignment_operator -> AO_PLUS .)
    DEC             reduce using rule 206 (assignment_operator -> AO_PLUS .)
    SIZEOF          reduce using rule 206 (assignment_operator -> AO_PLUS .)
    &               reduce using rule 206 (assignment_operator -> AO_PLUS .)
    *               reduce using rule 206 (assignment_operator -> AO_PLUS .)
    +               reduce using rule 206 (assignment_operator -> AO_PLUS .)
    -               reduce using rule 206 (assignment_operator -> AO_PLUS .)
    ~               reduce using rule 206 (assignment_operator -> AO_PLUS .)
    !               reduce using rule 206 (assignment_operator -> AO_PLUS .)
    (               reduce using rule 206 (assignment_operator -> AO_PLUS .)
    ID              reduce using rule 206 (assignment_operator -> AO_PLUS .)
    CONSTANCE       reduce using rule 206 (assignment_operator -> AO_PLUS .)
    STRING_LITERAL  reduce using rule 206 (assignment_operator -> AO_PLUS .)


state 265

    (207) assignment_operator -> AO_SUB .

    INC             reduce using rule 207 (assignment_operator -> AO_SUB .)
    DEC             reduce using rule 207 (assignment_operator -> AO_SUB .)
    SIZEOF          reduce using rule 207 (assignment_operator -> AO_SUB .)
    &               reduce using rule 207 (assignment_operator -> AO_SUB .)
    *               reduce using rule 207 (assignment_operator -> AO_SUB .)
    +               reduce using rule 207 (assignment_operator -> AO_SUB .)
    -               reduce using rule 207 (assignment_operator -> AO_SUB .)
    ~               reduce using rule 207 (assignment_operator -> AO_SUB .)
    !               reduce using rule 207 (assignment_operator -> AO_SUB .)
    (               reduce using rule 207 (assignment_operator -> AO_SUB .)
    ID              reduce using rule 207 (assignment_operator -> AO_SUB .)
    CONSTANCE       reduce using rule 207 (assignment_operator -> AO_SUB .)
    STRING_LITERAL  reduce using rule 207 (assignment_operator -> AO_SUB .)


state 266

    (208) assignment_operator -> AO_SL .

    INC             reduce using rule 208 (assignment_operator -> AO_SL .)
    DEC             reduce using rule 208 (assignment_operator -> AO_SL .)
    SIZEOF          reduce using rule 208 (assignment_operator -> AO_SL .)
    &               reduce using rule 208 (assignment_operator -> AO_SL .)
    *               reduce using rule 208 (assignment_operator -> AO_SL .)
    +               reduce using rule 208 (assignment_operator -> AO_SL .)
    -               reduce using rule 208 (assignment_operator -> AO_SL .)
    ~               reduce using rule 208 (assignment_operator -> AO_SL .)
    !               reduce using rule 208 (assignment_operator -> AO_SL .)
    (               reduce using rule 208 (assignment_operator -> AO_SL .)
    ID              reduce using rule 208 (assignment_operator -> AO_SL .)
    CONSTANCE       reduce using rule 208 (assignment_operator -> AO_SL .)
    STRING_LITERAL  reduce using rule 208 (assignment_operator -> AO_SL .)


state 267

    (209) assignment_operator -> AO_SR .

    INC             reduce using rule 209 (assignment_operator -> AO_SR .)
    DEC             reduce using rule 209 (assignment_operator -> AO_SR .)
    SIZEOF          reduce using rule 209 (assignment_operator -> AO_SR .)
    &               reduce using rule 209 (assignment_operator -> AO_SR .)
    *               reduce using rule 209 (assignment_operator -> AO_SR .)
    +               reduce using rule 209 (assignment_operator -> AO_SR .)
    -               reduce using rule 209 (assignment_operator -> AO_SR .)
    ~               reduce using rule 209 (assignment_operator -> AO_SR .)
    !               reduce using rule 209 (assignment_operator -> AO_SR .)
    (               reduce using rule 209 (assignment_operator -> AO_SR .)
    ID              reduce using rule 209 (assignment_operator -> AO_SR .)
    CONSTANCE       reduce using rule 209 (assignment_operator -> AO_SR .)
    STRING_LITERAL  reduce using rule 209 (assignment_operator -> AO_SR .)


state 268

    (210) assignment_operator -> AO_AND .

    INC             reduce using rule 210 (assignment_operator -> AO_AND .)
    DEC             reduce using rule 210 (assignment_operator -> AO_AND .)
    SIZEOF          reduce using rule 210 (assignment_operator -> AO_AND .)
    &               reduce using rule 210 (assignment_operator -> AO_AND .)
    *               reduce using rule 210 (assignment_operator -> AO_AND .)
    +               reduce using rule 210 (assignment_operator -> AO_AND .)
    -               reduce using rule 210 (assignment_operator -> AO_AND .)
    ~               reduce using rule 210 (assignment_operator -> AO_AND .)
    !               reduce using rule 210 (assignment_operator -> AO_AND .)
    (               reduce using rule 210 (assignment_operator -> AO_AND .)
    ID              reduce using rule 210 (assignment_operator -> AO_AND .)
    CONSTANCE       reduce using rule 210 (assignment_operator -> AO_AND .)
    STRING_LITERAL  reduce using rule 210 (assignment_operator -> AO_AND .)


state 269

    (211) assignment_operator -> AO_XOR .

    INC             reduce using rule 211 (assignment_operator -> AO_XOR .)
    DEC             reduce using rule 211 (assignment_operator -> AO_XOR .)
    SIZEOF          reduce using rule 211 (assignment_operator -> AO_XOR .)
    &               reduce using rule 211 (assignment_operator -> AO_XOR .)
    *               reduce using rule 211 (assignment_operator -> AO_XOR .)
    +               reduce using rule 211 (assignment_operator -> AO_XOR .)
    -               reduce using rule 211 (assignment_operator -> AO_XOR .)
    ~               reduce using rule 211 (assignment_operator -> AO_XOR .)
    !               reduce using rule 211 (assignment_operator -> AO_XOR .)
    (               reduce using rule 211 (assignment_operator -> AO_XOR .)
    ID              reduce using rule 211 (assignment_operator -> AO_XOR .)
    CONSTANCE       reduce using rule 211 (assignment_operator -> AO_XOR .)
    STRING_LITERAL  reduce using rule 211 (assignment_operator -> AO_XOR .)


state 270

    (212) assignment_operator -> AO_OR .

    INC             reduce using rule 212 (assignment_operator -> AO_OR .)
    DEC             reduce using rule 212 (assignment_operator -> AO_OR .)
    SIZEOF          reduce using rule 212 (assignment_operator -> AO_OR .)
    &               reduce using rule 212 (assignment_operator -> AO_OR .)
    *               reduce using rule 212 (assignment_operator -> AO_OR .)
    +               reduce using rule 212 (assignment_operator -> AO_OR .)
    -               reduce using rule 212 (assignment_operator -> AO_OR .)
    ~               reduce using rule 212 (assignment_operator -> AO_OR .)
    !               reduce using rule 212 (assignment_operator -> AO_OR .)
    (               reduce using rule 212 (assignment_operator -> AO_OR .)
    ID              reduce using rule 212 (assignment_operator -> AO_OR .)
    CONSTANCE       reduce using rule 212 (assignment_operator -> AO_OR .)
    STRING_LITERAL  reduce using rule 212 (assignment_operator -> AO_OR .)


state 271

    (214) conditional_expression_v -> logical_or_expression_v ? . expression_variable : conditional_expression_v
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    logical_or_expression_v        shift and go to state 146
    expression_variable            shift and go to state 384
    conditional_expression_v       shift and go to state 144
    assignment_expression          shift and go to state 143
    unary_expression_v             shift and go to state 145
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 272

    (216) logical_or_expression_v -> logical_or_expression_v OR . logical_and_expression_v
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    logical_and_expression_v       shift and go to state 385
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 273

    (261) postfix_expression_v -> postfix_expression_v [ . expression ]
    (161) expression -> . constant_expression
    (162) expression -> . expression , constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    expression                     shift and go to state 386
    constant_expression            shift and go to state 334
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 274

    (264) postfix_expression_v -> postfix_expression_v . . ID

    ID              shift and go to state 387


state 275

    (265) postfix_expression_v -> postfix_expression_v PTR . ID

    ID              shift and go to state 388


state 276

    (250) unary_expression_v -> INC unary_expression_v .

    =               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    AO_MUL          reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    AO_DIV          reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    AO_MOD          reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    AO_PLUS         reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    AO_SUB          reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    AO_SL           reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    AO_SR           reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    AO_AND          reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    AO_XOR          reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    AO_OR           reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    *               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    /               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    %               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    +               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    -               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    SHIFT_LEFT      reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    SHIFT_RIGHT     reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    <               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    >               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    LE              reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    GE              reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    EQUAL           reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    NE              reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    &               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    ^               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    |               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    AND             reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    ?               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    OR              reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    ;               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    ,               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    )               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    }               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)
    :               reduce using rule 250 (unary_expression_v -> INC unary_expression_v .)


state 277

    (253) unary_expression_v -> SIZEOF . unary_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 277
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 278
    ID              shift and go to state 42

    unary_expression_v             shift and go to state 283
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 278

    (269) postfix_expression_v_no_func -> ( . postfix_expression_v_no_func )
    (175) identifier -> ( . identifier )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 278
    ID              shift and go to state 42

    postfix_expression_v_no_func   shift and go to state 389
    identifier                     shift and go to state 390

state 279

    (251) unary_expression_v -> DEC unary_expression_v .

    =               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    AO_MUL          reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    AO_DIV          reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    AO_MOD          reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    AO_PLUS         reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    AO_SUB          reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    AO_SL           reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    AO_SR           reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    AO_AND          reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    AO_XOR          reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    AO_OR           reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    *               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    /               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    %               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    +               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    -               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    SHIFT_LEFT      reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    SHIFT_RIGHT     reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    <               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    >               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    LE              reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    GE              reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    EQUAL           reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    NE              reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    &               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    ^               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    |               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    AND             reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    ?               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    OR              reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    ;               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    ,               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    )               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    }               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)
    :               reduce using rule 251 (unary_expression_v -> DEC unary_expression_v .)


state 280

    (252) unary_expression_v -> unary_operator_v cast_expression_v .

    =               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_MUL          reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_DIV          reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_MOD          reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_PLUS         reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_SUB          reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_SL           reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_SR           reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_AND          reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_XOR          reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_OR           reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    *               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    /               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    %               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    +               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    -               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    SHIFT_LEFT      reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    SHIFT_RIGHT     reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    <               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    >               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    LE              reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    GE              reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    EQUAL           reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    NE              reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    &               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    ^               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    |               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AND             reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    ?               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    OR              reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    ;               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    ,               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    )               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    }               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)
    :               reduce using rule 252 (unary_expression_v -> unary_operator_v cast_expression_v .)


state 281

    (243) cast_expression_v -> unary_expression_v .

    =               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    AO_MUL          reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    AO_DIV          reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    AO_MOD          reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    AO_PLUS         reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    AO_SUB          reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    AO_SL           reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    AO_SR           reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    AO_AND          reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    AO_XOR          reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    AO_OR           reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    *               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    /               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    %               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    +               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    -               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    SHIFT_LEFT      reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    SHIFT_RIGHT     reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    <               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    >               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    LE              reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    GE              reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    EQUAL           reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    NE              reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    &               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    ^               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    |               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    AND             reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    ?               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    OR              reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    ;               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    ,               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    )               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    }               reduce using rule 243 (cast_expression_v -> unary_expression_v .)
    :               reduce using rule 243 (cast_expression_v -> unary_expression_v .)


state 282

    (245) cast_expression_v -> ( . specifier_qualifier_list ) cast_expression_v
    (275) primary_expression_v -> ( . expression_variable )
    (269) postfix_expression_v_no_func -> ( . postfix_expression_v_no_func )
    (175) identifier -> ( . identifier )
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    (               shift and go to state 222
    ID              shift and go to state 42
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    specifier_qualifier_list       shift and go to state 248
    cast_expression_v              shift and go to state 151
    expression_variable            shift and go to state 249
    postfix_expression_v_no_func   shift and go to state 247
    identifier                     shift and go to state 246
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    assignment_expression          shift and go to state 143
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    struct_or_union                shift and go to state 29
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    logical_and_expression_v       shift and go to state 153
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 283

    (253) unary_expression_v -> SIZEOF unary_expression_v .

    =               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_MUL          reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_DIV          reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_MOD          reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_PLUS         reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_SUB          reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_SL           reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_SR           reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_AND          reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_XOR          reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_OR           reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    *               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    /               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    %               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    +               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    -               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    SHIFT_LEFT      reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    SHIFT_RIGHT     reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    <               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    >               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    LE              reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    GE              reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    EQUAL           reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    NE              reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    &               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    ^               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    |               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    AND             reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    ?               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    OR              reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    ;               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    ,               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    )               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    }               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)
    :               reduce using rule 253 (unary_expression_v -> SIZEOF unary_expression_v .)


state 284

    (247) unary_expression_v_constance -> SIZEOF unary_expression_v_constance .

    *               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    /               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    %               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    +               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    -               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    SHIFT_LEFT      reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    SHIFT_RIGHT     reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    <               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    >               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    LE              reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    GE              reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    EQUAL           reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    NE              reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    &               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    ^               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    |               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AND             reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    ?               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    OR              reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    ;               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    ,               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    )               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    =               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_MUL          reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_DIV          reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_MOD          reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_PLUS         reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_SUB          reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_SL           reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_SR           reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_AND          reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_XOR          reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_OR           reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    }               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    :               reduce using rule 247 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)


state 285

    (248) unary_expression_v_constance -> SIZEOF ( . specifier_qualifier_list )
    (275) primary_expression_v -> ( . expression_variable )
    (269) postfix_expression_v_no_func -> ( . postfix_expression_v_no_func )
    (175) identifier -> ( . identifier )
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    (               shift and go to state 222
    ID              shift and go to state 42
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    specifier_qualifier_list       shift and go to state 391
    expression_variable            shift and go to state 249
    postfix_expression_v_no_func   shift and go to state 247
    identifier                     shift and go to state 246
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    assignment_expression          shift and go to state 143
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    struct_or_union                shift and go to state 29
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 286

    (218) logical_and_expression_v -> logical_and_expression_v AND . inclusive_or_expression_v
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    inclusive_or_expression_v      shift and go to state 392
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 287

    (266) postfix_expression_v -> postfix_expression_v_no_func INC .

    [               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    .               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    PTR             reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    =               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_MUL          reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_DIV          reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_MOD          reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_PLUS         reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_SUB          reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_SL           reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_SR           reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_AND          reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_XOR          reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_OR           reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    *               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    /               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    %               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    +               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    -               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    SHIFT_LEFT      reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    SHIFT_RIGHT     reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    <               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    >               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    LE              reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    GE              reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    EQUAL           reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    NE              reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    &               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    ^               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    |               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AND             reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    ?               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    OR              reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    ;               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    ,               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    )               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    }               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    :               reduce using rule 266 (postfix_expression_v -> postfix_expression_v_no_func INC .)


state 288

    (267) postfix_expression_v -> postfix_expression_v_no_func DEC .

    [               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    .               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    PTR             reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    =               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_MUL          reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_DIV          reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_MOD          reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_PLUS         reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_SUB          reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_SL           reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_SR           reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_AND          reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_XOR          reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_OR           reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    *               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    /               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    %               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    +               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    -               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    SHIFT_LEFT      reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    SHIFT_RIGHT     reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    <               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    >               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    LE              reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    GE              reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    EQUAL           reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    NE              reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    &               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    ^               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    |               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AND             reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    ?               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    OR              reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    ;               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    ,               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    )               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    }               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    :               reduce using rule 267 (postfix_expression_v -> postfix_expression_v_no_func DEC .)


state 289

    (270) postfix_expression_v_no_func -> postfix_expression_v_no_func [ . expression ]
    (161) expression -> . constant_expression
    (162) expression -> . expression , constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    expression                     shift and go to state 393
    constant_expression            shift and go to state 334
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 290

    (271) postfix_expression_v_no_func -> postfix_expression_v_no_func . . ID

    ID              shift and go to state 394


state 291

    (272) postfix_expression_v_no_func -> postfix_expression_v_no_func PTR . ID

    ID              shift and go to state 395


state 292

    (220) inclusive_or_expression_v -> inclusive_or_expression_v | . exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    exclusive_or_expression_v      shift and go to state 396
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 293

    (222) exclusive_or_expression_v -> exclusive_or_expression_v ^ . and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    and_expression_v               shift and go to state 397
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 294

    (224) and_expression_v -> and_expression_v & . equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    equality_expression_v          shift and go to state 398
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 295

    (226) equality_expression_v -> equality_expression_v EQUAL . relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    relational_expression_v        shift and go to state 399
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 296

    (227) equality_expression_v -> equality_expression_v NE . relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    relational_expression_v        shift and go to state 400
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 297

    (229) relational_expression_v -> relational_expression_v < . shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    shift_expression_v             shift and go to state 401
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 298

    (230) relational_expression_v -> relational_expression_v > . shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    shift_expression_v             shift and go to state 402
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 299

    (231) relational_expression_v -> relational_expression_v LE . shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    shift_expression_v             shift and go to state 403
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 300

    (232) relational_expression_v -> relational_expression_v GE . shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    shift_expression_v             shift and go to state 404
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 301

    (234) shift_expression_v -> shift_expression_v SHIFT_LEFT . additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    additive_expression_v          shift and go to state 405
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 302

    (235) shift_expression_v -> shift_expression_v SHIFT_RIGHT . additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    additive_expression_v          shift and go to state 406
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 303

    (237) additive_expression_v -> additive_expression_v + . multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    multiplicative_expression_v    shift and go to state 407
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 304

    (238) additive_expression_v -> additive_expression_v - . multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    multiplicative_expression_v    shift and go to state 408
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 305

    (240) multiplicative_expression_v -> multiplicative_expression_v * . cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    cast_expression_v              shift and go to state 409
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 306

    (241) multiplicative_expression_v -> multiplicative_expression_v / . cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    cast_expression_v              shift and go to state 410
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 307

    (242) multiplicative_expression_v -> multiplicative_expression_v % . cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    cast_expression_v              shift and go to state 411
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 308

    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (173) direct_function_declarator -> ( . direct_function_declarator )
    (175) identifier -> ( . identifier )
    (103) direct_declarator -> ( . declarator )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    *               shift and go to state 38
    (               shift and go to state 308
    ID              shift and go to state 42

    pointer                        shift and go to state 86
    direct_declarator_forlist      shift and go to state 87
    direct_function_declarator     shift and go to state 83
    identifier                     shift and go to state 309
    declarator                     shift and go to state 85
    direct_declarator              shift and go to state 44

state 309

    (175) identifier -> ( identifier . )
    (105) direct_declarator_forlist -> identifier .
    (109) direct_declarator_forlist -> identifier . [ constant_expression ]
    (110) direct_declarator_forlist -> identifier . [ ]
    (174) direct_function_declarator -> identifier . parameter_type_list_definition
    (177) parameter_type_list_definition -> . ( )
    (178) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (179) parameter_type_list_definition -> . ( parameter_list )

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for [ resolved as shift
    )               shift and go to state 181
    [               shift and go to state 89
    (               shift and go to state 90

  ! )               [ reduce using rule 105 (direct_declarator_forlist -> identifier .) ]
  ! [               [ reduce using rule 105 (direct_declarator_forlist -> identifier .) ]

    parameter_type_list_definition shift and go to state 88

state 310

    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (175) identifier -> ( . identifier )
    (173) direct_function_declarator -> ( . direct_function_declarator )
    (103) direct_declarator -> ( . declarator )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    *               shift and go to state 38
    (               shift and go to state 310
    ID              shift and go to state 42

    pointer                        shift and go to state 86
    direct_declarator_forlist      shift and go to state 87
    identifier                     shift and go to state 309
    direct_function_declarator     shift and go to state 83
    declarator                     shift and go to state 85
    direct_declarator              shift and go to state 44

state 311

    (106) direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .

    [               reduce using rule 106 (direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .)
    =               reduce using rule 106 (direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .)
    ;               reduce using rule 106 (direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .)
    ,               reduce using rule 106 (direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .)
    )               reduce using rule 106 (direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .)
    :               reduce using rule 106 (direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .)


state 312

    (109) direct_declarator_forlist -> identifier [ constant_expression ] .

    [               reduce using rule 109 (direct_declarator_forlist -> identifier [ constant_expression ] .)
    =               reduce using rule 109 (direct_declarator_forlist -> identifier [ constant_expression ] .)
    ;               reduce using rule 109 (direct_declarator_forlist -> identifier [ constant_expression ] .)
    ,               reduce using rule 109 (direct_declarator_forlist -> identifier [ constant_expression ] .)
    )               reduce using rule 109 (direct_declarator_forlist -> identifier [ constant_expression ] .)
    :               reduce using rule 109 (direct_declarator_forlist -> identifier [ constant_expression ] .)


state 313

    (119) conditional_expression -> logical_or_expression ? . expression : conditional_expression
    (161) expression -> . constant_expression
    (162) expression -> . expression , constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    logical_or_expression          shift and go to state 189
    expression                     shift and go to state 412
    conditional_expression         shift and go to state 188
    constant_expression            shift and go to state 334
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 314

    (121) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    logical_and_expression         shift and go to state 413
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 315

    (123) logical_and_expression -> logical_and_expression AND . inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    inclusive_or_expression        shift and go to state 414
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 316

    (125) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    exclusive_or_expression        shift and go to state 415
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 317

    (127) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    and_expression                 shift and go to state 416
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 318

    (129) and_expression -> and_expression & . equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    equality_expression            shift and go to state 417
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 319

    (131) equality_expression -> equality_expression EQUAL . relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    relational_expression          shift and go to state 418
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 320

    (132) equality_expression -> equality_expression NE . relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    relational_expression          shift and go to state 419
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 321

    (134) relational_expression -> relational_expression < . shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    shift_expression               shift and go to state 420
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 322

    (135) relational_expression -> relational_expression > . shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    shift_expression               shift and go to state 421
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 323

    (136) relational_expression -> relational_expression LE . shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    shift_expression               shift and go to state 422
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 324

    (137) relational_expression -> relational_expression GE . shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    shift_expression               shift and go to state 423
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 325

    (139) shift_expression -> shift_expression SHIFT_LEFT . additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    additive_expression            shift and go to state 424
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 326

    (140) shift_expression -> shift_expression SHIFT_RIGHT . additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    additive_expression            shift and go to state 425
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 327

    (142) additive_expression -> additive_expression + . multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    multiplicative_expression      shift and go to state 426
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 328

    (143) additive_expression -> additive_expression - . multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    multiplicative_expression      shift and go to state 427
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 329

    (145) multiplicative_expression -> multiplicative_expression * . cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    cast_expression                shift and go to state 428
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 330

    (146) multiplicative_expression -> multiplicative_expression / . cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    cast_expression                shift and go to state 429
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 331

    (147) multiplicative_expression -> multiplicative_expression % . cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    cast_expression                shift and go to state 430
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 332

    (149) cast_expression -> ( specifier_qualifier_list . ) cast_expression

    )               shift and go to state 431


state 333

    (160) primary_expression -> ( expression . )
    (162) expression -> expression . , constant_expression

    )               shift and go to state 432
    ,               shift and go to state 433


state 334

    (161) expression -> constant_expression .

    )               reduce using rule 161 (expression -> constant_expression .)
    ,               reduce using rule 161 (expression -> constant_expression .)
    ]               reduce using rule 161 (expression -> constant_expression .)
    :               reduce using rule 161 (expression -> constant_expression .)


state 335

    (151) unary_expression -> unary_operator cast_expression .

    *               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    SHIFT_LEFT      reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    SHIFT_RIGHT     reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    EQUAL           reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    ?               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    ]               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    }               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 151 (unary_expression -> unary_operator cast_expression .)


state 336

    (152) unary_expression -> SIZEOF unary_expression .

    *               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    /               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    %               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    +               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    -               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    SHIFT_LEFT      reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    SHIFT_RIGHT     reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    <               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    >               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    EQUAL           reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    &               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    ^               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    |               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    ?               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    ]               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    )               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    ,               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    ;               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    }               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)
    :               reduce using rule 152 (unary_expression -> SIZEOF unary_expression .)


state 337

    (153) unary_expression -> SIZEOF ( . specifier_qualifier_list )
    (160) primary_expression -> ( . expression )
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (161) expression -> . constant_expression
    (162) expression -> . expression , constant_expression
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (117) constant_expression -> . conditional_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    specifier_qualifier_list       shift and go to state 434
    expression                     shift and go to state 333
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    constant_expression            shift and go to state 334
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    conditional_expression         shift and go to state 188
    struct_or_union                shift and go to state 29
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 338

    (178) parameter_type_list_definition -> ( parameter_type_list_definition ) .

    {               reduce using rule 178 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)
    =               reduce using rule 178 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)
    ;               reduce using rule 178 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)
    ,               reduce using rule 178 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)
    )               reduce using rule 178 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)
    :               reduce using rule 178 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)
    [               reduce using rule 178 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)


state 339

    (179) parameter_type_list_definition -> ( parameter_list ) .

    {               reduce using rule 179 (parameter_type_list_definition -> ( parameter_list ) .)
    =               reduce using rule 179 (parameter_type_list_definition -> ( parameter_list ) .)
    ;               reduce using rule 179 (parameter_type_list_definition -> ( parameter_list ) .)
    ,               reduce using rule 179 (parameter_type_list_definition -> ( parameter_list ) .)
    )               reduce using rule 179 (parameter_type_list_definition -> ( parameter_list ) .)
    :               reduce using rule 179 (parameter_type_list_definition -> ( parameter_list ) .)
    [               reduce using rule 179 (parameter_type_list_definition -> ( parameter_list ) .)


state 340

    (113) parameter_list -> parameter_declaration , . parameter_list
    (111) parameter_list -> . parameter_list_definition
    (112) parameter_list -> . parameter_declaration
    (113) parameter_list -> . parameter_declaration , parameter_list
    (180) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (181) parameter_list_definition -> . parameter_declaration = constant_expression
    (182) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 216
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    parameter_declaration          shift and go to state 215
    parameter_list                 shift and go to state 435
    parameter_list_definition      shift and go to state 214
    declaration_specifiers         shift and go to state 217
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 341

    (180) parameter_list_definition -> parameter_declaration = . constant_expression , parameter_list_definition
    (181) parameter_list_definition -> parameter_declaration = . constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    constant_expression            shift and go to state 436
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 342

    (114) parameter_declaration -> declaration_specifiers declarator .

    ,               reduce using rule 114 (parameter_declaration -> declaration_specifiers declarator .)
    =               reduce using rule 114 (parameter_declaration -> declaration_specifiers declarator .)
    )               reduce using rule 114 (parameter_declaration -> declaration_specifiers declarator .)


state 343

    (115) parameter_declaration -> declaration_specifiers abstract_declarator .

    ,               reduce using rule 115 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    =               reduce using rule 115 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    )               reduce using rule 115 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 344

    (94) declarator -> pointer . direct_declarator
    (163) abstract_declarator -> pointer .
    (165) abstract_declarator -> pointer . direct_abstract_declarator
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (166) direct_abstract_declarator -> . ( abstract_declarator )
    (167) direct_abstract_declarator -> . [ ]
    (168) direct_abstract_declarator -> . [ constant_expression ]
    (169) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (170) direct_abstract_declarator -> . parameter_type_list_definition
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (177) parameter_type_list_definition -> . ( )
    (178) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (179) parameter_type_list_definition -> . ( parameter_list )
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    ,               reduce using rule 163 (abstract_declarator -> pointer .)
    =               reduce using rule 163 (abstract_declarator -> pointer .)
    )               reduce using rule 163 (abstract_declarator -> pointer .)
    (               shift and go to state 346
    [               shift and go to state 347
    ID              shift and go to state 42

    direct_declarator              shift and go to state 73
    direct_abstract_declarator     shift and go to state 437
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 176
    parameter_type_list_definition shift and go to state 348
    identifier                     shift and go to state 177

state 345

    (164) abstract_declarator -> direct_abstract_declarator .
    (169) direct_abstract_declarator -> direct_abstract_declarator . [ constant_expression ]

    ,               reduce using rule 164 (abstract_declarator -> direct_abstract_declarator .)
    =               reduce using rule 164 (abstract_declarator -> direct_abstract_declarator .)
    )               reduce using rule 164 (abstract_declarator -> direct_abstract_declarator .)
    [               shift and go to state 438


state 346

    (103) direct_declarator -> ( . declarator )
    (166) direct_abstract_declarator -> ( . abstract_declarator )
    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (173) direct_function_declarator -> ( . direct_function_declarator )
    (177) parameter_type_list_definition -> ( . )
    (178) parameter_type_list_definition -> ( . parameter_type_list_definition )
    (179) parameter_type_list_definition -> ( . parameter_list )
    (175) identifier -> ( . identifier )
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (163) abstract_declarator -> . pointer
    (164) abstract_declarator -> . direct_abstract_declarator
    (165) abstract_declarator -> . pointer direct_abstract_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (177) parameter_type_list_definition -> . ( )
    (178) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (179) parameter_type_list_definition -> . ( parameter_list )
    (111) parameter_list -> . parameter_list_definition
    (112) parameter_list -> . parameter_declaration
    (113) parameter_list -> . parameter_declaration , parameter_list
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (166) direct_abstract_declarator -> . ( abstract_declarator )
    (167) direct_abstract_declarator -> . [ ]
    (168) direct_abstract_declarator -> . [ constant_expression ]
    (169) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (170) direct_abstract_declarator -> . parameter_type_list_definition
    (180) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (181) parameter_list_definition -> . parameter_declaration = constant_expression
    (182) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    )               shift and go to state 211
    *               shift and go to state 38
    (               shift and go to state 439
    ID              shift and go to state 42
    [               shift and go to state 347
    ELLIPSIS        shift and go to state 216
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    declarator                     shift and go to state 85
    abstract_declarator            shift and go to state 440
    pointer                        shift and go to state 441
    direct_declarator_forlist      shift and go to state 87
    direct_function_declarator     shift and go to state 83
    parameter_type_list_definition shift and go to state 442
    parameter_list                 shift and go to state 213
    identifier                     shift and go to state 309
    direct_declarator              shift and go to state 44
    direct_abstract_declarator     shift and go to state 345
    parameter_list_definition      shift and go to state 214
    parameter_declaration          shift and go to state 215
    declaration_specifiers         shift and go to state 217
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 347

    (167) direct_abstract_declarator -> [ . ]
    (168) direct_abstract_declarator -> [ . constant_expression ]
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    ]               shift and go to state 443
    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    constant_expression            shift and go to state 444
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 348

    (170) direct_abstract_declarator -> parameter_type_list_definition .

    [               reduce using rule 170 (direct_abstract_declarator -> parameter_type_list_definition .)
    ,               reduce using rule 170 (direct_abstract_declarator -> parameter_type_list_definition .)
    =               reduce using rule 170 (direct_abstract_declarator -> parameter_type_list_definition .)
    )               reduce using rule 170 (direct_abstract_declarator -> parameter_type_list_definition .)


state 349

    (312) initializer -> { initializer_list . }
    (313) initializer -> { initializer_list . , }
    (309) initializer_list -> initializer_list . , initializer
    (310) initializer_list -> initializer_list . , designation initializer

    }               shift and go to state 445
    ,               shift and go to state 446


state 350

    (307) initializer_list -> initializer .

    }               reduce using rule 307 (initializer_list -> initializer .)
    ,               reduce using rule 307 (initializer_list -> initializer .)


state 351

    (308) initializer_list -> designation . initializer
    (311) initializer -> . assignment_expression
    (312) initializer -> . { initializer_list }
    (313) initializer -> . { initializer_list , }
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 220
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    initializer                    shift and go to state 447
    assignment_expression          shift and go to state 219
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 352

    (314) designation -> designator_list . =
    (316) designator_list -> designator_list . designator
    (317) designator -> . [ constant_expression ]
    (318) designator -> . . ID

    =               shift and go to state 448
    [               shift and go to state 354
    .               shift and go to state 355

    designator                     shift and go to state 449

state 353

    (315) designator_list -> designator .

    =               reduce using rule 315 (designator_list -> designator .)
    [               reduce using rule 315 (designator_list -> designator .)
    .               reduce using rule 315 (designator_list -> designator .)


state 354

    (317) designator -> [ . constant_expression ]
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    constant_expression            shift and go to state 450
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 355

    (318) designator -> . . ID

    ID              shift and go to state 451


state 356

    (108) direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .

    [               reduce using rule 108 (direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .)
    =               reduce using rule 108 (direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .)
    ;               reduce using rule 108 (direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .)
    ,               reduce using rule 108 (direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .)
    )               reduce using rule 108 (direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .)
    :               reduce using rule 108 (direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .)


state 357

    (75) struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .

    TYPEDEF         reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    EXTERN          reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    STATIC          reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    AUTO            reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    REGISTER        reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    CONST           reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    VOLATILE        reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    RESTRICT        reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    ;               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    *               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    (               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    ID              reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    [               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    ,               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    =               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    )               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    :               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)


state 358

    (82) struct_declaration -> specifier_qualifier_list struct_declarator_list ; .

    }               reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOID            reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CHAR            reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SHORT           reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    INT             reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    LONG            reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    FLOAT           reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    DOUBLE          reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SIGNED          reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNSIGNED        reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    BOOL            reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CONST           reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOLATILE        reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    RESTRICT        reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    ENUM            reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    STRUCT          reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNION           reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)


state 359

    (90) struct_declarator_list -> struct_declarator_list , . struct_declarator
    (91) struct_declarator -> . declarator
    (92) struct_declarator -> . : constant_expression
    (93) struct_declarator -> . declarator : constant_expression
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    :               shift and go to state 231
    *               shift and go to state 38
    (               shift and go to state 175
    ID              shift and go to state 42

    struct_declarator              shift and go to state 452
    declarator                     shift and go to state 230
    pointer                        shift and go to state 174
    direct_declarator              shift and go to state 44
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 176
    identifier                     shift and go to state 177

state 360

    (93) struct_declarator -> declarator : . constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    constant_expression            shift and go to state 453
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 361

    (92) struct_declarator -> : constant_expression .

    ;               reduce using rule 92 (struct_declarator -> : constant_expression .)
    ,               reduce using rule 92 (struct_declarator -> : constant_expression .)


state 362

    (87) specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts .

    :               reduce using rule 87 (specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts .)
    *               reduce using rule 87 (specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts .)
    (               reduce using rule 87 (specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts .)
    ID              reduce using rule 87 (specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts .)
    )               reduce using rule 87 (specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts .)


state 363

    (68) enum_specifier -> ENUM { enumerator_list , } .

    TYPEDEF         reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    EXTERN          reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    STATIC          reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    AUTO            reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    REGISTER        reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    CONST           reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    VOLATILE        reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    RESTRICT        reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    ;               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    *               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    (               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    ID              reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    [               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    ,               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    =               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    )               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    :               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)


state 364

    (72) enumerator_list -> enumerator_list , enumerator .

    }               reduce using rule 72 (enumerator_list -> enumerator_list , enumerator .)
    ,               reduce using rule 72 (enumerator_list -> enumerator_list , enumerator .)


state 365

    (74) enumerator -> identifier = constant_expression .

    }               reduce using rule 74 (enumerator -> identifier = constant_expression .)
    ,               reduce using rule 74 (enumerator -> identifier = constant_expression .)


state 366

    (67) enum_specifier -> ENUM identifier { enumerator_list } .

    TYPEDEF         reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    EXTERN          reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    STATIC          reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    AUTO            reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    REGISTER        reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    CONST           reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    VOLATILE        reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    RESTRICT        reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    ;               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    *               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    (               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    ID              reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    [               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    ,               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    =               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    )               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    :               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)


state 367

    (69) enum_specifier -> ENUM identifier { enumerator_list , . }
    (72) enumerator_list -> enumerator_list , . enumerator
    (73) enumerator -> . identifier
    (74) enumerator -> . identifier = constant_expression
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    }               shift and go to state 454
    (               shift and go to state 69
    ID              shift and go to state 42

    identifier                     shift and go to state 115
    enumerator                     shift and go to state 364

state 368

    (262) postfix_expression_v -> identifier ( ) .

    [               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    .               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    PTR             reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    =               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    AO_MUL          reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    AO_DIV          reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    AO_MOD          reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    AO_PLUS         reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    AO_SUB          reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    AO_SL           reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    AO_SR           reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    AO_AND          reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    AO_XOR          reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    AO_OR           reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    *               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    /               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    %               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    +               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    -               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    SHIFT_LEFT      reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    SHIFT_RIGHT     reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    <               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    >               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    LE              reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    GE              reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    EQUAL           reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    NE              reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    &               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    ^               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    |               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    AND             reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    ?               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    OR              reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    ;               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    ,               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    )               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    }               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)
    :               reduce using rule 262 (postfix_expression_v -> identifier ( ) .)


state 369

    (263) postfix_expression_v -> identifier ( argument_expression_list . )
    (306) argument_expression_list -> argument_expression_list . , assignment_expression

    )               shift and go to state 455
    ,               shift and go to state 456


state 370

    (305) argument_expression_list -> assignment_expression .

    )               reduce using rule 305 (argument_expression_list -> assignment_expression .)
    ,               reduce using rule 305 (argument_expression_list -> assignment_expression .)


state 371

    (199) expression_variable -> expression_variable , assignment_expression .

    ;               reduce using rule 199 (expression_variable -> expression_variable , assignment_expression .)
    ,               reduce using rule 199 (expression_variable -> expression_variable , assignment_expression .)
    )               reduce using rule 199 (expression_variable -> expression_variable , assignment_expression .)
    :               reduce using rule 199 (expression_variable -> expression_variable , assignment_expression .)


state 372

    (276) selection_statement -> IF ( expression_variable . ) statement ELSE statement
    (277) selection_statement -> IF ( expression_variable . ) statement
    (199) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 457
    ,               shift and go to state 244


state 373

    (269) postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .

    INC             reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    DEC             reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    [               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    .               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    PTR             reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    =               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_MUL          reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_DIV          reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_MOD          reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_PLUS         reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_SUB          reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_SL           reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_SR           reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_AND          reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_XOR          reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_OR           reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    *               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    /               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    %               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    +               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    -               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    SHIFT_LEFT      reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    SHIFT_RIGHT     reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    <               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    >               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    LE              reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    GE              reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    EQUAL           reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    NE              reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    &               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    ^               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    |               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AND             reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    ?               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    OR              reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    ;               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    ,               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    )               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    }               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    :               reduce using rule 269 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)


state 374

    (245) cast_expression_v -> ( specifier_qualifier_list ) . cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    cast_expression_v              shift and go to state 458
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 375

    (275) primary_expression_v -> ( expression_variable ) .

    *               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    /               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    %               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    +               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    -               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    SHIFT_LEFT      reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    SHIFT_RIGHT     reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    <               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    >               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    LE              reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    GE              reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    EQUAL           reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    NE              reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    &               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    ^               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    |               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    AND             reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    ?               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    OR              reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    ;               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    ,               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    )               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    =               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    AO_MUL          reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    AO_DIV          reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    AO_MOD          reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    AO_PLUS         reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    AO_SUB          reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    AO_SL           reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    AO_SR           reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    AO_AND          reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    AO_XOR          reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    AO_OR           reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    }               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)
    :               reduce using rule 275 (primary_expression_v -> ( expression_variable ) .)


state 376

    (278) selection_statement -> SWITCH ( expression_variable . ) statement_switch
    (199) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 459
    ,               shift and go to state 244


state 377

    (294) iteration_statement -> WHILE ( expression_variable . ) statement
    (199) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 460
    ,               shift and go to state 244


state 378

    (295) iteration_statement -> DO statement WHILE . ( expression_variable ) ;

    (               shift and go to state 461


state 379

    (296) iteration_statement -> FOR ( expression_statement . expression_statement ) statement
    (297) iteration_statement -> FOR ( expression_statement . expression_statement expression_variable ) statement
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    ;               shift and go to state 124
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_statement           shift and go to state 462
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 380

    (298) iteration_statement -> FOR ( declaration . expression_statement ) statement
    (299) iteration_statement -> FOR ( declaration . expression_statement expression_variable ) statement
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    ;               shift and go to state 124
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_statement           shift and go to state 463
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 381

    (300) jump_statement -> GOTO ID ; .

    }               reduce using rule 300 (jump_statement -> GOTO ID ; .)
    {               reduce using rule 300 (jump_statement -> GOTO ID ; .)
    ;               reduce using rule 300 (jump_statement -> GOTO ID ; .)
    IF              reduce using rule 300 (jump_statement -> GOTO ID ; .)
    SWITCH          reduce using rule 300 (jump_statement -> GOTO ID ; .)
    WHILE           reduce using rule 300 (jump_statement -> GOTO ID ; .)
    DO              reduce using rule 300 (jump_statement -> GOTO ID ; .)
    FOR             reduce using rule 300 (jump_statement -> GOTO ID ; .)
    GOTO            reduce using rule 300 (jump_statement -> GOTO ID ; .)
    CONTINUE        reduce using rule 300 (jump_statement -> GOTO ID ; .)
    BREAK           reduce using rule 300 (jump_statement -> GOTO ID ; .)
    RETURN          reduce using rule 300 (jump_statement -> GOTO ID ; .)
    TYPEDEF         reduce using rule 300 (jump_statement -> GOTO ID ; .)
    EXTERN          reduce using rule 300 (jump_statement -> GOTO ID ; .)
    STATIC          reduce using rule 300 (jump_statement -> GOTO ID ; .)
    AUTO            reduce using rule 300 (jump_statement -> GOTO ID ; .)
    REGISTER        reduce using rule 300 (jump_statement -> GOTO ID ; .)
    VOID            reduce using rule 300 (jump_statement -> GOTO ID ; .)
    CHAR            reduce using rule 300 (jump_statement -> GOTO ID ; .)
    SHORT           reduce using rule 300 (jump_statement -> GOTO ID ; .)
    INT             reduce using rule 300 (jump_statement -> GOTO ID ; .)
    LONG            reduce using rule 300 (jump_statement -> GOTO ID ; .)
    FLOAT           reduce using rule 300 (jump_statement -> GOTO ID ; .)
    DOUBLE          reduce using rule 300 (jump_statement -> GOTO ID ; .)
    SIGNED          reduce using rule 300 (jump_statement -> GOTO ID ; .)
    UNSIGNED        reduce using rule 300 (jump_statement -> GOTO ID ; .)
    BOOL            reduce using rule 300 (jump_statement -> GOTO ID ; .)
    CONST           reduce using rule 300 (jump_statement -> GOTO ID ; .)
    VOLATILE        reduce using rule 300 (jump_statement -> GOTO ID ; .)
    RESTRICT        reduce using rule 300 (jump_statement -> GOTO ID ; .)
    (               reduce using rule 300 (jump_statement -> GOTO ID ; .)
    ID              reduce using rule 300 (jump_statement -> GOTO ID ; .)
    ENUM            reduce using rule 300 (jump_statement -> GOTO ID ; .)
    STRUCT          reduce using rule 300 (jump_statement -> GOTO ID ; .)
    UNION           reduce using rule 300 (jump_statement -> GOTO ID ; .)
    INC             reduce using rule 300 (jump_statement -> GOTO ID ; .)
    DEC             reduce using rule 300 (jump_statement -> GOTO ID ; .)
    SIZEOF          reduce using rule 300 (jump_statement -> GOTO ID ; .)
    &               reduce using rule 300 (jump_statement -> GOTO ID ; .)
    *               reduce using rule 300 (jump_statement -> GOTO ID ; .)
    +               reduce using rule 300 (jump_statement -> GOTO ID ; .)
    -               reduce using rule 300 (jump_statement -> GOTO ID ; .)
    ~               reduce using rule 300 (jump_statement -> GOTO ID ; .)
    !               reduce using rule 300 (jump_statement -> GOTO ID ; .)
    CONSTANCE       reduce using rule 300 (jump_statement -> GOTO ID ; .)
    STRING_LITERAL  reduce using rule 300 (jump_statement -> GOTO ID ; .)
    ELSE            reduce using rule 300 (jump_statement -> GOTO ID ; .)
    CASE            reduce using rule 300 (jump_statement -> GOTO ID ; .)
    DEFAULT         reduce using rule 300 (jump_statement -> GOTO ID ; .)


state 382

    (304) jump_statement -> RETURN expression_variable ; .

    }               reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    {               reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    ;               reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    IF              reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    SWITCH          reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    WHILE           reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    DO              reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    FOR             reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    GOTO            reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    CONTINUE        reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    BREAK           reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    RETURN          reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    TYPEDEF         reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    EXTERN          reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    STATIC          reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    AUTO            reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    REGISTER        reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    VOID            reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    CHAR            reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    SHORT           reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    INT             reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    LONG            reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    FLOAT           reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    DOUBLE          reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    SIGNED          reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    UNSIGNED        reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    BOOL            reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    CONST           reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    VOLATILE        reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    RESTRICT        reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    (               reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    ID              reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    ENUM            reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    STRUCT          reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    UNION           reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    INC             reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    DEC             reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    SIZEOF          reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    &               reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    *               reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    +               reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    -               reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    ~               reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    !               reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    CONSTANCE       reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    STRING_LITERAL  reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    ELSE            reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    CASE            reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)
    DEFAULT         reduce using rule 304 (jump_statement -> RETURN expression_variable ; .)


state 383

    (201) assignment_expression -> unary_expression_v assignment_operator assignment_expression .

    ;               reduce using rule 201 (assignment_expression -> unary_expression_v assignment_operator assignment_expression .)
    ,               reduce using rule 201 (assignment_expression -> unary_expression_v assignment_operator assignment_expression .)
    )               reduce using rule 201 (assignment_expression -> unary_expression_v assignment_operator assignment_expression .)
    }               reduce using rule 201 (assignment_expression -> unary_expression_v assignment_operator assignment_expression .)
    :               reduce using rule 201 (assignment_expression -> unary_expression_v assignment_operator assignment_expression .)


state 384

    (214) conditional_expression_v -> logical_or_expression_v ? expression_variable . : conditional_expression_v
    (199) expression_variable -> expression_variable . , assignment_expression

    :               shift and go to state 464
    ,               shift and go to state 244


state 385

    (216) logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .
    (218) logical_and_expression_v -> logical_and_expression_v . AND inclusive_or_expression_v

    ?               reduce using rule 216 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    OR              reduce using rule 216 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    ;               reduce using rule 216 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    ,               reduce using rule 216 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    )               reduce using rule 216 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    }               reduce using rule 216 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    :               reduce using rule 216 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    AND             shift and go to state 286


state 386

    (261) postfix_expression_v -> postfix_expression_v [ expression . ]
    (162) expression -> expression . , constant_expression

    ]               shift and go to state 465
    ,               shift and go to state 433


state 387

    (264) postfix_expression_v -> postfix_expression_v . ID .

    [               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    .               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    PTR             reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    =               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_MUL          reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_DIV          reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_MOD          reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_PLUS         reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_SUB          reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_SL           reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_SR           reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_AND          reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_XOR          reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_OR           reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    *               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    /               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    %               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    +               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    -               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    SHIFT_LEFT      reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    SHIFT_RIGHT     reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    <               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    >               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    LE              reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    GE              reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    EQUAL           reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    NE              reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    &               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    ^               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    |               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    AND             reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    ?               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    OR              reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    ;               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    ,               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    )               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    }               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)
    :               reduce using rule 264 (postfix_expression_v -> postfix_expression_v . ID .)


state 388

    (265) postfix_expression_v -> postfix_expression_v PTR ID .

    [               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    .               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    PTR             reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    =               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_MUL          reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_DIV          reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_MOD          reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_PLUS         reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_SUB          reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_SL           reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_SR           reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_AND          reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_XOR          reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_OR           reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    *               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    /               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    %               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    +               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    -               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    SHIFT_LEFT      reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    SHIFT_RIGHT     reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    <               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    >               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    LE              reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    GE              reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    EQUAL           reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    NE              reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    &               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    ^               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    |               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AND             reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    ?               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    OR              reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    ;               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    ,               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    )               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    }               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)
    :               reduce using rule 265 (postfix_expression_v -> postfix_expression_v PTR ID .)


state 389

    (269) postfix_expression_v_no_func -> ( postfix_expression_v_no_func . )
    (270) postfix_expression_v_no_func -> postfix_expression_v_no_func . [ expression ]
    (271) postfix_expression_v_no_func -> postfix_expression_v_no_func . . ID
    (272) postfix_expression_v_no_func -> postfix_expression_v_no_func . PTR ID

    )               shift and go to state 373
    [               shift and go to state 289
    .               shift and go to state 290
    PTR             shift and go to state 291


state 390

    (175) identifier -> ( identifier . )
    (268) postfix_expression_v_no_func -> identifier .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 181
    [               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    .               reduce using rule 268 (postfix_expression_v_no_func -> identifier .)
    PTR             reduce using rule 268 (postfix_expression_v_no_func -> identifier .)

  ! )               [ reduce using rule 268 (postfix_expression_v_no_func -> identifier .) ]


state 391

    (248) unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list . )

    )               shift and go to state 466


state 392

    (218) logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .
    (220) inclusive_or_expression_v -> inclusive_or_expression_v . | exclusive_or_expression_v

    AND             reduce using rule 218 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    ?               reduce using rule 218 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    OR              reduce using rule 218 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    ;               reduce using rule 218 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    ,               reduce using rule 218 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    )               reduce using rule 218 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    }               reduce using rule 218 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    :               reduce using rule 218 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    |               shift and go to state 292


state 393

    (270) postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression . ]
    (162) expression -> expression . , constant_expression

    ]               shift and go to state 467
    ,               shift and go to state 433


state 394

    (271) postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .

    INC             reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    DEC             reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    [               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    .               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    PTR             reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    =               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_MUL          reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_DIV          reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_MOD          reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_PLUS         reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_SUB          reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_SL           reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_SR           reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_AND          reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_XOR          reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_OR           reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    *               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    /               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    %               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    +               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    -               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    SHIFT_LEFT      reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    SHIFT_RIGHT     reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    <               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    >               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    LE              reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    GE              reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    EQUAL           reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    NE              reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    &               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    ^               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    |               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AND             reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    ?               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    OR              reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    ;               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    ,               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    )               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    }               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    :               reduce using rule 271 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)


state 395

    (272) postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .

    INC             reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    DEC             reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    [               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    .               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    PTR             reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    =               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_MUL          reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_DIV          reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_MOD          reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_PLUS         reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_SUB          reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_SL           reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_SR           reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_AND          reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_XOR          reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_OR           reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    *               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    /               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    %               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    +               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    -               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    SHIFT_LEFT      reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    SHIFT_RIGHT     reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    <               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    >               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    LE              reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    GE              reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    EQUAL           reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    NE              reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    &               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    ^               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    |               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AND             reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    ?               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    OR              reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    ;               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    ,               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    )               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    }               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    :               reduce using rule 272 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)


state 396

    (220) inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .
    (222) exclusive_or_expression_v -> exclusive_or_expression_v . ^ and_expression_v

    |               reduce using rule 220 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    AND             reduce using rule 220 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    ?               reduce using rule 220 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    OR              reduce using rule 220 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    ;               reduce using rule 220 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    ,               reduce using rule 220 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    )               reduce using rule 220 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    }               reduce using rule 220 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    :               reduce using rule 220 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    ^               shift and go to state 293


state 397

    (222) exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .
    (224) and_expression_v -> and_expression_v . & equality_expression_v

    ^               reduce using rule 222 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    |               reduce using rule 222 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    AND             reduce using rule 222 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    ?               reduce using rule 222 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    OR              reduce using rule 222 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    ;               reduce using rule 222 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    ,               reduce using rule 222 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    )               reduce using rule 222 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    }               reduce using rule 222 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    :               reduce using rule 222 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    &               shift and go to state 294


state 398

    (224) and_expression_v -> and_expression_v & equality_expression_v .
    (226) equality_expression_v -> equality_expression_v . EQUAL relational_expression_v
    (227) equality_expression_v -> equality_expression_v . NE relational_expression_v

    &               reduce using rule 224 (and_expression_v -> and_expression_v & equality_expression_v .)
    ^               reduce using rule 224 (and_expression_v -> and_expression_v & equality_expression_v .)
    |               reduce using rule 224 (and_expression_v -> and_expression_v & equality_expression_v .)
    AND             reduce using rule 224 (and_expression_v -> and_expression_v & equality_expression_v .)
    ?               reduce using rule 224 (and_expression_v -> and_expression_v & equality_expression_v .)
    OR              reduce using rule 224 (and_expression_v -> and_expression_v & equality_expression_v .)
    ;               reduce using rule 224 (and_expression_v -> and_expression_v & equality_expression_v .)
    ,               reduce using rule 224 (and_expression_v -> and_expression_v & equality_expression_v .)
    )               reduce using rule 224 (and_expression_v -> and_expression_v & equality_expression_v .)
    }               reduce using rule 224 (and_expression_v -> and_expression_v & equality_expression_v .)
    :               reduce using rule 224 (and_expression_v -> and_expression_v & equality_expression_v .)
    EQUAL           shift and go to state 295
    NE              shift and go to state 296


state 399

    (226) equality_expression_v -> equality_expression_v EQUAL relational_expression_v .
    (229) relational_expression_v -> relational_expression_v . < shift_expression_v
    (230) relational_expression_v -> relational_expression_v . > shift_expression_v
    (231) relational_expression_v -> relational_expression_v . LE shift_expression_v
    (232) relational_expression_v -> relational_expression_v . GE shift_expression_v

    EQUAL           reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    NE              reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    &               reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    ^               reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    |               reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    AND             reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    ?               reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    OR              reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    ;               reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    ,               reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    )               reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    }               reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    :               reduce using rule 226 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    <               shift and go to state 297
    >               shift and go to state 298
    LE              shift and go to state 299
    GE              shift and go to state 300


state 400

    (227) equality_expression_v -> equality_expression_v NE relational_expression_v .
    (229) relational_expression_v -> relational_expression_v . < shift_expression_v
    (230) relational_expression_v -> relational_expression_v . > shift_expression_v
    (231) relational_expression_v -> relational_expression_v . LE shift_expression_v
    (232) relational_expression_v -> relational_expression_v . GE shift_expression_v

    EQUAL           reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    NE              reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    &               reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    ^               reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    |               reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    AND             reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    ?               reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    OR              reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    ;               reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    ,               reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    )               reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    }               reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    :               reduce using rule 227 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    <               shift and go to state 297
    >               shift and go to state 298
    LE              shift and go to state 299
    GE              shift and go to state 300


state 401

    (229) relational_expression_v -> relational_expression_v < shift_expression_v .
    (234) shift_expression_v -> shift_expression_v . SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> shift_expression_v . SHIFT_RIGHT additive_expression_v

    <               reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    >               reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    LE              reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    GE              reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    EQUAL           reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    NE              reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    &               reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    ^               reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    |               reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    AND             reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    ?               reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    OR              reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    ;               reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    ,               reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    )               reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    }               reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    :               reduce using rule 229 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    SHIFT_LEFT      shift and go to state 301
    SHIFT_RIGHT     shift and go to state 302


state 402

    (230) relational_expression_v -> relational_expression_v > shift_expression_v .
    (234) shift_expression_v -> shift_expression_v . SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> shift_expression_v . SHIFT_RIGHT additive_expression_v

    <               reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    >               reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    LE              reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    GE              reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    EQUAL           reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    NE              reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    &               reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    ^               reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    |               reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    AND             reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    ?               reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    OR              reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    ;               reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    ,               reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    )               reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    }               reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    :               reduce using rule 230 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    SHIFT_LEFT      shift and go to state 301
    SHIFT_RIGHT     shift and go to state 302


state 403

    (231) relational_expression_v -> relational_expression_v LE shift_expression_v .
    (234) shift_expression_v -> shift_expression_v . SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> shift_expression_v . SHIFT_RIGHT additive_expression_v

    <               reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    >               reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    LE              reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    GE              reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    EQUAL           reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    NE              reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    &               reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    ^               reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    |               reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    AND             reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    ?               reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    OR              reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    ;               reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    ,               reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    )               reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    }               reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    :               reduce using rule 231 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    SHIFT_LEFT      shift and go to state 301
    SHIFT_RIGHT     shift and go to state 302


state 404

    (232) relational_expression_v -> relational_expression_v GE shift_expression_v .
    (234) shift_expression_v -> shift_expression_v . SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> shift_expression_v . SHIFT_RIGHT additive_expression_v

    <               reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    >               reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    LE              reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    GE              reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    EQUAL           reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    NE              reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    &               reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    ^               reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    |               reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    AND             reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    ?               reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    OR              reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    ;               reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    ,               reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    )               reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    }               reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    :               reduce using rule 232 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    SHIFT_LEFT      shift and go to state 301
    SHIFT_RIGHT     shift and go to state 302


state 405

    (234) shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .
    (237) additive_expression_v -> additive_expression_v . + multiplicative_expression_v
    (238) additive_expression_v -> additive_expression_v . - multiplicative_expression_v

    SHIFT_LEFT      reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    SHIFT_RIGHT     reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    <               reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    >               reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    LE              reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    GE              reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    EQUAL           reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    NE              reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    &               reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    ^               reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    |               reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    AND             reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    ?               reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    OR              reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    ;               reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    ,               reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    )               reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    }               reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    :               reduce using rule 234 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    +               shift and go to state 303
    -               shift and go to state 304


state 406

    (235) shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .
    (237) additive_expression_v -> additive_expression_v . + multiplicative_expression_v
    (238) additive_expression_v -> additive_expression_v . - multiplicative_expression_v

    SHIFT_LEFT      reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    SHIFT_RIGHT     reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    <               reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    >               reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    LE              reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    GE              reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    EQUAL           reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    NE              reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    &               reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    ^               reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    |               reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    AND             reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    ?               reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    OR              reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    ;               reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    ,               reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    )               reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    }               reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    :               reduce using rule 235 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    +               shift and go to state 303
    -               shift and go to state 304


state 407

    (237) additive_expression_v -> additive_expression_v + multiplicative_expression_v .
    (240) multiplicative_expression_v -> multiplicative_expression_v . * cast_expression_v
    (241) multiplicative_expression_v -> multiplicative_expression_v . / cast_expression_v
    (242) multiplicative_expression_v -> multiplicative_expression_v . % cast_expression_v

    +               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    -               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    SHIFT_LEFT      reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    SHIFT_RIGHT     reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    <               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    >               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    LE              reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    GE              reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    EQUAL           reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    NE              reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    &               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    ^               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    |               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    AND             reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    ?               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    OR              reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    ;               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    ,               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    )               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    }               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    :               reduce using rule 237 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    *               shift and go to state 305
    /               shift and go to state 306
    %               shift and go to state 307


state 408

    (238) additive_expression_v -> additive_expression_v - multiplicative_expression_v .
    (240) multiplicative_expression_v -> multiplicative_expression_v . * cast_expression_v
    (241) multiplicative_expression_v -> multiplicative_expression_v . / cast_expression_v
    (242) multiplicative_expression_v -> multiplicative_expression_v . % cast_expression_v

    +               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    -               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    SHIFT_LEFT      reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    SHIFT_RIGHT     reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    <               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    >               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    LE              reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    GE              reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    EQUAL           reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    NE              reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    &               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    ^               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    |               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    AND             reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    ?               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    OR              reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    ;               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    ,               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    )               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    }               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    :               reduce using rule 238 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    *               shift and go to state 305
    /               shift and go to state 306
    %               shift and go to state 307


state 409

    (240) multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .

    *               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    /               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    %               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    +               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    -               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    SHIFT_LEFT      reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    SHIFT_RIGHT     reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    <               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    >               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    LE              reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    GE              reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    EQUAL           reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    NE              reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    &               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    ^               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    |               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    AND             reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    ?               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    OR              reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    ;               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    ,               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    )               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    }               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    :               reduce using rule 240 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)


state 410

    (241) multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .

    *               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    /               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    %               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    +               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    -               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    SHIFT_LEFT      reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    SHIFT_RIGHT     reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    <               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    >               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    LE              reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    GE              reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    EQUAL           reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    NE              reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    &               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    ^               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    |               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    AND             reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    ?               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    OR              reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    ;               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    ,               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    )               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    }               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    :               reduce using rule 241 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)


state 411

    (242) multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .

    *               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    /               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    %               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    +               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    -               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    SHIFT_LEFT      reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    SHIFT_RIGHT     reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    <               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    >               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    LE              reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    GE              reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    EQUAL           reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    NE              reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    &               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    ^               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    |               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    AND             reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    ?               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    OR              reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    ;               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    ,               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    )               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    }               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    :               reduce using rule 242 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)


state 412

    (119) conditional_expression -> logical_or_expression ? expression . : conditional_expression
    (162) expression -> expression . , constant_expression

    :               shift and go to state 468
    ,               shift and go to state 433


state 413

    (121) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (123) logical_and_expression -> logical_and_expression . AND inclusive_or_expression

    ?               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ]               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    )               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ,               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ;               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    }               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    :               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 315


state 414

    (123) logical_and_expression -> logical_and_expression AND inclusive_or_expression .
    (125) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND             reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    ?               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    OR              reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    ]               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    )               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    ,               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    ;               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    }               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    :               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    |               shift and go to state 316


state 415

    (125) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (127) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AND             reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ?               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    OR              reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ]               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ;               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    }               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 317


state 416

    (127) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (129) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AND             reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ?               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    OR              reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ]               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ;               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    }               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 318


state 417

    (129) and_expression -> and_expression & equality_expression .
    (131) equality_expression -> equality_expression . EQUAL relational_expression
    (132) equality_expression -> equality_expression . NE relational_expression

    &               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    AND             reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    ?               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    OR              reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    }               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    EQUAL           shift and go to state 319
    NE              shift and go to state 320


state 418

    (131) equality_expression -> equality_expression EQUAL relational_expression .
    (134) relational_expression -> relational_expression . < shift_expression
    (135) relational_expression -> relational_expression . > shift_expression
    (136) relational_expression -> relational_expression . LE shift_expression
    (137) relational_expression -> relational_expression . GE shift_expression

    EQUAL           reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    NE              reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    &               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    ^               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    |               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    ?               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    ]               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    )               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    ,               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    ;               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    }               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    :               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    <               shift and go to state 321
    >               shift and go to state 322
    LE              shift and go to state 323
    GE              shift and go to state 324


state 419

    (132) equality_expression -> equality_expression NE relational_expression .
    (134) relational_expression -> relational_expression . < shift_expression
    (135) relational_expression -> relational_expression . > shift_expression
    (136) relational_expression -> relational_expression . LE shift_expression
    (137) relational_expression -> relational_expression . GE shift_expression

    EQUAL           reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    &               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    ^               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    |               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    ?               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    ]               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    )               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    ,               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    ;               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    }               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    :               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    <               shift and go to state 321
    >               shift and go to state 322
    LE              shift and go to state 323
    GE              shift and go to state 324


state 420

    (134) relational_expression -> relational_expression < shift_expression .
    (139) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (140) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    <               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    >               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    LE              reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    GE              reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    EQUAL           reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    NE              reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    &               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    ^               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    |               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    AND             reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    ?               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    OR              reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    ]               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    )               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    ,               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    ;               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    }               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    :               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    SHIFT_LEFT      shift and go to state 325
    SHIFT_RIGHT     shift and go to state 326


state 421

    (135) relational_expression -> relational_expression > shift_expression .
    (139) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (140) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    <               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    >               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    LE              reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    GE              reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    EQUAL           reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    NE              reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    &               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    ^               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    |               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    AND             reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    ?               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    OR              reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    ]               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    )               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    ,               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    ;               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    }               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    :               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    SHIFT_LEFT      shift and go to state 325
    SHIFT_RIGHT     shift and go to state 326


state 422

    (136) relational_expression -> relational_expression LE shift_expression .
    (139) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (140) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    <               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    >               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    EQUAL           reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    NE              reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    &               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    ^               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    |               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    ?               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    OR              reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    ]               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    )               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    ,               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    ;               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    }               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    :               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    SHIFT_LEFT      shift and go to state 325
    SHIFT_RIGHT     shift and go to state 326


state 423

    (137) relational_expression -> relational_expression GE shift_expression .
    (139) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (140) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    <               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    >               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    EQUAL           reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    NE              reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    &               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    ^               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    |               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    ?               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    OR              reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    ]               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    )               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    ,               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    ;               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    }               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    :               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    SHIFT_LEFT      shift and go to state 325
    SHIFT_RIGHT     shift and go to state 326


state 424

    (139) shift_expression -> shift_expression SHIFT_LEFT additive_expression .
    (142) additive_expression -> additive_expression . + multiplicative_expression
    (143) additive_expression -> additive_expression . - multiplicative_expression

    SHIFT_LEFT      reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    SHIFT_RIGHT     reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    <               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    >               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    LE              reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    GE              reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    EQUAL           reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    NE              reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    &               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    ^               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    |               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    AND             reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    ?               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    OR              reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    ]               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    )               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    ,               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    ;               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    }               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    :               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    +               shift and go to state 327
    -               shift and go to state 328


state 425

    (140) shift_expression -> shift_expression SHIFT_RIGHT additive_expression .
    (142) additive_expression -> additive_expression . + multiplicative_expression
    (143) additive_expression -> additive_expression . - multiplicative_expression

    SHIFT_LEFT      reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    SHIFT_RIGHT     reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    <               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    >               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    LE              reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    GE              reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    EQUAL           reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    NE              reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    &               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    ^               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    |               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    AND             reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    ?               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    OR              reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    ]               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    )               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    ,               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    ;               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    }               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    :               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    +               shift and go to state 327
    -               shift and go to state 328


state 426

    (142) additive_expression -> additive_expression + multiplicative_expression .
    (145) multiplicative_expression -> multiplicative_expression . * cast_expression
    (146) multiplicative_expression -> multiplicative_expression . / cast_expression
    (147) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    SHIFT_LEFT      reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    SHIFT_RIGHT     reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    LE              reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    GE              reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    EQUAL           reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    NE              reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    AND             reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    ?               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    OR              reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    }               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 329
    /               shift and go to state 330
    %               shift and go to state 331


state 427

    (143) additive_expression -> additive_expression - multiplicative_expression .
    (145) multiplicative_expression -> multiplicative_expression . * cast_expression
    (146) multiplicative_expression -> multiplicative_expression . / cast_expression
    (147) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    SHIFT_LEFT      reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    SHIFT_RIGHT     reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    LE              reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    GE              reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    EQUAL           reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    NE              reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    AND             reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    ?               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    OR              reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    }               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 329
    /               shift and go to state 330
    %               shift and go to state 331


state 428

    (145) multiplicative_expression -> multiplicative_expression * cast_expression .

    *               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    %               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SHIFT_LEFT      reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SHIFT_RIGHT     reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LE              reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    GE              reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQUAL           reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    NE              reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    &               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ^               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    |               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    AND             reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ?               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OR              reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ]               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    }               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    :               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 429

    (146) multiplicative_expression -> multiplicative_expression / cast_expression .

    *               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    %               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SHIFT_LEFT      reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SHIFT_RIGHT     reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LE              reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    GE              reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQUAL           reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    NE              reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    &               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ^               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    |               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    AND             reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ?               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OR              reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ]               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    }               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    :               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 430

    (147) multiplicative_expression -> multiplicative_expression % cast_expression .

    *               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    %               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SHIFT_LEFT      reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SHIFT_RIGHT     reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LE              reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    GE              reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQUAL           reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    NE              reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    &               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ^               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    |               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    AND             reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ?               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OR              reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ]               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    }               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    :               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 431

    (149) cast_expression -> ( specifier_qualifier_list ) . cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    cast_expression                shift and go to state 469
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 432

    (160) primary_expression -> ( expression ) .

    *               reduce using rule 160 (primary_expression -> ( expression ) .)
    /               reduce using rule 160 (primary_expression -> ( expression ) .)
    %               reduce using rule 160 (primary_expression -> ( expression ) .)
    +               reduce using rule 160 (primary_expression -> ( expression ) .)
    -               reduce using rule 160 (primary_expression -> ( expression ) .)
    SHIFT_LEFT      reduce using rule 160 (primary_expression -> ( expression ) .)
    SHIFT_RIGHT     reduce using rule 160 (primary_expression -> ( expression ) .)
    <               reduce using rule 160 (primary_expression -> ( expression ) .)
    >               reduce using rule 160 (primary_expression -> ( expression ) .)
    LE              reduce using rule 160 (primary_expression -> ( expression ) .)
    GE              reduce using rule 160 (primary_expression -> ( expression ) .)
    EQUAL           reduce using rule 160 (primary_expression -> ( expression ) .)
    NE              reduce using rule 160 (primary_expression -> ( expression ) .)
    &               reduce using rule 160 (primary_expression -> ( expression ) .)
    ^               reduce using rule 160 (primary_expression -> ( expression ) .)
    |               reduce using rule 160 (primary_expression -> ( expression ) .)
    AND             reduce using rule 160 (primary_expression -> ( expression ) .)
    ?               reduce using rule 160 (primary_expression -> ( expression ) .)
    OR              reduce using rule 160 (primary_expression -> ( expression ) .)
    ]               reduce using rule 160 (primary_expression -> ( expression ) .)
    )               reduce using rule 160 (primary_expression -> ( expression ) .)
    ,               reduce using rule 160 (primary_expression -> ( expression ) .)
    ;               reduce using rule 160 (primary_expression -> ( expression ) .)
    }               reduce using rule 160 (primary_expression -> ( expression ) .)
    :               reduce using rule 160 (primary_expression -> ( expression ) .)


state 433

    (162) expression -> expression , . constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    constant_expression            shift and go to state 470
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 434

    (153) unary_expression -> SIZEOF ( specifier_qualifier_list . )

    )               shift and go to state 471


state 435

    (113) parameter_list -> parameter_declaration , parameter_list .

    )               reduce using rule 113 (parameter_list -> parameter_declaration , parameter_list .)


state 436

    (180) parameter_list_definition -> parameter_declaration = constant_expression . , parameter_list_definition
    (181) parameter_list_definition -> parameter_declaration = constant_expression .

    ,               shift and go to state 472
    )               reduce using rule 181 (parameter_list_definition -> parameter_declaration = constant_expression .)


state 437

    (165) abstract_declarator -> pointer direct_abstract_declarator .
    (169) direct_abstract_declarator -> direct_abstract_declarator . [ constant_expression ]

    ,               reduce using rule 165 (abstract_declarator -> pointer direct_abstract_declarator .)
    =               reduce using rule 165 (abstract_declarator -> pointer direct_abstract_declarator .)
    )               reduce using rule 165 (abstract_declarator -> pointer direct_abstract_declarator .)
    [               shift and go to state 438


state 438

    (169) direct_abstract_declarator -> direct_abstract_declarator [ . constant_expression ]
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    constant_expression            shift and go to state 473
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 439

    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (173) direct_function_declarator -> ( . direct_function_declarator )
    (177) parameter_type_list_definition -> ( . )
    (178) parameter_type_list_definition -> ( . parameter_type_list_definition )
    (179) parameter_type_list_definition -> ( . parameter_list )
    (175) identifier -> ( . identifier )
    (103) direct_declarator -> ( . declarator )
    (166) direct_abstract_declarator -> ( . abstract_declarator )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (177) parameter_type_list_definition -> . ( )
    (178) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (179) parameter_type_list_definition -> . ( parameter_list )
    (111) parameter_list -> . parameter_list_definition
    (112) parameter_list -> . parameter_declaration
    (113) parameter_list -> . parameter_declaration , parameter_list
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (163) abstract_declarator -> . pointer
    (164) abstract_declarator -> . direct_abstract_declarator
    (165) abstract_declarator -> . pointer direct_abstract_declarator
    (180) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (181) parameter_list_definition -> . parameter_declaration = constant_expression
    (182) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (166) direct_abstract_declarator -> . ( abstract_declarator )
    (167) direct_abstract_declarator -> . [ ]
    (168) direct_abstract_declarator -> . [ constant_expression ]
    (169) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (170) direct_abstract_declarator -> . parameter_type_list_definition
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    )               shift and go to state 211
    *               shift and go to state 38
    (               shift and go to state 439
    ID              shift and go to state 42
    ELLIPSIS        shift and go to state 216
    [               shift and go to state 347
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    pointer                        shift and go to state 441
    direct_declarator_forlist      shift and go to state 87
    direct_function_declarator     shift and go to state 83
    parameter_type_list_definition shift and go to state 442
    parameter_list                 shift and go to state 213
    identifier                     shift and go to state 309
    declarator                     shift and go to state 85
    abstract_declarator            shift and go to state 440
    parameter_list_definition      shift and go to state 214
    parameter_declaration          shift and go to state 215
    direct_declarator              shift and go to state 44
    direct_abstract_declarator     shift and go to state 345
    declaration_specifiers         shift and go to state 217
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 440

    (166) direct_abstract_declarator -> ( abstract_declarator . )

    )               shift and go to state 474


state 441

    (106) direct_declarator_forlist -> ( pointer . direct_declarator_forlist )
    (94) declarator -> pointer . direct_declarator
    (163) abstract_declarator -> pointer .
    (165) abstract_declarator -> pointer . direct_abstract_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (166) direct_abstract_declarator -> . ( abstract_declarator )
    (167) direct_abstract_declarator -> . [ ]
    (168) direct_abstract_declarator -> . [ constant_expression ]
    (169) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (170) direct_abstract_declarator -> . parameter_type_list_definition
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (177) parameter_type_list_definition -> . ( )
    (178) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (179) parameter_type_list_definition -> . ( parameter_list )

    )               reduce using rule 163 (abstract_declarator -> pointer .)
    (               shift and go to state 475
    [               shift and go to state 347
    ID              shift and go to state 42

    direct_declarator_forlist      shift and go to state 184
    direct_declarator              shift and go to state 73
    direct_abstract_declarator     shift and go to state 437
    identifier                     shift and go to state 177
    direct_function_declarator     shift and go to state 176
    parameter_type_list_definition shift and go to state 348

state 442

    (178) parameter_type_list_definition -> ( parameter_type_list_definition . )
    (170) direct_abstract_declarator -> parameter_type_list_definition .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 338
    [               reduce using rule 170 (direct_abstract_declarator -> parameter_type_list_definition .)

  ! )               [ reduce using rule 170 (direct_abstract_declarator -> parameter_type_list_definition .) ]


state 443

    (167) direct_abstract_declarator -> [ ] .

    [               reduce using rule 167 (direct_abstract_declarator -> [ ] .)
    ,               reduce using rule 167 (direct_abstract_declarator -> [ ] .)
    =               reduce using rule 167 (direct_abstract_declarator -> [ ] .)
    )               reduce using rule 167 (direct_abstract_declarator -> [ ] .)


state 444

    (168) direct_abstract_declarator -> [ constant_expression . ]

    ]               shift and go to state 476


state 445

    (312) initializer -> { initializer_list } .

    ;               reduce using rule 312 (initializer -> { initializer_list } .)
    ,               reduce using rule 312 (initializer -> { initializer_list } .)
    }               reduce using rule 312 (initializer -> { initializer_list } .)


state 446

    (313) initializer -> { initializer_list , . }
    (309) initializer_list -> initializer_list , . initializer
    (310) initializer_list -> initializer_list , . designation initializer
    (311) initializer -> . assignment_expression
    (312) initializer -> . { initializer_list }
    (313) initializer -> . { initializer_list , }
    (314) designation -> . designator_list =
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (315) designator_list -> . designator
    (316) designator_list -> . designator_list designator
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (317) designator -> . [ constant_expression ]
    (318) designator -> . . ID
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 477
    {               shift and go to state 220
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    [               shift and go to state 354
    .               shift and go to state 355
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    initializer                    shift and go to state 478
    designation                    shift and go to state 479
    assignment_expression          shift and go to state 219
    designator_list                shift and go to state 352
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    designator                     shift and go to state 353
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 447

    (308) initializer_list -> designation initializer .

    }               reduce using rule 308 (initializer_list -> designation initializer .)
    ,               reduce using rule 308 (initializer_list -> designation initializer .)


state 448

    (314) designation -> designator_list = .

    {               reduce using rule 314 (designation -> designator_list = .)
    INC             reduce using rule 314 (designation -> designator_list = .)
    DEC             reduce using rule 314 (designation -> designator_list = .)
    SIZEOF          reduce using rule 314 (designation -> designator_list = .)
    &               reduce using rule 314 (designation -> designator_list = .)
    *               reduce using rule 314 (designation -> designator_list = .)
    +               reduce using rule 314 (designation -> designator_list = .)
    -               reduce using rule 314 (designation -> designator_list = .)
    ~               reduce using rule 314 (designation -> designator_list = .)
    !               reduce using rule 314 (designation -> designator_list = .)
    (               reduce using rule 314 (designation -> designator_list = .)
    ID              reduce using rule 314 (designation -> designator_list = .)
    CONSTANCE       reduce using rule 314 (designation -> designator_list = .)
    STRING_LITERAL  reduce using rule 314 (designation -> designator_list = .)


state 449

    (316) designator_list -> designator_list designator .

    =               reduce using rule 316 (designator_list -> designator_list designator .)
    [               reduce using rule 316 (designator_list -> designator_list designator .)
    .               reduce using rule 316 (designator_list -> designator_list designator .)


state 450

    (317) designator -> [ constant_expression . ]

    ]               shift and go to state 480


state 451

    (318) designator -> . ID .

    =               reduce using rule 318 (designator -> . ID .)
    [               reduce using rule 318 (designator -> . ID .)
    .               reduce using rule 318 (designator -> . ID .)


state 452

    (90) struct_declarator_list -> struct_declarator_list , struct_declarator .

    ;               reduce using rule 90 (struct_declarator_list -> struct_declarator_list , struct_declarator .)
    ,               reduce using rule 90 (struct_declarator_list -> struct_declarator_list , struct_declarator .)


state 453

    (93) struct_declarator -> declarator : constant_expression .

    ;               reduce using rule 93 (struct_declarator -> declarator : constant_expression .)
    ,               reduce using rule 93 (struct_declarator -> declarator : constant_expression .)


state 454

    (69) enum_specifier -> ENUM identifier { enumerator_list , } .

    TYPEDEF         reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    EXTERN          reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    STATIC          reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    AUTO            reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    REGISTER        reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    CONST           reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    VOLATILE        reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    RESTRICT        reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    ;               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    *               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    (               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    ID              reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    [               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    ,               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    =               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    )               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    :               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)


state 455

    (263) postfix_expression_v -> identifier ( argument_expression_list ) .

    [               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    .               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    PTR             reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    =               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_MUL          reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_DIV          reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_MOD          reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_PLUS         reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_SUB          reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_SL           reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_SR           reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_AND          reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_XOR          reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_OR           reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    *               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    /               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    %               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    +               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    -               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    SHIFT_LEFT      reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    SHIFT_RIGHT     reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    <               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    >               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    LE              reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    GE              reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    EQUAL           reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    NE              reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    &               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    ^               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    |               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AND             reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    ?               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    OR              reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    ;               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    ,               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    )               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    }               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    :               reduce using rule 263 (postfix_expression_v -> identifier ( argument_expression_list ) .)


state 456

    (306) argument_expression_list -> argument_expression_list , . assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    assignment_expression          shift and go to state 481
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 457

    (276) selection_statement -> IF ( expression_variable ) . statement ELSE statement
    (277) selection_statement -> IF ( expression_variable ) . statement
    (189) statement -> . labeled_statement
    (190) statement -> . compound_statement
    (191) statement -> . expression_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) labeled_statement -> . identifier :
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_variable            shift and go to state 132
    statement                      shift and go to state 482
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 458

    (245) cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .

    *               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    /               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    %               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    +               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    -               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    SHIFT_LEFT      reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    SHIFT_RIGHT     reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    <               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    >               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    LE              reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    GE              reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    EQUAL           reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    NE              reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    &               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    ^               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    |               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    AND             reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    ?               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    OR              reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    ;               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    ,               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    )               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    =               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    AO_MUL          reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    AO_DIV          reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    AO_MOD          reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    AO_PLUS         reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    AO_SUB          reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    AO_SL           reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    AO_SR           reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    AO_AND          reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    AO_XOR          reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    AO_OR           reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    }               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)
    :               reduce using rule 245 (cast_expression_v -> ( specifier_qualifier_list ) cast_expression_v .)


state 459

    (278) selection_statement -> SWITCH ( expression_variable ) . statement_switch
    (285) statement_switch -> . labeled_statement_switch
    (286) statement_switch -> . compound_statement_switch
    (287) statement_switch -> . expression_statement
    (288) statement_switch -> . selection_statement
    (289) statement_switch -> . iteration_statement
    (290) statement_switch -> . jump_statement
    (291) labeled_statement_switch -> . ID :
    (292) labeled_statement_switch -> . CASE constant_expression : statement
    (293) labeled_statement_switch -> . DEFAULT : statement
    (279) compound_statement_switch -> . { }
    (280) compound_statement_switch -> . { block_item_list_switch }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    ID              shift and go to state 490
    CASE            shift and go to state 491
    DEFAULT         shift and go to state 492
    {               shift and go to state 493
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_variable            shift and go to state 132
    statement_switch               shift and go to state 483
    labeled_statement_switch       shift and go to state 484
    compound_statement_switch      shift and go to state 485
    expression_statement           shift and go to state 486
    selection_statement            shift and go to state 487
    iteration_statement            shift and go to state 488
    jump_statement                 shift and go to state 489
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 460

    (294) iteration_statement -> WHILE ( expression_variable ) . statement
    (189) statement -> . labeled_statement
    (190) statement -> . compound_statement
    (191) statement -> . expression_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) labeled_statement -> . identifier :
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_variable            shift and go to state 132
    statement                      shift and go to state 494
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 461

    (295) iteration_statement -> DO statement WHILE ( . expression_variable ) ;
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_variable            shift and go to state 495
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 462

    (296) iteration_statement -> FOR ( expression_statement expression_statement . ) statement
    (297) iteration_statement -> FOR ( expression_statement expression_statement . expression_variable ) statement
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    )               shift and go to state 496
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_variable            shift and go to state 497
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 463

    (298) iteration_statement -> FOR ( declaration expression_statement . ) statement
    (299) iteration_statement -> FOR ( declaration expression_statement . expression_variable ) statement
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    )               shift and go to state 498
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_variable            shift and go to state 499
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 464

    (214) conditional_expression_v -> logical_or_expression_v ? expression_variable : . conditional_expression_v
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID

    (               shift and go to state 282
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172
    ID              shift and go to state 42

    logical_or_expression_v        shift and go to state 146
    conditional_expression_v       shift and go to state 500
    logical_and_expression_v       shift and go to state 153
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    cast_expression_v              shift and go to state 151
    unary_expression_v             shift and go to state 281
    unary_expression_v_constance   shift and go to state 169
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    primary_expression_v           shift and go to state 170
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221

state 465

    (261) postfix_expression_v -> postfix_expression_v [ expression ] .

    [               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    .               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    PTR             reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    =               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_MUL          reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_DIV          reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_MOD          reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_PLUS         reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_SUB          reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_SL           reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_SR           reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_AND          reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_XOR          reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_OR           reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    *               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    /               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    %               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    +               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    -               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    SHIFT_LEFT      reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    SHIFT_RIGHT     reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    <               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    >               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    LE              reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    GE              reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    EQUAL           reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    NE              reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    &               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    ^               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    |               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AND             reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    ?               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    OR              reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    ;               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    ,               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    )               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    }               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    :               reduce using rule 261 (postfix_expression_v -> postfix_expression_v [ expression ] .)


state 466

    (248) unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .

    *               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    /               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    %               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    +               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    -               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    SHIFT_LEFT      reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    SHIFT_RIGHT     reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    <               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    >               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    LE              reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    GE              reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    EQUAL           reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    NE              reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    &               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    ^               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    |               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    AND             reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    ?               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    OR              reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    ;               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    ,               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    )               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    =               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    AO_MUL          reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    AO_DIV          reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    AO_MOD          reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    AO_PLUS         reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    AO_SUB          reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    AO_SL           reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    AO_SR           reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    AO_AND          reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    AO_XOR          reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    AO_OR           reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    }               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)
    :               reduce using rule 248 (unary_expression_v_constance -> SIZEOF ( specifier_qualifier_list ) .)


state 467

    (270) postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .

    INC             reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    DEC             reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    [               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    .               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    PTR             reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    =               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_MUL          reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_DIV          reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_MOD          reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_PLUS         reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_SUB          reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_SL           reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_SR           reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_AND          reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_XOR          reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_OR           reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    *               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    /               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    %               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    +               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    -               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    SHIFT_LEFT      reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    SHIFT_RIGHT     reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    <               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    >               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    LE              reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    GE              reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    EQUAL           reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    NE              reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    &               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    ^               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    |               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AND             reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    ?               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    OR              reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    ;               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    ,               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    )               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    }               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    :               reduce using rule 270 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)


state 468

    (119) conditional_expression -> logical_or_expression ? expression : . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    logical_or_expression          shift and go to state 189
    conditional_expression         shift and go to state 501
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 469

    (149) cast_expression -> ( specifier_qualifier_list ) cast_expression .

    *               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    /               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    %               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    +               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    -               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    SHIFT_LEFT      reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    SHIFT_RIGHT     reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    <               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    >               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    LE              reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    GE              reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    EQUAL           reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    NE              reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    &               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    ^               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    |               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    AND             reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    ?               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    OR              reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    ]               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    )               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    ,               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    ;               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    }               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)
    :               reduce using rule 149 (cast_expression -> ( specifier_qualifier_list ) cast_expression .)


state 470

    (162) expression -> expression , constant_expression .

    )               reduce using rule 162 (expression -> expression , constant_expression .)
    ,               reduce using rule 162 (expression -> expression , constant_expression .)
    ]               reduce using rule 162 (expression -> expression , constant_expression .)
    :               reduce using rule 162 (expression -> expression , constant_expression .)


state 471

    (153) unary_expression -> SIZEOF ( specifier_qualifier_list ) .

    *               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    /               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    %               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    +               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    -               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    SHIFT_LEFT      reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    SHIFT_RIGHT     reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    <               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    >               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    LE              reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    GE              reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    EQUAL           reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    NE              reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    &               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    ^               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    |               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    AND             reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    ?               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    OR              reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    ]               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    )               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    ,               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    ;               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    }               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)
    :               reduce using rule 153 (unary_expression -> SIZEOF ( specifier_qualifier_list ) .)


state 472

    (180) parameter_list_definition -> parameter_declaration = constant_expression , . parameter_list_definition
    (180) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (181) parameter_list_definition -> . parameter_declaration = constant_expression
    (182) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 216
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    parameter_declaration          shift and go to state 502
    parameter_list_definition      shift and go to state 503
    declaration_specifiers         shift and go to state 217
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 473

    (169) direct_abstract_declarator -> direct_abstract_declarator [ constant_expression . ]

    ]               shift and go to state 504


state 474

    (166) direct_abstract_declarator -> ( abstract_declarator ) .

    [               reduce using rule 166 (direct_abstract_declarator -> ( abstract_declarator ) .)
    ,               reduce using rule 166 (direct_abstract_declarator -> ( abstract_declarator ) .)
    =               reduce using rule 166 (direct_abstract_declarator -> ( abstract_declarator ) .)
    )               reduce using rule 166 (direct_abstract_declarator -> ( abstract_declarator ) .)


state 475

    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (103) direct_declarator -> ( . declarator )
    (166) direct_abstract_declarator -> ( . abstract_declarator )
    (175) identifier -> ( . identifier )
    (173) direct_function_declarator -> ( . direct_function_declarator )
    (177) parameter_type_list_definition -> ( . )
    (178) parameter_type_list_definition -> ( . parameter_type_list_definition )
    (179) parameter_type_list_definition -> ( . parameter_list )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (163) abstract_declarator -> . pointer
    (164) abstract_declarator -> . direct_abstract_declarator
    (165) abstract_declarator -> . pointer direct_abstract_declarator
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (177) parameter_type_list_definition -> . ( )
    (178) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (179) parameter_type_list_definition -> . ( parameter_list )
    (111) parameter_list -> . parameter_list_definition
    (112) parameter_list -> . parameter_declaration
    (113) parameter_list -> . parameter_declaration , parameter_list
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (166) direct_abstract_declarator -> . ( abstract_declarator )
    (167) direct_abstract_declarator -> . [ ]
    (168) direct_abstract_declarator -> . [ constant_expression ]
    (169) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (170) direct_abstract_declarator -> . parameter_type_list_definition
    (180) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (181) parameter_list_definition -> . parameter_declaration = constant_expression
    (182) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    )               shift and go to state 211
    *               shift and go to state 38
    (               shift and go to state 505
    ID              shift and go to state 42
    [               shift and go to state 347
    ELLIPSIS        shift and go to state 216
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    pointer                        shift and go to state 441
    direct_declarator_forlist      shift and go to state 87
    declarator                     shift and go to state 85
    abstract_declarator            shift and go to state 440
    identifier                     shift and go to state 309
    direct_function_declarator     shift and go to state 83
    parameter_type_list_definition shift and go to state 442
    parameter_list                 shift and go to state 213
    direct_declarator              shift and go to state 44
    direct_abstract_declarator     shift and go to state 345
    parameter_list_definition      shift and go to state 214
    parameter_declaration          shift and go to state 215
    declaration_specifiers         shift and go to state 217
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 476

    (168) direct_abstract_declarator -> [ constant_expression ] .

    [               reduce using rule 168 (direct_abstract_declarator -> [ constant_expression ] .)
    ,               reduce using rule 168 (direct_abstract_declarator -> [ constant_expression ] .)
    =               reduce using rule 168 (direct_abstract_declarator -> [ constant_expression ] .)
    )               reduce using rule 168 (direct_abstract_declarator -> [ constant_expression ] .)


state 477

    (313) initializer -> { initializer_list , } .

    ;               reduce using rule 313 (initializer -> { initializer_list , } .)
    ,               reduce using rule 313 (initializer -> { initializer_list , } .)
    }               reduce using rule 313 (initializer -> { initializer_list , } .)


state 478

    (309) initializer_list -> initializer_list , initializer .

    }               reduce using rule 309 (initializer_list -> initializer_list , initializer .)
    ,               reduce using rule 309 (initializer_list -> initializer_list , initializer .)


state 479

    (310) initializer_list -> initializer_list , designation . initializer
    (311) initializer -> . assignment_expression
    (312) initializer -> . { initializer_list }
    (313) initializer -> . { initializer_list , }
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 220
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    initializer                    shift and go to state 506
    assignment_expression          shift and go to state 219
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    identifier                     shift and go to state 221
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 480

    (317) designator -> [ constant_expression ] .

    =               reduce using rule 317 (designator -> [ constant_expression ] .)
    [               reduce using rule 317 (designator -> [ constant_expression ] .)
    .               reduce using rule 317 (designator -> [ constant_expression ] .)


state 481

    (306) argument_expression_list -> argument_expression_list , assignment_expression .

    )               reduce using rule 306 (argument_expression_list -> argument_expression_list , assignment_expression .)
    ,               reduce using rule 306 (argument_expression_list -> argument_expression_list , assignment_expression .)


state 482

    (276) selection_statement -> IF ( expression_variable ) statement . ELSE statement
    (277) selection_statement -> IF ( expression_variable ) statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 507
    }               reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    {               reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    ;               reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    IF              reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    SWITCH          reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    WHILE           reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    DO              reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    FOR             reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    GOTO            reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    CONTINUE        reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    BREAK           reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    RETURN          reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    TYPEDEF         reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    EXTERN          reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    STATIC          reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    AUTO            reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    REGISTER        reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    VOID            reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    CHAR            reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    SHORT           reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    INT             reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    LONG            reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    FLOAT           reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    DOUBLE          reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    SIGNED          reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    UNSIGNED        reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    BOOL            reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    CONST           reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    VOLATILE        reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    RESTRICT        reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    (               reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    ID              reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    ENUM            reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    STRUCT          reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    UNION           reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    INC             reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    DEC             reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    SIZEOF          reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    &               reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    *               reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    +               reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    -               reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    ~               reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    !               reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    CONSTANCE       reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    STRING_LITERAL  reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    CASE            reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)
    DEFAULT         reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .)

  ! ELSE            [ reduce using rule 277 (selection_statement -> IF ( expression_variable ) statement .) ]


state 483

    (278) selection_statement -> SWITCH ( expression_variable ) statement_switch .

    }               reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    {               reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    ;               reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    IF              reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    SWITCH          reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    WHILE           reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    DO              reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    FOR             reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    GOTO            reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    CONTINUE        reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    BREAK           reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    RETURN          reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    TYPEDEF         reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    EXTERN          reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    STATIC          reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    AUTO            reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    REGISTER        reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    VOID            reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    CHAR            reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    SHORT           reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    INT             reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    LONG            reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    FLOAT           reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    DOUBLE          reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    SIGNED          reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    UNSIGNED        reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    BOOL            reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    CONST           reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    VOLATILE        reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    RESTRICT        reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    (               reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    ID              reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    ENUM            reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    STRUCT          reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    UNION           reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    INC             reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    DEC             reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    SIZEOF          reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    &               reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    *               reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    +               reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    -               reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    ~               reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    !               reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    CONSTANCE       reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    STRING_LITERAL  reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    ELSE            reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    CASE            reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    DEFAULT         reduce using rule 278 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)


state 484

    (285) statement_switch -> labeled_statement_switch .

    ELSE            reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    }               reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    {               reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    ;               reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    IF              reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    SWITCH          reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    WHILE           reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    DO              reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    FOR             reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    GOTO            reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    CONTINUE        reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    BREAK           reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    RETURN          reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    TYPEDEF         reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    EXTERN          reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    STATIC          reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    AUTO            reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    REGISTER        reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    VOID            reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    CHAR            reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    SHORT           reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    INT             reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    LONG            reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    FLOAT           reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    DOUBLE          reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    SIGNED          reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    UNSIGNED        reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    BOOL            reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    CONST           reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    VOLATILE        reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    RESTRICT        reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    (               reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    ID              reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    ENUM            reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    STRUCT          reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    UNION           reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    INC             reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    DEC             reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    SIZEOF          reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    &               reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    *               reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    +               reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    -               reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    ~               reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    !               reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    CONSTANCE       reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    STRING_LITERAL  reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    CASE            reduce using rule 285 (statement_switch -> labeled_statement_switch .)
    DEFAULT         reduce using rule 285 (statement_switch -> labeled_statement_switch .)


state 485

    (286) statement_switch -> compound_statement_switch .

    ELSE            reduce using rule 286 (statement_switch -> compound_statement_switch .)
    }               reduce using rule 286 (statement_switch -> compound_statement_switch .)
    {               reduce using rule 286 (statement_switch -> compound_statement_switch .)
    ;               reduce using rule 286 (statement_switch -> compound_statement_switch .)
    IF              reduce using rule 286 (statement_switch -> compound_statement_switch .)
    SWITCH          reduce using rule 286 (statement_switch -> compound_statement_switch .)
    WHILE           reduce using rule 286 (statement_switch -> compound_statement_switch .)
    DO              reduce using rule 286 (statement_switch -> compound_statement_switch .)
    FOR             reduce using rule 286 (statement_switch -> compound_statement_switch .)
    GOTO            reduce using rule 286 (statement_switch -> compound_statement_switch .)
    CONTINUE        reduce using rule 286 (statement_switch -> compound_statement_switch .)
    BREAK           reduce using rule 286 (statement_switch -> compound_statement_switch .)
    RETURN          reduce using rule 286 (statement_switch -> compound_statement_switch .)
    TYPEDEF         reduce using rule 286 (statement_switch -> compound_statement_switch .)
    EXTERN          reduce using rule 286 (statement_switch -> compound_statement_switch .)
    STATIC          reduce using rule 286 (statement_switch -> compound_statement_switch .)
    AUTO            reduce using rule 286 (statement_switch -> compound_statement_switch .)
    REGISTER        reduce using rule 286 (statement_switch -> compound_statement_switch .)
    VOID            reduce using rule 286 (statement_switch -> compound_statement_switch .)
    CHAR            reduce using rule 286 (statement_switch -> compound_statement_switch .)
    SHORT           reduce using rule 286 (statement_switch -> compound_statement_switch .)
    INT             reduce using rule 286 (statement_switch -> compound_statement_switch .)
    LONG            reduce using rule 286 (statement_switch -> compound_statement_switch .)
    FLOAT           reduce using rule 286 (statement_switch -> compound_statement_switch .)
    DOUBLE          reduce using rule 286 (statement_switch -> compound_statement_switch .)
    SIGNED          reduce using rule 286 (statement_switch -> compound_statement_switch .)
    UNSIGNED        reduce using rule 286 (statement_switch -> compound_statement_switch .)
    BOOL            reduce using rule 286 (statement_switch -> compound_statement_switch .)
    CONST           reduce using rule 286 (statement_switch -> compound_statement_switch .)
    VOLATILE        reduce using rule 286 (statement_switch -> compound_statement_switch .)
    RESTRICT        reduce using rule 286 (statement_switch -> compound_statement_switch .)
    (               reduce using rule 286 (statement_switch -> compound_statement_switch .)
    ID              reduce using rule 286 (statement_switch -> compound_statement_switch .)
    ENUM            reduce using rule 286 (statement_switch -> compound_statement_switch .)
    STRUCT          reduce using rule 286 (statement_switch -> compound_statement_switch .)
    UNION           reduce using rule 286 (statement_switch -> compound_statement_switch .)
    INC             reduce using rule 286 (statement_switch -> compound_statement_switch .)
    DEC             reduce using rule 286 (statement_switch -> compound_statement_switch .)
    SIZEOF          reduce using rule 286 (statement_switch -> compound_statement_switch .)
    &               reduce using rule 286 (statement_switch -> compound_statement_switch .)
    *               reduce using rule 286 (statement_switch -> compound_statement_switch .)
    +               reduce using rule 286 (statement_switch -> compound_statement_switch .)
    -               reduce using rule 286 (statement_switch -> compound_statement_switch .)
    ~               reduce using rule 286 (statement_switch -> compound_statement_switch .)
    !               reduce using rule 286 (statement_switch -> compound_statement_switch .)
    CONSTANCE       reduce using rule 286 (statement_switch -> compound_statement_switch .)
    STRING_LITERAL  reduce using rule 286 (statement_switch -> compound_statement_switch .)
    CASE            reduce using rule 286 (statement_switch -> compound_statement_switch .)
    DEFAULT         reduce using rule 286 (statement_switch -> compound_statement_switch .)


state 486

    (287) statement_switch -> expression_statement .

    ELSE            reduce using rule 287 (statement_switch -> expression_statement .)
    }               reduce using rule 287 (statement_switch -> expression_statement .)
    {               reduce using rule 287 (statement_switch -> expression_statement .)
    ;               reduce using rule 287 (statement_switch -> expression_statement .)
    IF              reduce using rule 287 (statement_switch -> expression_statement .)
    SWITCH          reduce using rule 287 (statement_switch -> expression_statement .)
    WHILE           reduce using rule 287 (statement_switch -> expression_statement .)
    DO              reduce using rule 287 (statement_switch -> expression_statement .)
    FOR             reduce using rule 287 (statement_switch -> expression_statement .)
    GOTO            reduce using rule 287 (statement_switch -> expression_statement .)
    CONTINUE        reduce using rule 287 (statement_switch -> expression_statement .)
    BREAK           reduce using rule 287 (statement_switch -> expression_statement .)
    RETURN          reduce using rule 287 (statement_switch -> expression_statement .)
    TYPEDEF         reduce using rule 287 (statement_switch -> expression_statement .)
    EXTERN          reduce using rule 287 (statement_switch -> expression_statement .)
    STATIC          reduce using rule 287 (statement_switch -> expression_statement .)
    AUTO            reduce using rule 287 (statement_switch -> expression_statement .)
    REGISTER        reduce using rule 287 (statement_switch -> expression_statement .)
    VOID            reduce using rule 287 (statement_switch -> expression_statement .)
    CHAR            reduce using rule 287 (statement_switch -> expression_statement .)
    SHORT           reduce using rule 287 (statement_switch -> expression_statement .)
    INT             reduce using rule 287 (statement_switch -> expression_statement .)
    LONG            reduce using rule 287 (statement_switch -> expression_statement .)
    FLOAT           reduce using rule 287 (statement_switch -> expression_statement .)
    DOUBLE          reduce using rule 287 (statement_switch -> expression_statement .)
    SIGNED          reduce using rule 287 (statement_switch -> expression_statement .)
    UNSIGNED        reduce using rule 287 (statement_switch -> expression_statement .)
    BOOL            reduce using rule 287 (statement_switch -> expression_statement .)
    CONST           reduce using rule 287 (statement_switch -> expression_statement .)
    VOLATILE        reduce using rule 287 (statement_switch -> expression_statement .)
    RESTRICT        reduce using rule 287 (statement_switch -> expression_statement .)
    (               reduce using rule 287 (statement_switch -> expression_statement .)
    ID              reduce using rule 287 (statement_switch -> expression_statement .)
    ENUM            reduce using rule 287 (statement_switch -> expression_statement .)
    STRUCT          reduce using rule 287 (statement_switch -> expression_statement .)
    UNION           reduce using rule 287 (statement_switch -> expression_statement .)
    INC             reduce using rule 287 (statement_switch -> expression_statement .)
    DEC             reduce using rule 287 (statement_switch -> expression_statement .)
    SIZEOF          reduce using rule 287 (statement_switch -> expression_statement .)
    &               reduce using rule 287 (statement_switch -> expression_statement .)
    *               reduce using rule 287 (statement_switch -> expression_statement .)
    +               reduce using rule 287 (statement_switch -> expression_statement .)
    -               reduce using rule 287 (statement_switch -> expression_statement .)
    ~               reduce using rule 287 (statement_switch -> expression_statement .)
    !               reduce using rule 287 (statement_switch -> expression_statement .)
    CONSTANCE       reduce using rule 287 (statement_switch -> expression_statement .)
    STRING_LITERAL  reduce using rule 287 (statement_switch -> expression_statement .)
    CASE            reduce using rule 287 (statement_switch -> expression_statement .)
    DEFAULT         reduce using rule 287 (statement_switch -> expression_statement .)


state 487

    (288) statement_switch -> selection_statement .

    ELSE            reduce using rule 288 (statement_switch -> selection_statement .)
    }               reduce using rule 288 (statement_switch -> selection_statement .)
    {               reduce using rule 288 (statement_switch -> selection_statement .)
    ;               reduce using rule 288 (statement_switch -> selection_statement .)
    IF              reduce using rule 288 (statement_switch -> selection_statement .)
    SWITCH          reduce using rule 288 (statement_switch -> selection_statement .)
    WHILE           reduce using rule 288 (statement_switch -> selection_statement .)
    DO              reduce using rule 288 (statement_switch -> selection_statement .)
    FOR             reduce using rule 288 (statement_switch -> selection_statement .)
    GOTO            reduce using rule 288 (statement_switch -> selection_statement .)
    CONTINUE        reduce using rule 288 (statement_switch -> selection_statement .)
    BREAK           reduce using rule 288 (statement_switch -> selection_statement .)
    RETURN          reduce using rule 288 (statement_switch -> selection_statement .)
    TYPEDEF         reduce using rule 288 (statement_switch -> selection_statement .)
    EXTERN          reduce using rule 288 (statement_switch -> selection_statement .)
    STATIC          reduce using rule 288 (statement_switch -> selection_statement .)
    AUTO            reduce using rule 288 (statement_switch -> selection_statement .)
    REGISTER        reduce using rule 288 (statement_switch -> selection_statement .)
    VOID            reduce using rule 288 (statement_switch -> selection_statement .)
    CHAR            reduce using rule 288 (statement_switch -> selection_statement .)
    SHORT           reduce using rule 288 (statement_switch -> selection_statement .)
    INT             reduce using rule 288 (statement_switch -> selection_statement .)
    LONG            reduce using rule 288 (statement_switch -> selection_statement .)
    FLOAT           reduce using rule 288 (statement_switch -> selection_statement .)
    DOUBLE          reduce using rule 288 (statement_switch -> selection_statement .)
    SIGNED          reduce using rule 288 (statement_switch -> selection_statement .)
    UNSIGNED        reduce using rule 288 (statement_switch -> selection_statement .)
    BOOL            reduce using rule 288 (statement_switch -> selection_statement .)
    CONST           reduce using rule 288 (statement_switch -> selection_statement .)
    VOLATILE        reduce using rule 288 (statement_switch -> selection_statement .)
    RESTRICT        reduce using rule 288 (statement_switch -> selection_statement .)
    (               reduce using rule 288 (statement_switch -> selection_statement .)
    ID              reduce using rule 288 (statement_switch -> selection_statement .)
    ENUM            reduce using rule 288 (statement_switch -> selection_statement .)
    STRUCT          reduce using rule 288 (statement_switch -> selection_statement .)
    UNION           reduce using rule 288 (statement_switch -> selection_statement .)
    INC             reduce using rule 288 (statement_switch -> selection_statement .)
    DEC             reduce using rule 288 (statement_switch -> selection_statement .)
    SIZEOF          reduce using rule 288 (statement_switch -> selection_statement .)
    &               reduce using rule 288 (statement_switch -> selection_statement .)
    *               reduce using rule 288 (statement_switch -> selection_statement .)
    +               reduce using rule 288 (statement_switch -> selection_statement .)
    -               reduce using rule 288 (statement_switch -> selection_statement .)
    ~               reduce using rule 288 (statement_switch -> selection_statement .)
    !               reduce using rule 288 (statement_switch -> selection_statement .)
    CONSTANCE       reduce using rule 288 (statement_switch -> selection_statement .)
    STRING_LITERAL  reduce using rule 288 (statement_switch -> selection_statement .)
    CASE            reduce using rule 288 (statement_switch -> selection_statement .)
    DEFAULT         reduce using rule 288 (statement_switch -> selection_statement .)


state 488

    (289) statement_switch -> iteration_statement .

    ELSE            reduce using rule 289 (statement_switch -> iteration_statement .)
    }               reduce using rule 289 (statement_switch -> iteration_statement .)
    {               reduce using rule 289 (statement_switch -> iteration_statement .)
    ;               reduce using rule 289 (statement_switch -> iteration_statement .)
    IF              reduce using rule 289 (statement_switch -> iteration_statement .)
    SWITCH          reduce using rule 289 (statement_switch -> iteration_statement .)
    WHILE           reduce using rule 289 (statement_switch -> iteration_statement .)
    DO              reduce using rule 289 (statement_switch -> iteration_statement .)
    FOR             reduce using rule 289 (statement_switch -> iteration_statement .)
    GOTO            reduce using rule 289 (statement_switch -> iteration_statement .)
    CONTINUE        reduce using rule 289 (statement_switch -> iteration_statement .)
    BREAK           reduce using rule 289 (statement_switch -> iteration_statement .)
    RETURN          reduce using rule 289 (statement_switch -> iteration_statement .)
    TYPEDEF         reduce using rule 289 (statement_switch -> iteration_statement .)
    EXTERN          reduce using rule 289 (statement_switch -> iteration_statement .)
    STATIC          reduce using rule 289 (statement_switch -> iteration_statement .)
    AUTO            reduce using rule 289 (statement_switch -> iteration_statement .)
    REGISTER        reduce using rule 289 (statement_switch -> iteration_statement .)
    VOID            reduce using rule 289 (statement_switch -> iteration_statement .)
    CHAR            reduce using rule 289 (statement_switch -> iteration_statement .)
    SHORT           reduce using rule 289 (statement_switch -> iteration_statement .)
    INT             reduce using rule 289 (statement_switch -> iteration_statement .)
    LONG            reduce using rule 289 (statement_switch -> iteration_statement .)
    FLOAT           reduce using rule 289 (statement_switch -> iteration_statement .)
    DOUBLE          reduce using rule 289 (statement_switch -> iteration_statement .)
    SIGNED          reduce using rule 289 (statement_switch -> iteration_statement .)
    UNSIGNED        reduce using rule 289 (statement_switch -> iteration_statement .)
    BOOL            reduce using rule 289 (statement_switch -> iteration_statement .)
    CONST           reduce using rule 289 (statement_switch -> iteration_statement .)
    VOLATILE        reduce using rule 289 (statement_switch -> iteration_statement .)
    RESTRICT        reduce using rule 289 (statement_switch -> iteration_statement .)
    (               reduce using rule 289 (statement_switch -> iteration_statement .)
    ID              reduce using rule 289 (statement_switch -> iteration_statement .)
    ENUM            reduce using rule 289 (statement_switch -> iteration_statement .)
    STRUCT          reduce using rule 289 (statement_switch -> iteration_statement .)
    UNION           reduce using rule 289 (statement_switch -> iteration_statement .)
    INC             reduce using rule 289 (statement_switch -> iteration_statement .)
    DEC             reduce using rule 289 (statement_switch -> iteration_statement .)
    SIZEOF          reduce using rule 289 (statement_switch -> iteration_statement .)
    &               reduce using rule 289 (statement_switch -> iteration_statement .)
    *               reduce using rule 289 (statement_switch -> iteration_statement .)
    +               reduce using rule 289 (statement_switch -> iteration_statement .)
    -               reduce using rule 289 (statement_switch -> iteration_statement .)
    ~               reduce using rule 289 (statement_switch -> iteration_statement .)
    !               reduce using rule 289 (statement_switch -> iteration_statement .)
    CONSTANCE       reduce using rule 289 (statement_switch -> iteration_statement .)
    STRING_LITERAL  reduce using rule 289 (statement_switch -> iteration_statement .)
    CASE            reduce using rule 289 (statement_switch -> iteration_statement .)
    DEFAULT         reduce using rule 289 (statement_switch -> iteration_statement .)


state 489

    (290) statement_switch -> jump_statement .

    ELSE            reduce using rule 290 (statement_switch -> jump_statement .)
    }               reduce using rule 290 (statement_switch -> jump_statement .)
    {               reduce using rule 290 (statement_switch -> jump_statement .)
    ;               reduce using rule 290 (statement_switch -> jump_statement .)
    IF              reduce using rule 290 (statement_switch -> jump_statement .)
    SWITCH          reduce using rule 290 (statement_switch -> jump_statement .)
    WHILE           reduce using rule 290 (statement_switch -> jump_statement .)
    DO              reduce using rule 290 (statement_switch -> jump_statement .)
    FOR             reduce using rule 290 (statement_switch -> jump_statement .)
    GOTO            reduce using rule 290 (statement_switch -> jump_statement .)
    CONTINUE        reduce using rule 290 (statement_switch -> jump_statement .)
    BREAK           reduce using rule 290 (statement_switch -> jump_statement .)
    RETURN          reduce using rule 290 (statement_switch -> jump_statement .)
    TYPEDEF         reduce using rule 290 (statement_switch -> jump_statement .)
    EXTERN          reduce using rule 290 (statement_switch -> jump_statement .)
    STATIC          reduce using rule 290 (statement_switch -> jump_statement .)
    AUTO            reduce using rule 290 (statement_switch -> jump_statement .)
    REGISTER        reduce using rule 290 (statement_switch -> jump_statement .)
    VOID            reduce using rule 290 (statement_switch -> jump_statement .)
    CHAR            reduce using rule 290 (statement_switch -> jump_statement .)
    SHORT           reduce using rule 290 (statement_switch -> jump_statement .)
    INT             reduce using rule 290 (statement_switch -> jump_statement .)
    LONG            reduce using rule 290 (statement_switch -> jump_statement .)
    FLOAT           reduce using rule 290 (statement_switch -> jump_statement .)
    DOUBLE          reduce using rule 290 (statement_switch -> jump_statement .)
    SIGNED          reduce using rule 290 (statement_switch -> jump_statement .)
    UNSIGNED        reduce using rule 290 (statement_switch -> jump_statement .)
    BOOL            reduce using rule 290 (statement_switch -> jump_statement .)
    CONST           reduce using rule 290 (statement_switch -> jump_statement .)
    VOLATILE        reduce using rule 290 (statement_switch -> jump_statement .)
    RESTRICT        reduce using rule 290 (statement_switch -> jump_statement .)
    (               reduce using rule 290 (statement_switch -> jump_statement .)
    ID              reduce using rule 290 (statement_switch -> jump_statement .)
    ENUM            reduce using rule 290 (statement_switch -> jump_statement .)
    STRUCT          reduce using rule 290 (statement_switch -> jump_statement .)
    UNION           reduce using rule 290 (statement_switch -> jump_statement .)
    INC             reduce using rule 290 (statement_switch -> jump_statement .)
    DEC             reduce using rule 290 (statement_switch -> jump_statement .)
    SIZEOF          reduce using rule 290 (statement_switch -> jump_statement .)
    &               reduce using rule 290 (statement_switch -> jump_statement .)
    *               reduce using rule 290 (statement_switch -> jump_statement .)
    +               reduce using rule 290 (statement_switch -> jump_statement .)
    -               reduce using rule 290 (statement_switch -> jump_statement .)
    ~               reduce using rule 290 (statement_switch -> jump_statement .)
    !               reduce using rule 290 (statement_switch -> jump_statement .)
    CONSTANCE       reduce using rule 290 (statement_switch -> jump_statement .)
    STRING_LITERAL  reduce using rule 290 (statement_switch -> jump_statement .)
    CASE            reduce using rule 290 (statement_switch -> jump_statement .)
    DEFAULT         reduce using rule 290 (statement_switch -> jump_statement .)


state 490

    (291) labeled_statement_switch -> ID . :
    (176) identifier -> ID .

    :               shift and go to state 508
    (               reduce using rule 176 (identifier -> ID .)
    INC             reduce using rule 176 (identifier -> ID .)
    DEC             reduce using rule 176 (identifier -> ID .)
    [               reduce using rule 176 (identifier -> ID .)
    .               reduce using rule 176 (identifier -> ID .)
    PTR             reduce using rule 176 (identifier -> ID .)
    =               reduce using rule 176 (identifier -> ID .)
    AO_MUL          reduce using rule 176 (identifier -> ID .)
    AO_DIV          reduce using rule 176 (identifier -> ID .)
    AO_MOD          reduce using rule 176 (identifier -> ID .)
    AO_PLUS         reduce using rule 176 (identifier -> ID .)
    AO_SUB          reduce using rule 176 (identifier -> ID .)
    AO_SL           reduce using rule 176 (identifier -> ID .)
    AO_SR           reduce using rule 176 (identifier -> ID .)
    AO_AND          reduce using rule 176 (identifier -> ID .)
    AO_XOR          reduce using rule 176 (identifier -> ID .)
    AO_OR           reduce using rule 176 (identifier -> ID .)
    *               reduce using rule 176 (identifier -> ID .)
    /               reduce using rule 176 (identifier -> ID .)
    %               reduce using rule 176 (identifier -> ID .)
    +               reduce using rule 176 (identifier -> ID .)
    -               reduce using rule 176 (identifier -> ID .)
    SHIFT_LEFT      reduce using rule 176 (identifier -> ID .)
    SHIFT_RIGHT     reduce using rule 176 (identifier -> ID .)
    <               reduce using rule 176 (identifier -> ID .)
    >               reduce using rule 176 (identifier -> ID .)
    LE              reduce using rule 176 (identifier -> ID .)
    GE              reduce using rule 176 (identifier -> ID .)
    EQUAL           reduce using rule 176 (identifier -> ID .)
    NE              reduce using rule 176 (identifier -> ID .)
    &               reduce using rule 176 (identifier -> ID .)
    ^               reduce using rule 176 (identifier -> ID .)
    |               reduce using rule 176 (identifier -> ID .)
    AND             reduce using rule 176 (identifier -> ID .)
    ?               reduce using rule 176 (identifier -> ID .)
    OR              reduce using rule 176 (identifier -> ID .)
    ;               reduce using rule 176 (identifier -> ID .)
    ,               reduce using rule 176 (identifier -> ID .)


state 491

    (292) labeled_statement_switch -> CASE . constant_expression : statement
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( specifier_qualifier_list ) cast_expression
    (150) unary_expression -> . primary_expression
    (151) unary_expression -> . unary_operator cast_expression
    (152) unary_expression -> . SIZEOF unary_expression
    (153) unary_expression -> . SIZEOF ( specifier_qualifier_list )
    (158) primary_expression -> . CONSTANCE
    (159) primary_expression -> . STRING_LITERAL
    (160) primary_expression -> . ( expression )
    (154) unary_operator -> . +
    (155) unary_operator -> . -
    (156) unary_operator -> . ~
    (157) unary_operator -> . !

    (               shift and go to state 203
    SIZEOF          shift and go to state 206
    CONSTANCE       shift and go to state 207
    STRING_LITERAL  shift and go to state 208
    +               shift and go to state 199
    -               shift and go to state 200
    ~               shift and go to state 209
    !               shift and go to state 210

    constant_expression            shift and go to state 509
    conditional_expression         shift and go to state 188
    logical_or_expression          shift and go to state 189
    logical_and_expression         shift and go to state 190
    inclusive_or_expression        shift and go to state 191
    exclusive_or_expression        shift and go to state 192
    and_expression                 shift and go to state 193
    equality_expression            shift and go to state 194
    relational_expression          shift and go to state 195
    shift_expression               shift and go to state 196
    additive_expression            shift and go to state 197
    multiplicative_expression      shift and go to state 198
    cast_expression                shift and go to state 201
    unary_expression               shift and go to state 202
    primary_expression             shift and go to state 204
    unary_operator                 shift and go to state 205

state 492

    (293) labeled_statement_switch -> DEFAULT . : statement

    :               shift and go to state 510


state 493

    (279) compound_statement_switch -> { . }
    (280) compound_statement_switch -> { . block_item_list_switch }
    (281) block_item_list_switch -> . block_item_switch
    (282) block_item_list_switch -> . block_item_list_switch block_item_switch
    (283) block_item_switch -> . declaration
    (284) block_item_switch -> . statement_switch
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (285) statement_switch -> . labeled_statement_switch
    (286) statement_switch -> . compound_statement_switch
    (287) statement_switch -> . expression_statement
    (288) statement_switch -> . selection_statement
    (289) statement_switch -> . iteration_statement
    (290) statement_switch -> . jump_statement
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (291) labeled_statement_switch -> . ID :
    (292) labeled_statement_switch -> . CASE constant_expression : statement
    (293) labeled_statement_switch -> . DEFAULT : statement
    (279) compound_statement_switch -> . { }
    (280) compound_statement_switch -> . { block_item_list_switch }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 511
    ID              shift and go to state 490
    CASE            shift and go to state 491
    DEFAULT         shift and go to state 492
    {               shift and go to state 493
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    block_item_list_switch         shift and go to state 512
    block_item_switch              shift and go to state 513
    declaration                    shift and go to state 514
    statement_switch               shift and go to state 515
    declaration_specifiers         shift and go to state 123
    labeled_statement_switch       shift and go to state 484
    compound_statement_switch      shift and go to state 485
    expression_statement           shift and go to state 486
    selection_statement            shift and go to state 487
    iteration_statement            shift and go to state 488
    jump_statement                 shift and go to state 489
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    expression_variable            shift and go to state 132
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    assignment_expression          shift and go to state 143
    struct_or_union                shift and go to state 29
    identifier                     shift and go to state 221
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 494

    (294) iteration_statement -> WHILE ( expression_variable ) statement .

    }               reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    {               reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    ;               reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    IF              reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    SWITCH          reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    WHILE           reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    DO              reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    FOR             reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    GOTO            reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    CONTINUE        reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    BREAK           reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    RETURN          reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    TYPEDEF         reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    EXTERN          reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    STATIC          reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    AUTO            reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    REGISTER        reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    VOID            reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    CHAR            reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    SHORT           reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    INT             reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    LONG            reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    FLOAT           reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    DOUBLE          reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    SIGNED          reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    UNSIGNED        reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    BOOL            reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    CONST           reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    VOLATILE        reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    RESTRICT        reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    (               reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    ID              reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    ENUM            reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    STRUCT          reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    UNION           reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    INC             reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    DEC             reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    SIZEOF          reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    &               reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    *               reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    +               reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    -               reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    ~               reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    !               reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    CONSTANCE       reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    STRING_LITERAL  reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    ELSE            reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    CASE            reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)
    DEFAULT         reduce using rule 294 (iteration_statement -> WHILE ( expression_variable ) statement .)


state 495

    (295) iteration_statement -> DO statement WHILE ( expression_variable . ) ;
    (199) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 516
    ,               shift and go to state 244


state 496

    (296) iteration_statement -> FOR ( expression_statement expression_statement ) . statement
    (189) statement -> . labeled_statement
    (190) statement -> . compound_statement
    (191) statement -> . expression_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) labeled_statement -> . identifier :
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_statement           shift and go to state 127
    statement                      shift and go to state 517
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 497

    (297) iteration_statement -> FOR ( expression_statement expression_statement expression_variable . ) statement
    (199) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 518
    ,               shift and go to state 244


state 498

    (298) iteration_statement -> FOR ( declaration expression_statement ) . statement
    (189) statement -> . labeled_statement
    (190) statement -> . compound_statement
    (191) statement -> . expression_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) labeled_statement -> . identifier :
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_statement           shift and go to state 127
    statement                      shift and go to state 519
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 499

    (299) iteration_statement -> FOR ( declaration expression_statement expression_variable . ) statement
    (199) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 520
    ,               shift and go to state 244


state 500

    (214) conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v .

    ;               reduce using rule 214 (conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v .)
    ,               reduce using rule 214 (conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v .)
    )               reduce using rule 214 (conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v .)
    }               reduce using rule 214 (conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v .)
    :               reduce using rule 214 (conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v .)


state 501

    (119) conditional_expression -> logical_or_expression ? expression : conditional_expression .

    ]               reduce using rule 119 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    )               reduce using rule 119 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ,               reduce using rule 119 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ;               reduce using rule 119 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    }               reduce using rule 119 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    :               reduce using rule 119 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)


state 502

    (180) parameter_list_definition -> parameter_declaration . = constant_expression , parameter_list_definition
    (181) parameter_list_definition -> parameter_declaration . = constant_expression

    =               shift and go to state 341


state 503

    (180) parameter_list_definition -> parameter_declaration = constant_expression , parameter_list_definition .

    )               reduce using rule 180 (parameter_list_definition -> parameter_declaration = constant_expression , parameter_list_definition .)


state 504

    (169) direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .

    [               reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    ,               reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    =               reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    )               reduce using rule 169 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)


state 505

    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (175) identifier -> ( . identifier )
    (173) direct_function_declarator -> ( . direct_function_declarator )
    (177) parameter_type_list_definition -> ( . )
    (178) parameter_type_list_definition -> ( . parameter_type_list_definition )
    (179) parameter_type_list_definition -> ( . parameter_list )
    (103) direct_declarator -> ( . declarator )
    (166) direct_abstract_declarator -> ( . abstract_declarator )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (173) direct_function_declarator -> . ( direct_function_declarator )
    (174) direct_function_declarator -> . identifier parameter_type_list_definition
    (177) parameter_type_list_definition -> . ( )
    (178) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (179) parameter_type_list_definition -> . ( parameter_list )
    (111) parameter_list -> . parameter_list_definition
    (112) parameter_list -> . parameter_declaration
    (113) parameter_list -> . parameter_declaration , parameter_list
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (163) abstract_declarator -> . pointer
    (164) abstract_declarator -> . direct_abstract_declarator
    (165) abstract_declarator -> . pointer direct_abstract_declarator
    (180) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (181) parameter_list_definition -> . parameter_declaration = constant_expression
    (182) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (166) direct_abstract_declarator -> . ( abstract_declarator )
    (167) direct_abstract_declarator -> . [ ]
    (168) direct_abstract_declarator -> . [ constant_expression ]
    (169) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (170) direct_abstract_declarator -> . parameter_type_list_definition
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    )               shift and go to state 211
    *               shift and go to state 38
    (               shift and go to state 505
    ID              shift and go to state 42
    ELLIPSIS        shift and go to state 216
    [               shift and go to state 347
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    pointer                        shift and go to state 441
    direct_declarator_forlist      shift and go to state 87
    identifier                     shift and go to state 309
    direct_function_declarator     shift and go to state 83
    parameter_type_list_definition shift and go to state 442
    parameter_list                 shift and go to state 213
    declarator                     shift and go to state 85
    abstract_declarator            shift and go to state 440
    parameter_list_definition      shift and go to state 214
    parameter_declaration          shift and go to state 215
    direct_declarator              shift and go to state 44
    direct_abstract_declarator     shift and go to state 345
    declaration_specifiers         shift and go to state 217
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 506

    (310) initializer_list -> initializer_list , designation initializer .

    }               reduce using rule 310 (initializer_list -> initializer_list , designation initializer .)
    ,               reduce using rule 310 (initializer_list -> initializer_list , designation initializer .)


state 507

    (276) selection_statement -> IF ( expression_variable ) statement ELSE . statement
    (189) statement -> . labeled_statement
    (190) statement -> . compound_statement
    (191) statement -> . expression_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) labeled_statement -> . identifier :
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_variable            shift and go to state 132
    statement                      shift and go to state 521
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 508

    (291) labeled_statement_switch -> ID : .

    ELSE            reduce using rule 291 (labeled_statement_switch -> ID : .)
    }               reduce using rule 291 (labeled_statement_switch -> ID : .)
    {               reduce using rule 291 (labeled_statement_switch -> ID : .)
    ;               reduce using rule 291 (labeled_statement_switch -> ID : .)
    IF              reduce using rule 291 (labeled_statement_switch -> ID : .)
    SWITCH          reduce using rule 291 (labeled_statement_switch -> ID : .)
    WHILE           reduce using rule 291 (labeled_statement_switch -> ID : .)
    DO              reduce using rule 291 (labeled_statement_switch -> ID : .)
    FOR             reduce using rule 291 (labeled_statement_switch -> ID : .)
    GOTO            reduce using rule 291 (labeled_statement_switch -> ID : .)
    CONTINUE        reduce using rule 291 (labeled_statement_switch -> ID : .)
    BREAK           reduce using rule 291 (labeled_statement_switch -> ID : .)
    RETURN          reduce using rule 291 (labeled_statement_switch -> ID : .)
    TYPEDEF         reduce using rule 291 (labeled_statement_switch -> ID : .)
    EXTERN          reduce using rule 291 (labeled_statement_switch -> ID : .)
    STATIC          reduce using rule 291 (labeled_statement_switch -> ID : .)
    AUTO            reduce using rule 291 (labeled_statement_switch -> ID : .)
    REGISTER        reduce using rule 291 (labeled_statement_switch -> ID : .)
    VOID            reduce using rule 291 (labeled_statement_switch -> ID : .)
    CHAR            reduce using rule 291 (labeled_statement_switch -> ID : .)
    SHORT           reduce using rule 291 (labeled_statement_switch -> ID : .)
    INT             reduce using rule 291 (labeled_statement_switch -> ID : .)
    LONG            reduce using rule 291 (labeled_statement_switch -> ID : .)
    FLOAT           reduce using rule 291 (labeled_statement_switch -> ID : .)
    DOUBLE          reduce using rule 291 (labeled_statement_switch -> ID : .)
    SIGNED          reduce using rule 291 (labeled_statement_switch -> ID : .)
    UNSIGNED        reduce using rule 291 (labeled_statement_switch -> ID : .)
    BOOL            reduce using rule 291 (labeled_statement_switch -> ID : .)
    CONST           reduce using rule 291 (labeled_statement_switch -> ID : .)
    VOLATILE        reduce using rule 291 (labeled_statement_switch -> ID : .)
    RESTRICT        reduce using rule 291 (labeled_statement_switch -> ID : .)
    (               reduce using rule 291 (labeled_statement_switch -> ID : .)
    ID              reduce using rule 291 (labeled_statement_switch -> ID : .)
    ENUM            reduce using rule 291 (labeled_statement_switch -> ID : .)
    STRUCT          reduce using rule 291 (labeled_statement_switch -> ID : .)
    UNION           reduce using rule 291 (labeled_statement_switch -> ID : .)
    INC             reduce using rule 291 (labeled_statement_switch -> ID : .)
    DEC             reduce using rule 291 (labeled_statement_switch -> ID : .)
    SIZEOF          reduce using rule 291 (labeled_statement_switch -> ID : .)
    &               reduce using rule 291 (labeled_statement_switch -> ID : .)
    *               reduce using rule 291 (labeled_statement_switch -> ID : .)
    +               reduce using rule 291 (labeled_statement_switch -> ID : .)
    -               reduce using rule 291 (labeled_statement_switch -> ID : .)
    ~               reduce using rule 291 (labeled_statement_switch -> ID : .)
    !               reduce using rule 291 (labeled_statement_switch -> ID : .)
    CONSTANCE       reduce using rule 291 (labeled_statement_switch -> ID : .)
    STRING_LITERAL  reduce using rule 291 (labeled_statement_switch -> ID : .)
    CASE            reduce using rule 291 (labeled_statement_switch -> ID : .)
    DEFAULT         reduce using rule 291 (labeled_statement_switch -> ID : .)


state 509

    (292) labeled_statement_switch -> CASE constant_expression . : statement

    :               shift and go to state 522


state 510

    (293) labeled_statement_switch -> DEFAULT : . statement
    (189) statement -> . labeled_statement
    (190) statement -> . compound_statement
    (191) statement -> . expression_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) labeled_statement -> . identifier :
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    statement                      shift and go to state 523
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 511

    (279) compound_statement_switch -> { } .

    ELSE            reduce using rule 279 (compound_statement_switch -> { } .)
    }               reduce using rule 279 (compound_statement_switch -> { } .)
    {               reduce using rule 279 (compound_statement_switch -> { } .)
    ;               reduce using rule 279 (compound_statement_switch -> { } .)
    IF              reduce using rule 279 (compound_statement_switch -> { } .)
    SWITCH          reduce using rule 279 (compound_statement_switch -> { } .)
    WHILE           reduce using rule 279 (compound_statement_switch -> { } .)
    DO              reduce using rule 279 (compound_statement_switch -> { } .)
    FOR             reduce using rule 279 (compound_statement_switch -> { } .)
    GOTO            reduce using rule 279 (compound_statement_switch -> { } .)
    CONTINUE        reduce using rule 279 (compound_statement_switch -> { } .)
    BREAK           reduce using rule 279 (compound_statement_switch -> { } .)
    RETURN          reduce using rule 279 (compound_statement_switch -> { } .)
    TYPEDEF         reduce using rule 279 (compound_statement_switch -> { } .)
    EXTERN          reduce using rule 279 (compound_statement_switch -> { } .)
    STATIC          reduce using rule 279 (compound_statement_switch -> { } .)
    AUTO            reduce using rule 279 (compound_statement_switch -> { } .)
    REGISTER        reduce using rule 279 (compound_statement_switch -> { } .)
    VOID            reduce using rule 279 (compound_statement_switch -> { } .)
    CHAR            reduce using rule 279 (compound_statement_switch -> { } .)
    SHORT           reduce using rule 279 (compound_statement_switch -> { } .)
    INT             reduce using rule 279 (compound_statement_switch -> { } .)
    LONG            reduce using rule 279 (compound_statement_switch -> { } .)
    FLOAT           reduce using rule 279 (compound_statement_switch -> { } .)
    DOUBLE          reduce using rule 279 (compound_statement_switch -> { } .)
    SIGNED          reduce using rule 279 (compound_statement_switch -> { } .)
    UNSIGNED        reduce using rule 279 (compound_statement_switch -> { } .)
    BOOL            reduce using rule 279 (compound_statement_switch -> { } .)
    CONST           reduce using rule 279 (compound_statement_switch -> { } .)
    VOLATILE        reduce using rule 279 (compound_statement_switch -> { } .)
    RESTRICT        reduce using rule 279 (compound_statement_switch -> { } .)
    (               reduce using rule 279 (compound_statement_switch -> { } .)
    ID              reduce using rule 279 (compound_statement_switch -> { } .)
    ENUM            reduce using rule 279 (compound_statement_switch -> { } .)
    STRUCT          reduce using rule 279 (compound_statement_switch -> { } .)
    UNION           reduce using rule 279 (compound_statement_switch -> { } .)
    INC             reduce using rule 279 (compound_statement_switch -> { } .)
    DEC             reduce using rule 279 (compound_statement_switch -> { } .)
    SIZEOF          reduce using rule 279 (compound_statement_switch -> { } .)
    &               reduce using rule 279 (compound_statement_switch -> { } .)
    *               reduce using rule 279 (compound_statement_switch -> { } .)
    +               reduce using rule 279 (compound_statement_switch -> { } .)
    -               reduce using rule 279 (compound_statement_switch -> { } .)
    ~               reduce using rule 279 (compound_statement_switch -> { } .)
    !               reduce using rule 279 (compound_statement_switch -> { } .)
    CONSTANCE       reduce using rule 279 (compound_statement_switch -> { } .)
    STRING_LITERAL  reduce using rule 279 (compound_statement_switch -> { } .)
    CASE            reduce using rule 279 (compound_statement_switch -> { } .)
    DEFAULT         reduce using rule 279 (compound_statement_switch -> { } .)


state 512

    (280) compound_statement_switch -> { block_item_list_switch . }
    (282) block_item_list_switch -> block_item_list_switch . block_item_switch
    (283) block_item_switch -> . declaration
    (284) block_item_switch -> . statement_switch
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (285) statement_switch -> . labeled_statement_switch
    (286) statement_switch -> . compound_statement_switch
    (287) statement_switch -> . expression_statement
    (288) statement_switch -> . selection_statement
    (289) statement_switch -> . iteration_statement
    (290) statement_switch -> . jump_statement
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (291) labeled_statement_switch -> . ID :
    (292) labeled_statement_switch -> . CASE constant_expression : statement
    (293) labeled_statement_switch -> . DEFAULT : statement
    (279) compound_statement_switch -> . { }
    (280) compound_statement_switch -> . { block_item_list_switch }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 524
    ID              shift and go to state 490
    CASE            shift and go to state 491
    DEFAULT         shift and go to state 492
    {               shift and go to state 493
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    (               shift and go to state 222
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    block_item_switch              shift and go to state 525
    declaration                    shift and go to state 514
    statement_switch               shift and go to state 515
    declaration_specifiers         shift and go to state 123
    labeled_statement_switch       shift and go to state 484
    compound_statement_switch      shift and go to state 485
    expression_statement           shift and go to state 486
    selection_statement            shift and go to state 487
    iteration_statement            shift and go to state 488
    jump_statement                 shift and go to state 489
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    expression_variable            shift and go to state 132
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    assignment_expression          shift and go to state 143
    struct_or_union                shift and go to state 29
    identifier                     shift and go to state 221
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 513

    (281) block_item_list_switch -> block_item_switch .

    }               reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    ID              reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    CASE            reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    DEFAULT         reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    {               reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    ;               reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    IF              reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    SWITCH          reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    WHILE           reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    DO              reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    FOR             reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    GOTO            reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    CONTINUE        reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    BREAK           reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    RETURN          reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    TYPEDEF         reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    EXTERN          reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    STATIC          reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    AUTO            reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    REGISTER        reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    VOID            reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    CHAR            reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    SHORT           reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    INT             reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    LONG            reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    FLOAT           reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    DOUBLE          reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    SIGNED          reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    UNSIGNED        reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    BOOL            reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    CONST           reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    VOLATILE        reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    RESTRICT        reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    ENUM            reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    STRUCT          reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    UNION           reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    INC             reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    DEC             reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    SIZEOF          reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    &               reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    *               reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    +               reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    -               reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    ~               reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    !               reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    (               reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    CONSTANCE       reduce using rule 281 (block_item_list_switch -> block_item_switch .)
    STRING_LITERAL  reduce using rule 281 (block_item_list_switch -> block_item_switch .)


state 514

    (283) block_item_switch -> declaration .

    }               reduce using rule 283 (block_item_switch -> declaration .)
    ID              reduce using rule 283 (block_item_switch -> declaration .)
    CASE            reduce using rule 283 (block_item_switch -> declaration .)
    DEFAULT         reduce using rule 283 (block_item_switch -> declaration .)
    {               reduce using rule 283 (block_item_switch -> declaration .)
    ;               reduce using rule 283 (block_item_switch -> declaration .)
    IF              reduce using rule 283 (block_item_switch -> declaration .)
    SWITCH          reduce using rule 283 (block_item_switch -> declaration .)
    WHILE           reduce using rule 283 (block_item_switch -> declaration .)
    DO              reduce using rule 283 (block_item_switch -> declaration .)
    FOR             reduce using rule 283 (block_item_switch -> declaration .)
    GOTO            reduce using rule 283 (block_item_switch -> declaration .)
    CONTINUE        reduce using rule 283 (block_item_switch -> declaration .)
    BREAK           reduce using rule 283 (block_item_switch -> declaration .)
    RETURN          reduce using rule 283 (block_item_switch -> declaration .)
    TYPEDEF         reduce using rule 283 (block_item_switch -> declaration .)
    EXTERN          reduce using rule 283 (block_item_switch -> declaration .)
    STATIC          reduce using rule 283 (block_item_switch -> declaration .)
    AUTO            reduce using rule 283 (block_item_switch -> declaration .)
    REGISTER        reduce using rule 283 (block_item_switch -> declaration .)
    VOID            reduce using rule 283 (block_item_switch -> declaration .)
    CHAR            reduce using rule 283 (block_item_switch -> declaration .)
    SHORT           reduce using rule 283 (block_item_switch -> declaration .)
    INT             reduce using rule 283 (block_item_switch -> declaration .)
    LONG            reduce using rule 283 (block_item_switch -> declaration .)
    FLOAT           reduce using rule 283 (block_item_switch -> declaration .)
    DOUBLE          reduce using rule 283 (block_item_switch -> declaration .)
    SIGNED          reduce using rule 283 (block_item_switch -> declaration .)
    UNSIGNED        reduce using rule 283 (block_item_switch -> declaration .)
    BOOL            reduce using rule 283 (block_item_switch -> declaration .)
    CONST           reduce using rule 283 (block_item_switch -> declaration .)
    VOLATILE        reduce using rule 283 (block_item_switch -> declaration .)
    RESTRICT        reduce using rule 283 (block_item_switch -> declaration .)
    ENUM            reduce using rule 283 (block_item_switch -> declaration .)
    STRUCT          reduce using rule 283 (block_item_switch -> declaration .)
    UNION           reduce using rule 283 (block_item_switch -> declaration .)
    INC             reduce using rule 283 (block_item_switch -> declaration .)
    DEC             reduce using rule 283 (block_item_switch -> declaration .)
    SIZEOF          reduce using rule 283 (block_item_switch -> declaration .)
    &               reduce using rule 283 (block_item_switch -> declaration .)
    *               reduce using rule 283 (block_item_switch -> declaration .)
    +               reduce using rule 283 (block_item_switch -> declaration .)
    -               reduce using rule 283 (block_item_switch -> declaration .)
    ~               reduce using rule 283 (block_item_switch -> declaration .)
    !               reduce using rule 283 (block_item_switch -> declaration .)
    (               reduce using rule 283 (block_item_switch -> declaration .)
    CONSTANCE       reduce using rule 283 (block_item_switch -> declaration .)
    STRING_LITERAL  reduce using rule 283 (block_item_switch -> declaration .)


state 515

    (284) block_item_switch -> statement_switch .

    }               reduce using rule 284 (block_item_switch -> statement_switch .)
    ID              reduce using rule 284 (block_item_switch -> statement_switch .)
    CASE            reduce using rule 284 (block_item_switch -> statement_switch .)
    DEFAULT         reduce using rule 284 (block_item_switch -> statement_switch .)
    {               reduce using rule 284 (block_item_switch -> statement_switch .)
    ;               reduce using rule 284 (block_item_switch -> statement_switch .)
    IF              reduce using rule 284 (block_item_switch -> statement_switch .)
    SWITCH          reduce using rule 284 (block_item_switch -> statement_switch .)
    WHILE           reduce using rule 284 (block_item_switch -> statement_switch .)
    DO              reduce using rule 284 (block_item_switch -> statement_switch .)
    FOR             reduce using rule 284 (block_item_switch -> statement_switch .)
    GOTO            reduce using rule 284 (block_item_switch -> statement_switch .)
    CONTINUE        reduce using rule 284 (block_item_switch -> statement_switch .)
    BREAK           reduce using rule 284 (block_item_switch -> statement_switch .)
    RETURN          reduce using rule 284 (block_item_switch -> statement_switch .)
    TYPEDEF         reduce using rule 284 (block_item_switch -> statement_switch .)
    EXTERN          reduce using rule 284 (block_item_switch -> statement_switch .)
    STATIC          reduce using rule 284 (block_item_switch -> statement_switch .)
    AUTO            reduce using rule 284 (block_item_switch -> statement_switch .)
    REGISTER        reduce using rule 284 (block_item_switch -> statement_switch .)
    VOID            reduce using rule 284 (block_item_switch -> statement_switch .)
    CHAR            reduce using rule 284 (block_item_switch -> statement_switch .)
    SHORT           reduce using rule 284 (block_item_switch -> statement_switch .)
    INT             reduce using rule 284 (block_item_switch -> statement_switch .)
    LONG            reduce using rule 284 (block_item_switch -> statement_switch .)
    FLOAT           reduce using rule 284 (block_item_switch -> statement_switch .)
    DOUBLE          reduce using rule 284 (block_item_switch -> statement_switch .)
    SIGNED          reduce using rule 284 (block_item_switch -> statement_switch .)
    UNSIGNED        reduce using rule 284 (block_item_switch -> statement_switch .)
    BOOL            reduce using rule 284 (block_item_switch -> statement_switch .)
    CONST           reduce using rule 284 (block_item_switch -> statement_switch .)
    VOLATILE        reduce using rule 284 (block_item_switch -> statement_switch .)
    RESTRICT        reduce using rule 284 (block_item_switch -> statement_switch .)
    ENUM            reduce using rule 284 (block_item_switch -> statement_switch .)
    STRUCT          reduce using rule 284 (block_item_switch -> statement_switch .)
    UNION           reduce using rule 284 (block_item_switch -> statement_switch .)
    INC             reduce using rule 284 (block_item_switch -> statement_switch .)
    DEC             reduce using rule 284 (block_item_switch -> statement_switch .)
    SIZEOF          reduce using rule 284 (block_item_switch -> statement_switch .)
    &               reduce using rule 284 (block_item_switch -> statement_switch .)
    *               reduce using rule 284 (block_item_switch -> statement_switch .)
    +               reduce using rule 284 (block_item_switch -> statement_switch .)
    -               reduce using rule 284 (block_item_switch -> statement_switch .)
    ~               reduce using rule 284 (block_item_switch -> statement_switch .)
    !               reduce using rule 284 (block_item_switch -> statement_switch .)
    (               reduce using rule 284 (block_item_switch -> statement_switch .)
    CONSTANCE       reduce using rule 284 (block_item_switch -> statement_switch .)
    STRING_LITERAL  reduce using rule 284 (block_item_switch -> statement_switch .)


state 516

    (295) iteration_statement -> DO statement WHILE ( expression_variable ) . ;

    ;               shift and go to state 526


state 517

    (296) iteration_statement -> FOR ( expression_statement expression_statement ) statement .

    }               reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    {               reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ;               reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    IF              reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SWITCH          reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    WHILE           reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DO              reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    FOR             reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    GOTO            reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONTINUE        reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BREAK           reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    RETURN          reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    TYPEDEF         reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    EXTERN          reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STATIC          reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    AUTO            reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    REGISTER        reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    VOID            reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CHAR            reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SHORT           reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INT             reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    LONG            reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    FLOAT           reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DOUBLE          reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SIGNED          reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    UNSIGNED        reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    BOOL            reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONST           reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    VOLATILE        reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    RESTRICT        reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    (               reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ID              reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ENUM            reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRUCT          reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    UNION           reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    INC             reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DEC             reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    SIZEOF          reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    &               reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    *               reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    +               reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    -               reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ~               reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    !               reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CONSTANCE       reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    STRING_LITERAL  reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    ELSE            reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    CASE            reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)
    DEFAULT         reduce using rule 296 (iteration_statement -> FOR ( expression_statement expression_statement ) statement .)


state 518

    (297) iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) . statement
    (189) statement -> . labeled_statement
    (190) statement -> . compound_statement
    (191) statement -> . expression_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) labeled_statement -> . identifier :
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_statement           shift and go to state 127
    expression_variable            shift and go to state 132
    statement                      shift and go to state 527
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 519

    (298) iteration_statement -> FOR ( declaration expression_statement ) statement .

    }               reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    {               reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ;               reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    IF              reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SWITCH          reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    WHILE           reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DO              reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    FOR             reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    GOTO            reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONTINUE        reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    BREAK           reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    RETURN          reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    TYPEDEF         reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    EXTERN          reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STATIC          reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    AUTO            reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    REGISTER        reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    VOID            reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CHAR            reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SHORT           reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INT             reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    LONG            reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    FLOAT           reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DOUBLE          reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SIGNED          reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    UNSIGNED        reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    BOOL            reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONST           reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    VOLATILE        reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    RESTRICT        reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    (               reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ID              reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ENUM            reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STRUCT          reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    UNION           reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    INC             reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DEC             reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    SIZEOF          reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    &               reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    *               reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    +               reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    -               reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ~               reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    !               reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CONSTANCE       reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    STRING_LITERAL  reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    ELSE            reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    CASE            reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)
    DEFAULT         reduce using rule 298 (iteration_statement -> FOR ( declaration expression_statement ) statement .)


state 520

    (299) iteration_statement -> FOR ( declaration expression_statement expression_variable ) . statement
    (189) statement -> . labeled_statement
    (190) statement -> . compound_statement
    (191) statement -> . expression_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) labeled_statement -> . identifier :
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    expression_statement           shift and go to state 127
    expression_variable            shift and go to state 132
    statement                      shift and go to state 528
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 521

    (276) selection_statement -> IF ( expression_variable ) statement ELSE statement .

    }               reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    {               reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    ;               reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    IF              reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    SWITCH          reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    WHILE           reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    DO              reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    FOR             reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    GOTO            reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    CONTINUE        reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    BREAK           reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    RETURN          reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    TYPEDEF         reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    EXTERN          reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    STATIC          reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    AUTO            reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    REGISTER        reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    VOID            reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    CHAR            reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    SHORT           reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    INT             reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    LONG            reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    FLOAT           reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    DOUBLE          reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    SIGNED          reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    UNSIGNED        reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    BOOL            reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    CONST           reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    VOLATILE        reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    RESTRICT        reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    (               reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    ID              reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    ENUM            reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    STRUCT          reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    UNION           reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    INC             reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    DEC             reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    SIZEOF          reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    &               reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    *               reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    +               reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    -               reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    ~               reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    !               reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    CONSTANCE       reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    STRING_LITERAL  reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    ELSE            reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    CASE            reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    DEFAULT         reduce using rule 276 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)


state 522

    (292) labeled_statement_switch -> CASE constant_expression : . statement
    (189) statement -> . labeled_statement
    (190) statement -> . compound_statement
    (191) statement -> . expression_statement
    (192) statement -> . selection_statement
    (193) statement -> . iteration_statement
    (194) statement -> . jump_statement
    (195) labeled_statement -> . identifier :
    (183) compound_statement -> . { }
    (184) compound_statement -> . { block_item_list }
    (196) expression_statement -> . ;
    (197) expression_statement -> . expression_variable ;
    (276) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (277) selection_statement -> . IF ( expression_variable ) statement
    (278) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (294) iteration_statement -> . WHILE ( expression_variable ) statement
    (295) iteration_statement -> . DO statement WHILE ( expression_variable ) ;
    (296) iteration_statement -> . FOR ( expression_statement expression_statement ) statement
    (297) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement
    (298) iteration_statement -> . FOR ( declaration expression_statement ) statement
    (299) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement
    (300) jump_statement -> . GOTO ID ;
    (301) jump_statement -> . CONTINUE ;
    (302) jump_statement -> . BREAK ;
    (303) jump_statement -> . RETURN ;
    (304) jump_statement -> . RETURN expression_variable ;
    (175) identifier -> . ( identifier )
    (176) identifier -> . ID
    (198) expression_variable -> . assignment_expression
    (199) expression_variable -> . expression_variable , assignment_expression
    (200) assignment_expression -> . conditional_expression_v
    (201) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (213) conditional_expression_v -> . logical_or_expression_v
    (214) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (249) unary_expression_v -> . postfix_expression_v
    (250) unary_expression_v -> . INC unary_expression_v
    (251) unary_expression_v -> . DEC unary_expression_v
    (252) unary_expression_v -> . unary_operator_v cast_expression_v
    (253) unary_expression_v -> . SIZEOF unary_expression_v
    (215) logical_or_expression_v -> . logical_and_expression_v
    (216) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (260) postfix_expression_v -> . postfix_expression_v_no_func
    (261) postfix_expression_v -> . postfix_expression_v [ expression ]
    (262) postfix_expression_v -> . identifier ( )
    (263) postfix_expression_v -> . identifier ( argument_expression_list )
    (264) postfix_expression_v -> . postfix_expression_v . ID
    (265) postfix_expression_v -> . postfix_expression_v PTR ID
    (266) postfix_expression_v -> . postfix_expression_v_no_func INC
    (267) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (254) unary_operator_v -> . &
    (255) unary_operator_v -> . *
    (256) unary_operator_v -> . +
    (257) unary_operator_v -> . -
    (258) unary_operator_v -> . ~
    (259) unary_operator_v -> . !
    (217) logical_and_expression_v -> . inclusive_or_expression_v
    (218) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (268) postfix_expression_v_no_func -> . identifier
    (269) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (270) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (271) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (272) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (219) inclusive_or_expression_v -> . exclusive_or_expression_v
    (220) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (221) exclusive_or_expression_v -> . and_expression_v
    (222) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (223) and_expression_v -> . equality_expression_v
    (224) and_expression_v -> . and_expression_v & equality_expression_v
    (225) equality_expression_v -> . relational_expression_v
    (226) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (227) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (228) relational_expression_v -> . shift_expression_v
    (229) relational_expression_v -> . relational_expression_v < shift_expression_v
    (230) relational_expression_v -> . relational_expression_v > shift_expression_v
    (231) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (232) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (233) shift_expression_v -> . additive_expression_v
    (234) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (235) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (236) additive_expression_v -> . multiplicative_expression_v
    (237) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (238) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (239) multiplicative_expression_v -> . cast_expression_v
    (240) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (241) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (242) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (243) cast_expression_v -> . unary_expression_v
    (244) cast_expression_v -> . unary_expression_v_constance
    (245) cast_expression_v -> . ( specifier_qualifier_list ) cast_expression_v
    (246) unary_expression_v_constance -> . primary_expression_v
    (247) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (248) unary_expression_v_constance -> . SIZEOF ( specifier_qualifier_list )
    (273) primary_expression_v -> . CONSTANCE
    (274) primary_expression_v -> . STRING_LITERAL
    (275) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    CONTINUE        shift and go to state 140
    BREAK           shift and go to state 141
    RETURN          shift and go to state 142
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 148
    DEC             shift and go to state 149
    SIZEOF          shift and go to state 152
    &               shift and go to state 155
    *               shift and go to state 156
    +               shift and go to state 157
    -               shift and go to state 158
    ~               shift and go to state 159
    !               shift and go to state 160
    CONSTANCE       shift and go to state 171
    STRING_LITERAL  shift and go to state 172

    statement                      shift and go to state 529
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 143
    conditional_expression_v       shift and go to state 144
    unary_expression_v             shift and go to state 145
    logical_or_expression_v        shift and go to state 146
    postfix_expression_v           shift and go to state 147
    unary_operator_v               shift and go to state 150
    cast_expression_v              shift and go to state 151
    logical_and_expression_v       shift and go to state 153
    postfix_expression_v_no_func   shift and go to state 154
    inclusive_or_expression_v      shift and go to state 161
    exclusive_or_expression_v      shift and go to state 162
    and_expression_v               shift and go to state 163
    equality_expression_v          shift and go to state 164
    relational_expression_v        shift and go to state 165
    shift_expression_v             shift and go to state 166
    additive_expression_v          shift and go to state 167
    multiplicative_expression_v    shift and go to state 168
    unary_expression_v_constance   shift and go to state 169
    primary_expression_v           shift and go to state 170

state 523

    (293) labeled_statement_switch -> DEFAULT : statement .

    ELSE            reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    }               reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    {               reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    ;               reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    IF              reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    SWITCH          reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    WHILE           reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    DO              reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    FOR             reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    GOTO            reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    CONTINUE        reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    BREAK           reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    RETURN          reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    TYPEDEF         reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    EXTERN          reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    STATIC          reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    AUTO            reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    REGISTER        reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    VOID            reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    CHAR            reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    SHORT           reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    INT             reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    LONG            reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    FLOAT           reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    DOUBLE          reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    SIGNED          reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    UNSIGNED        reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    BOOL            reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    CONST           reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    VOLATILE        reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    RESTRICT        reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    (               reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    ID              reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    ENUM            reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    STRUCT          reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    UNION           reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    INC             reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    DEC             reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    SIZEOF          reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    &               reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    *               reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    +               reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    -               reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    ~               reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    !               reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    CONSTANCE       reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    STRING_LITERAL  reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    CASE            reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)
    DEFAULT         reduce using rule 293 (labeled_statement_switch -> DEFAULT : statement .)


state 524

    (280) compound_statement_switch -> { block_item_list_switch } .

    ELSE            reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    }               reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    {               reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    ;               reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    IF              reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    SWITCH          reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    WHILE           reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    DO              reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    FOR             reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    GOTO            reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    CONTINUE        reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    BREAK           reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    RETURN          reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    TYPEDEF         reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    EXTERN          reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    STATIC          reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    AUTO            reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    REGISTER        reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    VOID            reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    CHAR            reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    SHORT           reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    INT             reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    LONG            reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    FLOAT           reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    DOUBLE          reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    SIGNED          reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    UNSIGNED        reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    BOOL            reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    CONST           reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    VOLATILE        reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    RESTRICT        reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    (               reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    ID              reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    ENUM            reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    STRUCT          reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    UNION           reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    INC             reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    DEC             reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    SIZEOF          reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    &               reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    *               reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    +               reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    -               reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    ~               reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    !               reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    CONSTANCE       reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    STRING_LITERAL  reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    CASE            reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)
    DEFAULT         reduce using rule 280 (compound_statement_switch -> { block_item_list_switch } .)


state 525

    (282) block_item_list_switch -> block_item_list_switch block_item_switch .

    }               reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    ID              reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    CASE            reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    DEFAULT         reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    {               reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    ;               reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    IF              reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    SWITCH          reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    WHILE           reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    DO              reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    FOR             reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    GOTO            reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    CONTINUE        reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    BREAK           reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    RETURN          reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    TYPEDEF         reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    EXTERN          reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    STATIC          reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    AUTO            reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    REGISTER        reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    VOID            reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    CHAR            reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    SHORT           reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    INT             reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    LONG            reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    FLOAT           reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    DOUBLE          reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    SIGNED          reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    UNSIGNED        reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    BOOL            reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    CONST           reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    VOLATILE        reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    RESTRICT        reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    ENUM            reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    STRUCT          reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    UNION           reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    INC             reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    DEC             reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    SIZEOF          reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    &               reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    *               reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    +               reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    -               reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    ~               reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    !               reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    (               reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    CONSTANCE       reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    STRING_LITERAL  reduce using rule 282 (block_item_list_switch -> block_item_list_switch block_item_switch .)


state 526

    (295) iteration_statement -> DO statement WHILE ( expression_variable ) ; .

    }               reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    {               reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    ;               reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    IF              reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    SWITCH          reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    WHILE           reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    DO              reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    FOR             reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    GOTO            reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    CONTINUE        reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    BREAK           reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    RETURN          reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    TYPEDEF         reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    EXTERN          reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    STATIC          reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    AUTO            reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    REGISTER        reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    VOID            reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    CHAR            reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    SHORT           reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    INT             reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    LONG            reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    FLOAT           reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    DOUBLE          reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    SIGNED          reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    UNSIGNED        reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    BOOL            reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    CONST           reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    VOLATILE        reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    RESTRICT        reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    (               reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    ID              reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    ENUM            reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    STRUCT          reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    UNION           reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    INC             reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    DEC             reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    SIZEOF          reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    &               reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    *               reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    +               reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    -               reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    ~               reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    !               reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    CONSTANCE       reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    STRING_LITERAL  reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    ELSE            reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    CASE            reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)
    DEFAULT         reduce using rule 295 (iteration_statement -> DO statement WHILE ( expression_variable ) ; .)


state 527

    (297) iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .

    }               reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    {               reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    ;               reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    IF              reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    SWITCH          reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    WHILE           reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    DO              reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    FOR             reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    GOTO            reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    CONTINUE        reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    BREAK           reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    RETURN          reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    TYPEDEF         reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    EXTERN          reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    STATIC          reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    AUTO            reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    REGISTER        reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    VOID            reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    CHAR            reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    SHORT           reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    INT             reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    LONG            reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    FLOAT           reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    DOUBLE          reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    SIGNED          reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    UNSIGNED        reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    BOOL            reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    CONST           reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    VOLATILE        reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    RESTRICT        reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    (               reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    ID              reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    ENUM            reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    STRUCT          reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    UNION           reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    INC             reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    DEC             reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    SIZEOF          reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    &               reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    *               reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    +               reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    -               reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    ~               reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    !               reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    CONSTANCE       reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    STRING_LITERAL  reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    ELSE            reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    CASE            reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)
    DEFAULT         reduce using rule 297 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement .)


state 528

    (299) iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .

    }               reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    {               reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    ;               reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    IF              reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    SWITCH          reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    WHILE           reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    DO              reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    FOR             reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    GOTO            reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    CONTINUE        reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    BREAK           reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    RETURN          reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    TYPEDEF         reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    EXTERN          reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    STATIC          reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    AUTO            reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    REGISTER        reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    VOID            reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    CHAR            reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    SHORT           reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    INT             reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    LONG            reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    FLOAT           reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    DOUBLE          reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    SIGNED          reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    UNSIGNED        reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    BOOL            reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    CONST           reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    VOLATILE        reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    RESTRICT        reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    (               reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    ID              reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    ENUM            reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    STRUCT          reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    UNION           reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    INC             reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    DEC             reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    SIZEOF          reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    &               reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    *               reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    +               reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    -               reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    ~               reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    !               reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    CONSTANCE       reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    STRING_LITERAL  reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    ELSE            reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    CASE            reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)
    DEFAULT         reduce using rule 299 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement .)


state 529

    (292) labeled_statement_switch -> CASE constant_expression : statement .

    ELSE            reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    }               reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    {               reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    ;               reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    IF              reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    SWITCH          reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    WHILE           reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    DO              reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    FOR             reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    GOTO            reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    CONTINUE        reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    BREAK           reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    RETURN          reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    TYPEDEF         reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    EXTERN          reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    STATIC          reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    AUTO            reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    REGISTER        reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    VOID            reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    CHAR            reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    SHORT           reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    INT             reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    LONG            reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    FLOAT           reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    DOUBLE          reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    SIGNED          reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    UNSIGNED        reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    BOOL            reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    CONST           reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    VOLATILE        reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    RESTRICT        reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    (               reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    ID              reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    ENUM            reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    STRUCT          reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    UNION           reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    INC             reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    DEC             reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    SIZEOF          reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    &               reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    *               reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    +               reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    -               reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    ~               reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    !               reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    CONSTANCE       reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    STRING_LITERAL  reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    CASE            reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)
    DEFAULT         reduce using rule 292 (labeled_statement_switch -> CASE constant_expression : statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 40 resolved as shift
WARNING: shift/reduce conflict for ) in state 83 resolved as shift
WARNING: shift/reduce conflict for ) in state 84 resolved as shift
WARNING: shift/reduce conflict for [ in state 84 resolved as shift
WARNING: shift/reduce conflict for ) in state 87 resolved as shift
WARNING: shift/reduce conflict for [ in state 154 resolved as shift
WARNING: shift/reduce conflict for . in state 154 resolved as shift
WARNING: shift/reduce conflict for PTR in state 154 resolved as shift
WARNING: shift/reduce conflict for [ in state 177 resolved as shift
WARNING: shift/reduce conflict for ) in state 184 resolved as shift
WARNING: shift/reduce conflict for ) in state 246 resolved as shift
WARNING: shift/reduce conflict for [ in state 247 resolved as shift
WARNING: shift/reduce conflict for . in state 247 resolved as shift
WARNING: shift/reduce conflict for PTR in state 247 resolved as shift
WARNING: shift/reduce conflict for ) in state 247 resolved as shift
WARNING: shift/reduce conflict for ) in state 309 resolved as shift
WARNING: shift/reduce conflict for [ in state 309 resolved as shift
WARNING: shift/reduce conflict for ) in state 390 resolved as shift
WARNING: shift/reduce conflict for ) in state 442 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 482 resolved as shift
