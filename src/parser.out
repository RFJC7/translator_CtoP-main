Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    INLINE

Grammar

Rule 0     S' -> start_node
Rule 1     start_node -> start_node global_declaration
Rule 2     start_node -> global_declaration
Rule 3     global_declaration -> function_definition
Rule 4     global_declaration -> declaration
Rule 5     declaration -> declaration_specifiers ;
Rule 6     declaration -> declaration_specifiers init_declarator_list ;
Rule 7     init_declarator_list -> init_declarator
Rule 8     init_declarator_list -> init_declarator_list , init_declarator
Rule 9     init_declarator -> declarator
Rule 10    init_declarator -> declarator = initializer
Rule 11    declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s
Rule 12    declaration_specifiers -> type_specifier
Rule 13    declaration_specifiers -> type_specifier declaration_specifiers_no_ts
Rule 14    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 15    declaration_specifiers_no_s -> type_specifier
Rule 16    declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s
Rule 17    declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s
Rule 18    declaration_specifiers_no_ts -> storage_class_specifier
Rule 19    declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s
Rule 20    declaration_specifiers_no_ts -> type_qualifier
Rule 21    declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts
Rule 22    declaration_specifiers_no_ts_s -> type_qualifier
Rule 23    declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s
Rule 24    storage_class_specifier -> TYPEDEF
Rule 25    storage_class_specifier -> EXTERN
Rule 26    storage_class_specifier -> STATIC
Rule 27    storage_class_specifier -> AUTO
Rule 28    storage_class_specifier -> REGISTER
Rule 29    type_specifier -> VOID
Rule 30    type_specifier -> CHAR
Rule 31    type_specifier -> SHORT
Rule 32    type_specifier -> SHORT INT
Rule 33    type_specifier -> INT SHORT
Rule 34    type_specifier -> INT
Rule 35    type_specifier -> LONG
Rule 36    type_specifier -> LONG INT
Rule 37    type_specifier -> INT LONG
Rule 38    type_specifier -> FLOAT
Rule 39    type_specifier -> DOUBLE
Rule 40    type_specifier -> FLOAT LONG
Rule 41    type_specifier -> LONG FLOAT
Rule 42    type_specifier -> DOUBLE LONG
Rule 43    type_specifier -> LONG DOUBLE
Rule 44    type_specifier -> SIGNED
Rule 45    type_specifier -> SIGNED INT
Rule 46    type_specifier -> SIGNED SHORT
Rule 47    type_specifier -> SIGNED SHORT INT
Rule 48    type_specifier -> SIGNED INT SHORT
Rule 49    type_specifier -> SIGNED LONG
Rule 50    type_specifier -> SIGNED LONG INT
Rule 51    type_specifier -> SIGNED INT LONG
Rule 52    type_specifier -> UNSIGNED
Rule 53    type_specifier -> UNSIGNED INT
Rule 54    type_specifier -> UNSIGNED SHORT
Rule 55    type_specifier -> UNSIGNED SHORT INT
Rule 56    type_specifier -> UNSIGNED INT SHORT
Rule 57    type_specifier -> UNSIGNED LONG
Rule 58    type_specifier -> UNSIGNED LONG INT
Rule 59    type_specifier -> UNSIGNED INT LONG
Rule 60    type_specifier -> struct_or_union_specifier
Rule 61    type_specifier -> enum_specifier
Rule 62    type_specifier -> BOOL
Rule 63    type_qualifier -> CONST
Rule 64    type_qualifier -> VOLATILE
Rule 65    type_qualifier -> RESTRICT
Rule 66    enum_specifier -> ENUM { enumerator_list }
Rule 67    enum_specifier -> ENUM identifier { enumerator_list }
Rule 68    enum_specifier -> ENUM { enumerator_list , }
Rule 69    enum_specifier -> ENUM identifier { enumerator_list , }
Rule 70    enum_specifier -> ENUM identifier
Rule 71    enumerator_list -> enumerator
Rule 72    enumerator_list -> enumerator_list , enumerator
Rule 73    enumerator -> identifier
Rule 74    enumerator -> identifier = constant_expression
Rule 75    struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list }
Rule 76    struct_or_union_specifier -> struct_or_union { struct_declaration_list }
Rule 77    struct_or_union_specifier -> struct_or_union identifier
Rule 78    struct_or_union -> STRUCT
Rule 79    struct_or_union -> UNION
Rule 80    struct_declaration_list -> struct_declaration
Rule 81    struct_declaration_list -> struct_declaration_list struct_declaration
Rule 82    struct_declaration -> specifier_qualifier_list struct_declarator_list ;
Rule 83    specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts
Rule 84    specifier_qualifier_list -> type_specifier
Rule 85    specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 86    specifier_qualifier_list -> type_qualifier
Rule 87    specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts
Rule 88    specifier_qualifier_list_no_ts -> type_qualifier
Rule 89    struct_declarator_list -> struct_declarator
Rule 90    struct_declarator_list -> struct_declarator_list , struct_declarator
Rule 91    struct_declarator -> declarator
Rule 92    struct_declarator -> : constant_expression
Rule 93    struct_declarator -> declarator : constant_expression
Rule 94    declarator -> pointer direct_declarator
Rule 95    declarator -> direct_declarator
Rule 96    pointer -> *
Rule 97    pointer -> * type_qualifier_list
Rule 98    pointer -> * pointer
Rule 99    pointer -> * type_qualifier_list pointer
Rule 100   type_qualifier_list -> type_qualifier
Rule 101   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 102   direct_declarator -> direct_declarator_forlist
Rule 103   direct_declarator -> ( declarator )
Rule 104   direct_declarator -> direct_function_declarator
Rule 105   direct_declarator_forlist -> identifier
Rule 106   direct_declarator_forlist -> ( pointer direct_declarator_forlist )
Rule 107   direct_declarator_forlist -> ( direct_declarator_forlist )
Rule 108   direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ]
Rule 109   direct_declarator_forlist -> identifier [ constant_expression ]
Rule 110   direct_declarator_forlist -> identifier [ ]
Rule 111   parameter_list -> parameter_list_definition
Rule 112   parameter_list -> parameter_declaration
Rule 113   parameter_list -> parameter_declaration , parameter_list
Rule 114   parameter_declaration -> declaration_specifiers declarator
Rule 115   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 116   parameter_declaration -> declaration_specifiers
Rule 117   constant_expression -> conditional_expression
Rule 118   conditional_expression -> logical_or_expression
Rule 119   conditional_expression -> logical_or_expression ? expression : conditional_expression
Rule 120   logical_or_expression -> logical_and_expression
Rule 121   logical_or_expression -> logical_or_expression OR logical_and_expression
Rule 122   logical_and_expression -> inclusive_or_expression
Rule 123   logical_and_expression -> logical_and_expression AND inclusive_or_expression
Rule 124   inclusive_or_expression -> exclusive_or_expression
Rule 125   inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 126   exclusive_or_expression -> and_expression
Rule 127   exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 128   and_expression -> equality_expression
Rule 129   and_expression -> and_expression & equality_expression
Rule 130   equality_expression -> relational_expression
Rule 131   equality_expression -> equality_expression EQUAL relational_expression
Rule 132   equality_expression -> equality_expression NE relational_expression
Rule 133   relational_expression -> shift_expression
Rule 134   relational_expression -> relational_expression < shift_expression
Rule 135   relational_expression -> relational_expression > shift_expression
Rule 136   relational_expression -> relational_expression LE shift_expression
Rule 137   relational_expression -> relational_expression GE shift_expression
Rule 138   shift_expression -> additive_expression
Rule 139   shift_expression -> shift_expression SHIFT_LEFT additive_expression
Rule 140   shift_expression -> shift_expression SHIFT_RIGHT additive_expression
Rule 141   additive_expression -> multiplicative_expression
Rule 142   additive_expression -> additive_expression + multiplicative_expression
Rule 143   additive_expression -> additive_expression - multiplicative_expression
Rule 144   multiplicative_expression -> cast_expression
Rule 145   multiplicative_expression -> multiplicative_expression * cast_expression
Rule 146   multiplicative_expression -> multiplicative_expression / cast_expression
Rule 147   multiplicative_expression -> multiplicative_expression % cast_expression
Rule 148   cast_expression -> unary_expression
Rule 149   cast_expression -> ( type_name ) cast_expression
Rule 150   type_name -> specifier_qualifier_list
Rule 151   type_name -> specifier_qualifier_list brace_pointer
Rule 152   brace_pointer -> *
Rule 153   brace_pointer -> * type_qualifier_list
Rule 154   brace_pointer -> ( brace_pointer )
Rule 155   brace_pointer -> * brace_pointer
Rule 156   brace_pointer -> * type_qualifier_list brace_pointer
Rule 157   unary_expression -> primary_expression
Rule 158   unary_expression -> unary_operator cast_expression
Rule 159   unary_expression -> SIZEOF unary_expression
Rule 160   unary_expression -> SIZEOF ( type_name )
Rule 161   unary_operator -> +
Rule 162   unary_operator -> -
Rule 163   unary_operator -> ~
Rule 164   unary_operator -> !
Rule 165   primary_expression -> CONSTANCE
Rule 166   primary_expression -> STRING_LITERAL
Rule 167   primary_expression -> ( expression )
Rule 168   expression -> constant_expression
Rule 169   expression -> expression , constant_expression
Rule 170   abstract_declarator -> pointer
Rule 171   abstract_declarator -> direct_abstract_declarator
Rule 172   abstract_declarator -> pointer direct_abstract_declarator
Rule 173   direct_abstract_declarator -> ( abstract_declarator )
Rule 174   direct_abstract_declarator -> [ ]
Rule 175   direct_abstract_declarator -> [ constant_expression ]
Rule 176   direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ]
Rule 177   direct_abstract_declarator -> parameter_type_list_definition
Rule 178   function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement
Rule 179   function_definition -> declaration_specifiers direct_function_declarator compound_statement
Rule 180   direct_function_declarator -> ( pointer direct_function_declarator )
Rule 181   direct_function_declarator -> ( direct_function_declarator )
Rule 182   direct_function_declarator -> identifier parameter_type_list_definition
Rule 183   identifier -> ( identifier )
Rule 184   identifier -> ID
Rule 185   parameter_type_list_definition -> ( )
Rule 186   parameter_type_list_definition -> ( parameter_type_list_definition )
Rule 187   parameter_type_list_definition -> ( parameter_list )
Rule 188   parameter_list_definition -> parameter_declaration = constant_expression , parameter_list_definition
Rule 189   parameter_list_definition -> parameter_declaration = constant_expression
Rule 190   parameter_list_definition -> ELLIPSIS
Rule 191   compound_statement -> { }
Rule 192   compound_statement -> { block_item_list }
Rule 193   block_item_list -> block_item
Rule 194   block_item_list -> block_item_list block_item
Rule 195   block_item -> declaration
Rule 196   block_item -> statement
Rule 197   statement -> labeled_statement
Rule 198   statement -> compound_statement
Rule 199   statement -> expression_statement
Rule 200   statement -> selection_statement
Rule 201   statement -> iteration_statement
Rule 202   statement -> jump_statement
Rule 203   labeled_statement -> identifier :
Rule 204   expression_statement -> ;
Rule 205   expression_statement -> expression_variable ;
Rule 206   expression_variable -> assignment_expression
Rule 207   expression_variable -> expression_variable , assignment_expression
Rule 208   assignment_expression -> conditional_expression_v
Rule 209   assignment_expression -> unary_expression_v assignment_operator assignment_expression
Rule 210   assignment_operator -> =
Rule 211   assignment_operator -> AO_MUL
Rule 212   assignment_operator -> AO_DIV
Rule 213   assignment_operator -> AO_MOD
Rule 214   assignment_operator -> AO_PLUS
Rule 215   assignment_operator -> AO_SUB
Rule 216   assignment_operator -> AO_SL
Rule 217   assignment_operator -> AO_SR
Rule 218   assignment_operator -> AO_AND
Rule 219   assignment_operator -> AO_XOR
Rule 220   assignment_operator -> AO_OR
Rule 221   conditional_expression_v -> logical_or_expression_v
Rule 222   conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v
Rule 223   logical_or_expression_v -> logical_and_expression_v
Rule 224   logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v
Rule 225   logical_and_expression_v -> inclusive_or_expression_v
Rule 226   logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v
Rule 227   inclusive_or_expression_v -> exclusive_or_expression_v
Rule 228   inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v
Rule 229   exclusive_or_expression_v -> and_expression_v
Rule 230   exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v
Rule 231   and_expression_v -> equality_expression_v
Rule 232   and_expression_v -> and_expression_v & equality_expression_v
Rule 233   equality_expression_v -> relational_expression_v
Rule 234   equality_expression_v -> equality_expression_v EQUAL relational_expression_v
Rule 235   equality_expression_v -> equality_expression_v NE relational_expression_v
Rule 236   relational_expression_v -> shift_expression_v
Rule 237   relational_expression_v -> relational_expression_v < shift_expression_v
Rule 238   relational_expression_v -> relational_expression_v > shift_expression_v
Rule 239   relational_expression_v -> relational_expression_v LE shift_expression_v
Rule 240   relational_expression_v -> relational_expression_v GE shift_expression_v
Rule 241   shift_expression_v -> additive_expression_v
Rule 242   shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v
Rule 243   shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v
Rule 244   additive_expression_v -> multiplicative_expression_v
Rule 245   additive_expression_v -> additive_expression_v + multiplicative_expression_v
Rule 246   additive_expression_v -> additive_expression_v - multiplicative_expression_v
Rule 247   multiplicative_expression_v -> cast_expression_v
Rule 248   multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v
Rule 249   multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v
Rule 250   multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v
Rule 251   cast_expression_v -> unary_expression_v
Rule 252   cast_expression_v -> unary_expression_v_constance
Rule 253   cast_expression_v -> ( type_name ) cast_expression_v
Rule 254   unary_expression_v_constance -> primary_expression_v
Rule 255   unary_expression_v_constance -> SIZEOF unary_expression_v_constance
Rule 256   unary_expression_v_constance -> SIZEOF ( type_name )
Rule 257   unary_expression_v -> postfix_expression_v
Rule 258   unary_expression_v -> INC unary_expression_v
Rule 259   unary_expression_v -> DEC unary_expression_v
Rule 260   unary_expression_v -> unary_operator_v cast_expression_v
Rule 261   unary_expression_v -> SIZEOF unary_expression_v
Rule 262   unary_operator_v -> &
Rule 263   unary_operator_v -> *
Rule 264   unary_operator_v -> +
Rule 265   unary_operator_v -> -
Rule 266   unary_operator_v -> ~
Rule 267   unary_operator_v -> !
Rule 268   postfix_expression_v -> postfix_expression_v_no_func
Rule 269   postfix_expression_v -> postfix_expression_v [ expression ]
Rule 270   postfix_expression_v -> identifier ( )
Rule 271   postfix_expression_v -> identifier ( argument_expression_list )
Rule 272   postfix_expression_v -> postfix_expression_v . ID
Rule 273   postfix_expression_v -> postfix_expression_v PTR ID
Rule 274   postfix_expression_v -> postfix_expression_v_no_func INC
Rule 275   postfix_expression_v -> postfix_expression_v_no_func DEC
Rule 276   postfix_expression_v_no_func -> identifier
Rule 277   postfix_expression_v_no_func -> ( postfix_expression_v_no_func )
Rule 278   postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ]
Rule 279   postfix_expression_v_no_func -> postfix_expression_v_no_func . ID
Rule 280   postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID
Rule 281   primary_expression_v -> CONSTANCE
Rule 282   primary_expression_v -> STRING_LITERAL
Rule 283   primary_expression_v -> ( expression_variable )
Rule 284   selection_statement -> IF ( expression_variable ) statement ELSE statement
Rule 285   selection_statement -> IF ( expression_variable ) statement
Rule 286   selection_statement -> SWITCH ( expression_variable ) statement_switch
Rule 287   selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while
Rule 288   selection_statement_while -> IF ( expression_variable ) statement_while
Rule 289   selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch
Rule 290   compound_statement_switch -> { }
Rule 291   compound_statement_switch -> { block_item_list_switch }
Rule 292   block_item_list_switch -> block_item_switch
Rule 293   block_item_list_switch -> block_item_list_switch block_item_switch
Rule 294   block_item_switch -> declaration
Rule 295   block_item_switch -> statement_switch
Rule 296   statement_switch -> labeled_statement_switch
Rule 297   statement_switch -> compound_statement_switch
Rule 298   statement_switch -> expression_statement
Rule 299   statement_switch -> selection_statement
Rule 300   statement_switch -> iteration_statement_switch
Rule 301   statement_switch -> jump_statement
Rule 302   labeled_statement_switch -> ID :
Rule 303   labeled_statement_switch -> CASE constant_expression : statement
Rule 304   labeled_statement_switch -> DEFAULT : statement
Rule 305   compound_statement_while -> { }
Rule 306   compound_statement_while -> { block_item_list_while }
Rule 307   block_item_list_while -> block_item_while
Rule 308   block_item_list_while -> block_item_list_while block_item_while
Rule 309   block_item_while -> declaration
Rule 310   block_item_while -> statement_while
Rule 311   statement_while -> labeled_statement
Rule 312   statement_while -> compound_statement_while
Rule 313   statement_while -> expression_statement
Rule 314   statement_while -> selection_statement_while
Rule 315   statement_while -> iteration_statement
Rule 316   statement_while -> jump_statement_while
Rule 317   iteration_statement -> WHILE ( expression_variable ) statement_while
Rule 318   iteration_statement -> DO statement_while WHILE ( expression_variable ) ;
Rule 319   iteration_statement -> FOR ( expression_statement expression_statement ) statement_while
Rule 320   iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while
Rule 321   iteration_statement -> FOR ( declaration expression_statement ) statement_while
Rule 322   iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while
Rule 323   iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch
Rule 324   iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ;
Rule 325   iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch
Rule 326   iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
Rule 327   iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch
Rule 328   iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch
Rule 329   compound_statement_while_switch -> { }
Rule 330   compound_statement_while_switch -> { block_item_list_while_switch }
Rule 331   block_item_list_while_switch -> block_item_while_switch
Rule 332   block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch
Rule 333   block_item_while_switch -> declaration
Rule 334   block_item_while_switch -> statement_while_switch
Rule 335   statement_while_switch -> labeled_statement_switch
Rule 336   statement_while_switch -> compound_statement_while_switch
Rule 337   statement_while_switch -> expression_statement
Rule 338   statement_while_switch -> selection_statement_while
Rule 339   statement_while_switch -> iteration_statement_switch
Rule 340   statement_while_switch -> jump_statement_while
Rule 341   jump_statement -> GOTO ID ;
Rule 342   jump_statement -> RETURN ;
Rule 343   jump_statement -> RETURN expression_variable ;
Rule 344   jump_statement_while -> GOTO ID ;
Rule 345   jump_statement_while -> CONTINUE ;
Rule 346   jump_statement_while -> BREAK ;
Rule 347   jump_statement_while -> RETURN ;
Rule 348   jump_statement_while -> RETURN expression_variable ;
Rule 349   argument_expression_list -> assignment_expression
Rule 350   argument_expression_list -> argument_expression_list , assignment_expression
Rule 351   initializer_list -> initializer
Rule 352   initializer_list -> designation initializer
Rule 353   initializer_list -> initializer_list , initializer
Rule 354   initializer_list -> initializer_list , designation initializer
Rule 355   initializer -> assignment_expression
Rule 356   initializer -> { initializer_list }
Rule 357   initializer -> { initializer_list , }
Rule 358   designation -> designator_list =
Rule 359   designator_list -> designator
Rule 360   designator_list -> designator_list designator
Rule 361   designator -> [ constant_expression ]
Rule 362   designator -> . ID

Terminals, with rules where they appear

!                    : 164 267
%                    : 147 250
&                    : 129 232 262
(                    : 103 106 107 149 154 160 167 173 180 181 183 185 186 187 253 256 270 271 277 283 284 285 286 287 288 289 317 318 319 320 321 322 323 324 325 326 327 328
)                    : 103 106 107 149 154 160 167 173 180 181 183 185 186 187 253 256 270 271 277 283 284 285 286 287 288 289 317 318 319 320 321 322 323 324 325 326 327 328
*                    : 96 97 98 99 145 152 153 155 156 248 263
+                    : 142 161 245 264
,                    : 8 68 69 72 90 113 169 188 207 350 353 354 357
-                    : 143 162 246 265
.                    : 272 279 362
/                    : 146 249
:                    : 92 93 119 203 222 302 303 304
;                    : 5 6 82 204 205 318 324 341 342 343 344 345 346 347 348
<                    : 134 237
=                    : 10 74 188 189 210 358
>                    : 135 238
?                    : 119 222
AND                  : 123 226
AO_AND               : 218
AO_DIV               : 212
AO_MOD               : 213
AO_MUL               : 211
AO_OR                : 220
AO_PLUS              : 214
AO_SL                : 216
AO_SR                : 217
AO_SUB               : 215
AO_XOR               : 219
AUTO                 : 27
BOOL                 : 62
BREAK                : 346
CASE                 : 303
CHAR                 : 30
CONST                : 63
CONSTANCE            : 165 281
CONTINUE             : 345
DEC                  : 259 275
DEFAULT              : 304
DO                   : 318 324
DOUBLE               : 39 42 43
ELLIPSIS             : 190
ELSE                 : 284 287
ENUM                 : 66 67 68 69 70
EQUAL                : 131 234
EXTERN               : 25
FLOAT                : 38 40 41
FOR                  : 319 320 321 322 325 326 327 328
GE                   : 137 240
GOTO                 : 341 344
ID                   : 184 272 273 279 280 302 341 344 362
IF                   : 284 285 287 288
INC                  : 258 274
INLINE               : 
INT                  : 32 33 34 36 37 45 47 48 50 51 53 55 56 58 59
LE                   : 136 239
LONG                 : 35 36 37 40 41 42 43 49 50 51 57 58 59
NE                   : 132 235
OR                   : 121 224
PTR                  : 273 280
REGISTER             : 28
RESTRICT             : 65
RETURN               : 342 343 347 348
SHIFT_LEFT           : 139 242
SHIFT_RIGHT          : 140 243
SHORT                : 31 32 33 46 47 48 54 55 56
SIGNED               : 44 45 46 47 48 49 50 51
SIZEOF               : 159 160 255 256 261
STATIC               : 26
STRING_LITERAL       : 166 282
STRUCT               : 78
SWITCH               : 286 289
TYPEDEF              : 24
UNION                : 79
UNSIGNED             : 52 53 54 55 56 57 58 59
VOID                 : 29
VOLATILE             : 64
WHILE                : 317 318 323 324
[                    : 108 109 110 174 175 176 269 278 361
]                    : 108 109 110 174 175 176 269 278 361
^                    : 127 230
error                : 
{                    : 66 67 68 69 75 76 191 192 290 291 305 306 329 330 356 357
|                    : 125 228
}                    : 66 67 68 69 75 76 191 192 290 291 305 306 329 330 356 357
~                    : 163 266

Nonterminals, with rules where they appear

abstract_declarator  : 115 173
additive_expression  : 138 139 140 142 143
additive_expression_v : 241 242 243 245 246
and_expression       : 126 127 129
and_expression_v     : 229 230 232
argument_expression_list : 271 350
assignment_expression : 206 207 209 349 350 355
assignment_operator  : 209
block_item           : 193 194
block_item_list      : 192 194
block_item_list_switch : 291 293
block_item_list_while : 306 308
block_item_list_while_switch : 330 332
block_item_switch    : 292 293
block_item_while     : 307 308
block_item_while_switch : 331 332
brace_pointer        : 151 154 155 156
cast_expression      : 144 145 146 147 149 158
cast_expression_v    : 247 248 249 250 253 260
compound_statement   : 178 179 198
compound_statement_switch : 297
compound_statement_while : 312
compound_statement_while_switch : 336
conditional_expression : 117 119
conditional_expression_v : 208 222
constant_expression  : 74 92 93 108 109 168 169 175 176 188 189 303 361
declaration          : 4 195 294 309 321 322 327 328 333
declaration_specifiers : 5 6 14 114 115 116 178 179
declaration_specifiers_no_s : 11 17
declaration_specifiers_no_ts : 13 21
declaration_specifiers_no_ts_s : 16 19 23
declarator           : 9 10 91 93 103 114
designation          : 352 354
designator           : 359 360
designator_list      : 358 360
direct_abstract_declarator : 171 172 176
direct_declarator    : 94 95
direct_declarator_forlist : 102 106 107 108
direct_function_declarator : 104 178 179 180 181
enum_specifier       : 61
enumerator           : 71 72
enumerator_list      : 66 67 68 69 72
equality_expression  : 128 129 131 132
equality_expression_v : 231 232 234 235
exclusive_or_expression : 124 125 127
exclusive_or_expression_v : 227 228 230
expression           : 119 167 169 269 278
expression_statement : 199 298 313 319 319 320 320 321 322 325 325 326 326 327 328 337
expression_variable  : 205 207 222 283 284 285 286 287 288 289 317 318 320 322 323 324 326 328 343 348
function_definition  : 3
global_declaration   : 1 2
identifier           : 67 69 70 73 74 75 77 105 109 110 182 183 203 270 271 276
inclusive_or_expression : 122 123 125
inclusive_or_expression_v : 225 226 228
init_declarator      : 7 8
init_declarator_list : 6 8
initializer          : 10 351 352 353 354
initializer_list     : 353 354 356 357
iteration_statement  : 201 315
iteration_statement_switch : 300 339
jump_statement       : 202 301
jump_statement_while : 316 340
labeled_statement    : 197 311
labeled_statement_switch : 296 335
logical_and_expression : 120 121 123
logical_and_expression_v : 223 224 226
logical_or_expression : 118 119 121
logical_or_expression_v : 221 222 224
multiplicative_expression : 141 142 143 145 146 147
multiplicative_expression_v : 244 245 246 248 249 250
parameter_declaration : 112 113 188 189
parameter_list       : 113 187
parameter_list_definition : 111 188
parameter_type_list_definition : 177 182 186
pointer              : 94 98 99 106 170 172 178 180
postfix_expression_v : 257 269 272 273
postfix_expression_v_no_func : 268 274 275 277 278 279 280
primary_expression   : 157
primary_expression_v : 254
relational_expression : 130 131 132 134 135 136 137
relational_expression_v : 233 234 235 237 238 239 240
selection_statement  : 200 299
selection_statement_while : 314 338
shift_expression     : 133 134 135 136 137 139 140
shift_expression_v   : 236 237 238 239 240 242 243
specifier_qualifier_list : 82 85 150 151
specifier_qualifier_list_no_ts : 83 87
start_node           : 1 0
statement            : 196 284 284 285 303 304
statement_switch     : 286 295
statement_while      : 287 287 288 310 317 318 319 320 321 322
statement_while_switch : 289 323 324 325 326 327 328 334
storage_class_specifier : 11 18 19
struct_declaration   : 80 81
struct_declaration_list : 75 76 81
struct_declarator    : 89 90
struct_declarator_list : 82 90
struct_or_union      : 75 76 77
struct_or_union_specifier : 60
type_name            : 149 160 253 256
type_qualifier       : 14 17 20 21 22 23 85 86 87 88 100 101
type_qualifier_list  : 97 99 101 153 156
type_specifier       : 12 13 15 16 83 84
unary_expression     : 148 159
unary_expression_v   : 209 251 258 259 261
unary_expression_v_constance : 252 255
unary_operator       : 158
unary_operator_v     : 260

Parsing method: LALR

state 0

    (0) S' -> . start_node
    (1) start_node -> . start_node global_declaration
    (2) start_node -> . global_declaration
    (3) global_declaration -> . function_definition
    (4) global_declaration -> . declaration
    (178) function_definition -> . declaration_specifiers pointer direct_function_declarator compound_statement
    (179) function_definition -> . declaration_specifiers direct_function_declarator compound_statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    start_node                     shift and go to state 1
    global_declaration             shift and go to state 2
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 1

    (0) S' -> start_node .
    (1) start_node -> start_node . global_declaration
    (3) global_declaration -> . function_definition
    (4) global_declaration -> . declaration
    (178) function_definition -> . declaration_specifiers pointer direct_function_declarator compound_statement
    (179) function_definition -> . declaration_specifiers direct_function_declarator compound_statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    global_declaration             shift and go to state 33
    function_definition            shift and go to state 3
    declaration                    shift and go to state 4
    declaration_specifiers         shift and go to state 5
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 2

    (2) start_node -> global_declaration .

    TYPEDEF         reduce using rule 2 (start_node -> global_declaration .)
    EXTERN          reduce using rule 2 (start_node -> global_declaration .)
    STATIC          reduce using rule 2 (start_node -> global_declaration .)
    AUTO            reduce using rule 2 (start_node -> global_declaration .)
    REGISTER        reduce using rule 2 (start_node -> global_declaration .)
    VOID            reduce using rule 2 (start_node -> global_declaration .)
    CHAR            reduce using rule 2 (start_node -> global_declaration .)
    SHORT           reduce using rule 2 (start_node -> global_declaration .)
    INT             reduce using rule 2 (start_node -> global_declaration .)
    LONG            reduce using rule 2 (start_node -> global_declaration .)
    FLOAT           reduce using rule 2 (start_node -> global_declaration .)
    DOUBLE          reduce using rule 2 (start_node -> global_declaration .)
    SIGNED          reduce using rule 2 (start_node -> global_declaration .)
    UNSIGNED        reduce using rule 2 (start_node -> global_declaration .)
    BOOL            reduce using rule 2 (start_node -> global_declaration .)
    CONST           reduce using rule 2 (start_node -> global_declaration .)
    VOLATILE        reduce using rule 2 (start_node -> global_declaration .)
    RESTRICT        reduce using rule 2 (start_node -> global_declaration .)
    ENUM            reduce using rule 2 (start_node -> global_declaration .)
    STRUCT          reduce using rule 2 (start_node -> global_declaration .)
    UNION           reduce using rule 2 (start_node -> global_declaration .)
    $end            reduce using rule 2 (start_node -> global_declaration .)


state 3

    (3) global_declaration -> function_definition .

    TYPEDEF         reduce using rule 3 (global_declaration -> function_definition .)
    EXTERN          reduce using rule 3 (global_declaration -> function_definition .)
    STATIC          reduce using rule 3 (global_declaration -> function_definition .)
    AUTO            reduce using rule 3 (global_declaration -> function_definition .)
    REGISTER        reduce using rule 3 (global_declaration -> function_definition .)
    VOID            reduce using rule 3 (global_declaration -> function_definition .)
    CHAR            reduce using rule 3 (global_declaration -> function_definition .)
    SHORT           reduce using rule 3 (global_declaration -> function_definition .)
    INT             reduce using rule 3 (global_declaration -> function_definition .)
    LONG            reduce using rule 3 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 3 (global_declaration -> function_definition .)
    DOUBLE          reduce using rule 3 (global_declaration -> function_definition .)
    SIGNED          reduce using rule 3 (global_declaration -> function_definition .)
    UNSIGNED        reduce using rule 3 (global_declaration -> function_definition .)
    BOOL            reduce using rule 3 (global_declaration -> function_definition .)
    CONST           reduce using rule 3 (global_declaration -> function_definition .)
    VOLATILE        reduce using rule 3 (global_declaration -> function_definition .)
    RESTRICT        reduce using rule 3 (global_declaration -> function_definition .)
    ENUM            reduce using rule 3 (global_declaration -> function_definition .)
    STRUCT          reduce using rule 3 (global_declaration -> function_definition .)
    UNION           reduce using rule 3 (global_declaration -> function_definition .)
    $end            reduce using rule 3 (global_declaration -> function_definition .)


state 4

    (4) global_declaration -> declaration .

    TYPEDEF         reduce using rule 4 (global_declaration -> declaration .)
    EXTERN          reduce using rule 4 (global_declaration -> declaration .)
    STATIC          reduce using rule 4 (global_declaration -> declaration .)
    AUTO            reduce using rule 4 (global_declaration -> declaration .)
    REGISTER        reduce using rule 4 (global_declaration -> declaration .)
    VOID            reduce using rule 4 (global_declaration -> declaration .)
    CHAR            reduce using rule 4 (global_declaration -> declaration .)
    SHORT           reduce using rule 4 (global_declaration -> declaration .)
    INT             reduce using rule 4 (global_declaration -> declaration .)
    LONG            reduce using rule 4 (global_declaration -> declaration .)
    FLOAT           reduce using rule 4 (global_declaration -> declaration .)
    DOUBLE          reduce using rule 4 (global_declaration -> declaration .)
    SIGNED          reduce using rule 4 (global_declaration -> declaration .)
    UNSIGNED        reduce using rule 4 (global_declaration -> declaration .)
    BOOL            reduce using rule 4 (global_declaration -> declaration .)
    CONST           reduce using rule 4 (global_declaration -> declaration .)
    VOLATILE        reduce using rule 4 (global_declaration -> declaration .)
    RESTRICT        reduce using rule 4 (global_declaration -> declaration .)
    ENUM            reduce using rule 4 (global_declaration -> declaration .)
    STRUCT          reduce using rule 4 (global_declaration -> declaration .)
    UNION           reduce using rule 4 (global_declaration -> declaration .)
    $end            reduce using rule 4 (global_declaration -> declaration .)


state 5

    (178) function_definition -> declaration_specifiers . pointer direct_function_declarator compound_statement
    (179) function_definition -> declaration_specifiers . direct_function_declarator compound_statement
    (5) declaration -> declaration_specifiers . ;
    (6) declaration -> declaration_specifiers . init_declarator_list ;
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (7) init_declarator_list -> . init_declarator
    (8) init_declarator_list -> . init_declarator_list , init_declarator
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (9) init_declarator -> . declarator
    (10) init_declarator -> . declarator = initializer
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]

    ;               shift and go to state 36
    *               shift and go to state 38
    (               shift and go to state 39
    ID              shift and go to state 42

    pointer                        shift and go to state 34
    direct_function_declarator     shift and go to state 35
    init_declarator_list           shift and go to state 37
    identifier                     shift and go to state 40
    init_declarator                shift and go to state 41
    declarator                     shift and go to state 43
    direct_declarator              shift and go to state 44
    direct_declarator_forlist      shift and go to state 45

state 6

    (11) declaration_specifiers -> storage_class_specifier . declaration_specifiers_no_s
    (15) declaration_specifiers_no_s -> . type_specifier
    (16) declaration_specifiers_no_s -> . type_specifier declaration_specifiers_no_ts_s
    (17) declaration_specifiers_no_s -> . type_qualifier declaration_specifiers_no_s
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    declaration_specifiers_no_s    shift and go to state 46
    type_specifier                 shift and go to state 47
    type_qualifier                 shift and go to state 48
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 7

    (12) declaration_specifiers -> type_specifier .
    (13) declaration_specifiers -> type_specifier . declaration_specifiers_no_ts
    (18) declaration_specifiers_no_ts -> . storage_class_specifier
    (19) declaration_specifiers_no_ts -> . storage_class_specifier declaration_specifiers_no_ts_s
    (20) declaration_specifiers_no_ts -> . type_qualifier
    (21) declaration_specifiers_no_ts -> . type_qualifier declaration_specifiers_no_ts
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    ;               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    *               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    (               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    ID              reduce using rule 12 (declaration_specifiers -> type_specifier .)
    [               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    ,               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    =               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    )               reduce using rule 12 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    declaration_specifiers_no_ts   shift and go to state 49
    storage_class_specifier        shift and go to state 50
    type_qualifier                 shift and go to state 51

state 8

    (14) declaration_specifiers -> type_qualifier . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    type_qualifier                 shift and go to state 8
    declaration_specifiers         shift and go to state 52
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 9

    (24) storage_class_specifier -> TYPEDEF .

    VOID            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    RESTRICT        reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    ;               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    *               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    (               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    ID              reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    [               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    ,               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    =               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)
    )               reduce using rule 24 (storage_class_specifier -> TYPEDEF .)


state 10

    (25) storage_class_specifier -> EXTERN .

    VOID            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 25 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 25 (storage_class_specifier -> EXTERN .)
    BOOL            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 25 (storage_class_specifier -> EXTERN .)
    RESTRICT        reduce using rule 25 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 25 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 25 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 25 (storage_class_specifier -> EXTERN .)
    ;               reduce using rule 25 (storage_class_specifier -> EXTERN .)
    *               reduce using rule 25 (storage_class_specifier -> EXTERN .)
    (               reduce using rule 25 (storage_class_specifier -> EXTERN .)
    ID              reduce using rule 25 (storage_class_specifier -> EXTERN .)
    [               reduce using rule 25 (storage_class_specifier -> EXTERN .)
    ,               reduce using rule 25 (storage_class_specifier -> EXTERN .)
    =               reduce using rule 25 (storage_class_specifier -> EXTERN .)
    )               reduce using rule 25 (storage_class_specifier -> EXTERN .)


state 11

    (26) storage_class_specifier -> STATIC .

    VOID            reduce using rule 26 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 26 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 26 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 26 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 26 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 26 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 26 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 26 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 26 (storage_class_specifier -> STATIC .)
    BOOL            reduce using rule 26 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 26 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 26 (storage_class_specifier -> STATIC .)
    RESTRICT        reduce using rule 26 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 26 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 26 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 26 (storage_class_specifier -> STATIC .)
    ;               reduce using rule 26 (storage_class_specifier -> STATIC .)
    *               reduce using rule 26 (storage_class_specifier -> STATIC .)
    (               reduce using rule 26 (storage_class_specifier -> STATIC .)
    ID              reduce using rule 26 (storage_class_specifier -> STATIC .)
    [               reduce using rule 26 (storage_class_specifier -> STATIC .)
    ,               reduce using rule 26 (storage_class_specifier -> STATIC .)
    =               reduce using rule 26 (storage_class_specifier -> STATIC .)
    )               reduce using rule 26 (storage_class_specifier -> STATIC .)


state 12

    (27) storage_class_specifier -> AUTO .

    VOID            reduce using rule 27 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 27 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 27 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 27 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 27 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 27 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 27 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 27 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 27 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 27 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 27 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 27 (storage_class_specifier -> AUTO .)
    RESTRICT        reduce using rule 27 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 27 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 27 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 27 (storage_class_specifier -> AUTO .)
    ;               reduce using rule 27 (storage_class_specifier -> AUTO .)
    *               reduce using rule 27 (storage_class_specifier -> AUTO .)
    (               reduce using rule 27 (storage_class_specifier -> AUTO .)
    ID              reduce using rule 27 (storage_class_specifier -> AUTO .)
    [               reduce using rule 27 (storage_class_specifier -> AUTO .)
    ,               reduce using rule 27 (storage_class_specifier -> AUTO .)
    =               reduce using rule 27 (storage_class_specifier -> AUTO .)
    )               reduce using rule 27 (storage_class_specifier -> AUTO .)


state 13

    (28) storage_class_specifier -> REGISTER .

    VOID            reduce using rule 28 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 28 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 28 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 28 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 28 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 28 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 28 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 28 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 28 (storage_class_specifier -> REGISTER .)
    BOOL            reduce using rule 28 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 28 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 28 (storage_class_specifier -> REGISTER .)
    RESTRICT        reduce using rule 28 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 28 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 28 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 28 (storage_class_specifier -> REGISTER .)
    ;               reduce using rule 28 (storage_class_specifier -> REGISTER .)
    *               reduce using rule 28 (storage_class_specifier -> REGISTER .)
    (               reduce using rule 28 (storage_class_specifier -> REGISTER .)
    ID              reduce using rule 28 (storage_class_specifier -> REGISTER .)
    [               reduce using rule 28 (storage_class_specifier -> REGISTER .)
    ,               reduce using rule 28 (storage_class_specifier -> REGISTER .)
    =               reduce using rule 28 (storage_class_specifier -> REGISTER .)
    )               reduce using rule 28 (storage_class_specifier -> REGISTER .)


state 14

    (29) type_specifier -> VOID .

    TYPEDEF         reduce using rule 29 (type_specifier -> VOID .)
    EXTERN          reduce using rule 29 (type_specifier -> VOID .)
    STATIC          reduce using rule 29 (type_specifier -> VOID .)
    AUTO            reduce using rule 29 (type_specifier -> VOID .)
    REGISTER        reduce using rule 29 (type_specifier -> VOID .)
    CONST           reduce using rule 29 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 29 (type_specifier -> VOID .)
    RESTRICT        reduce using rule 29 (type_specifier -> VOID .)
    ;               reduce using rule 29 (type_specifier -> VOID .)
    *               reduce using rule 29 (type_specifier -> VOID .)
    (               reduce using rule 29 (type_specifier -> VOID .)
    ID              reduce using rule 29 (type_specifier -> VOID .)
    [               reduce using rule 29 (type_specifier -> VOID .)
    ,               reduce using rule 29 (type_specifier -> VOID .)
    =               reduce using rule 29 (type_specifier -> VOID .)
    )               reduce using rule 29 (type_specifier -> VOID .)
    :               reduce using rule 29 (type_specifier -> VOID .)


state 15

    (30) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 30 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 30 (type_specifier -> CHAR .)
    STATIC          reduce using rule 30 (type_specifier -> CHAR .)
    AUTO            reduce using rule 30 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 30 (type_specifier -> CHAR .)
    CONST           reduce using rule 30 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 30 (type_specifier -> CHAR .)
    RESTRICT        reduce using rule 30 (type_specifier -> CHAR .)
    ;               reduce using rule 30 (type_specifier -> CHAR .)
    *               reduce using rule 30 (type_specifier -> CHAR .)
    (               reduce using rule 30 (type_specifier -> CHAR .)
    ID              reduce using rule 30 (type_specifier -> CHAR .)
    [               reduce using rule 30 (type_specifier -> CHAR .)
    ,               reduce using rule 30 (type_specifier -> CHAR .)
    =               reduce using rule 30 (type_specifier -> CHAR .)
    )               reduce using rule 30 (type_specifier -> CHAR .)
    :               reduce using rule 30 (type_specifier -> CHAR .)


state 16

    (31) type_specifier -> SHORT .
    (32) type_specifier -> SHORT . INT

    TYPEDEF         reduce using rule 31 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 31 (type_specifier -> SHORT .)
    STATIC          reduce using rule 31 (type_specifier -> SHORT .)
    AUTO            reduce using rule 31 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 31 (type_specifier -> SHORT .)
    CONST           reduce using rule 31 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 31 (type_specifier -> SHORT .)
    RESTRICT        reduce using rule 31 (type_specifier -> SHORT .)
    ;               reduce using rule 31 (type_specifier -> SHORT .)
    *               reduce using rule 31 (type_specifier -> SHORT .)
    (               reduce using rule 31 (type_specifier -> SHORT .)
    ID              reduce using rule 31 (type_specifier -> SHORT .)
    [               reduce using rule 31 (type_specifier -> SHORT .)
    ,               reduce using rule 31 (type_specifier -> SHORT .)
    =               reduce using rule 31 (type_specifier -> SHORT .)
    )               reduce using rule 31 (type_specifier -> SHORT .)
    :               reduce using rule 31 (type_specifier -> SHORT .)
    INT             shift and go to state 53


state 17

    (33) type_specifier -> INT . SHORT
    (34) type_specifier -> INT .
    (37) type_specifier -> INT . LONG

    SHORT           shift and go to state 54
    TYPEDEF         reduce using rule 34 (type_specifier -> INT .)
    EXTERN          reduce using rule 34 (type_specifier -> INT .)
    STATIC          reduce using rule 34 (type_specifier -> INT .)
    AUTO            reduce using rule 34 (type_specifier -> INT .)
    REGISTER        reduce using rule 34 (type_specifier -> INT .)
    CONST           reduce using rule 34 (type_specifier -> INT .)
    VOLATILE        reduce using rule 34 (type_specifier -> INT .)
    RESTRICT        reduce using rule 34 (type_specifier -> INT .)
    ;               reduce using rule 34 (type_specifier -> INT .)
    *               reduce using rule 34 (type_specifier -> INT .)
    (               reduce using rule 34 (type_specifier -> INT .)
    ID              reduce using rule 34 (type_specifier -> INT .)
    [               reduce using rule 34 (type_specifier -> INT .)
    ,               reduce using rule 34 (type_specifier -> INT .)
    =               reduce using rule 34 (type_specifier -> INT .)
    )               reduce using rule 34 (type_specifier -> INT .)
    :               reduce using rule 34 (type_specifier -> INT .)
    LONG            shift and go to state 55


state 18

    (35) type_specifier -> LONG .
    (36) type_specifier -> LONG . INT
    (41) type_specifier -> LONG . FLOAT
    (43) type_specifier -> LONG . DOUBLE

    TYPEDEF         reduce using rule 35 (type_specifier -> LONG .)
    EXTERN          reduce using rule 35 (type_specifier -> LONG .)
    STATIC          reduce using rule 35 (type_specifier -> LONG .)
    AUTO            reduce using rule 35 (type_specifier -> LONG .)
    REGISTER        reduce using rule 35 (type_specifier -> LONG .)
    CONST           reduce using rule 35 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 35 (type_specifier -> LONG .)
    RESTRICT        reduce using rule 35 (type_specifier -> LONG .)
    ;               reduce using rule 35 (type_specifier -> LONG .)
    *               reduce using rule 35 (type_specifier -> LONG .)
    (               reduce using rule 35 (type_specifier -> LONG .)
    ID              reduce using rule 35 (type_specifier -> LONG .)
    [               reduce using rule 35 (type_specifier -> LONG .)
    ,               reduce using rule 35 (type_specifier -> LONG .)
    =               reduce using rule 35 (type_specifier -> LONG .)
    )               reduce using rule 35 (type_specifier -> LONG .)
    :               reduce using rule 35 (type_specifier -> LONG .)
    INT             shift and go to state 56
    FLOAT           shift and go to state 57
    DOUBLE          shift and go to state 58


state 19

    (38) type_specifier -> FLOAT .
    (40) type_specifier -> FLOAT . LONG

    TYPEDEF         reduce using rule 38 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 38 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 38 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 38 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 38 (type_specifier -> FLOAT .)
    CONST           reduce using rule 38 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 38 (type_specifier -> FLOAT .)
    RESTRICT        reduce using rule 38 (type_specifier -> FLOAT .)
    ;               reduce using rule 38 (type_specifier -> FLOAT .)
    *               reduce using rule 38 (type_specifier -> FLOAT .)
    (               reduce using rule 38 (type_specifier -> FLOAT .)
    ID              reduce using rule 38 (type_specifier -> FLOAT .)
    [               reduce using rule 38 (type_specifier -> FLOAT .)
    ,               reduce using rule 38 (type_specifier -> FLOAT .)
    =               reduce using rule 38 (type_specifier -> FLOAT .)
    )               reduce using rule 38 (type_specifier -> FLOAT .)
    :               reduce using rule 38 (type_specifier -> FLOAT .)
    LONG            shift and go to state 59


state 20

    (39) type_specifier -> DOUBLE .
    (42) type_specifier -> DOUBLE . LONG

    TYPEDEF         reduce using rule 39 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 39 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 39 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 39 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 39 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 39 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 39 (type_specifier -> DOUBLE .)
    RESTRICT        reduce using rule 39 (type_specifier -> DOUBLE .)
    ;               reduce using rule 39 (type_specifier -> DOUBLE .)
    *               reduce using rule 39 (type_specifier -> DOUBLE .)
    (               reduce using rule 39 (type_specifier -> DOUBLE .)
    ID              reduce using rule 39 (type_specifier -> DOUBLE .)
    [               reduce using rule 39 (type_specifier -> DOUBLE .)
    ,               reduce using rule 39 (type_specifier -> DOUBLE .)
    =               reduce using rule 39 (type_specifier -> DOUBLE .)
    )               reduce using rule 39 (type_specifier -> DOUBLE .)
    :               reduce using rule 39 (type_specifier -> DOUBLE .)
    LONG            shift and go to state 60


state 21

    (44) type_specifier -> SIGNED .
    (45) type_specifier -> SIGNED . INT
    (46) type_specifier -> SIGNED . SHORT
    (47) type_specifier -> SIGNED . SHORT INT
    (48) type_specifier -> SIGNED . INT SHORT
    (49) type_specifier -> SIGNED . LONG
    (50) type_specifier -> SIGNED . LONG INT
    (51) type_specifier -> SIGNED . INT LONG

    TYPEDEF         reduce using rule 44 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 44 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 44 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 44 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 44 (type_specifier -> SIGNED .)
    CONST           reduce using rule 44 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 44 (type_specifier -> SIGNED .)
    RESTRICT        reduce using rule 44 (type_specifier -> SIGNED .)
    ;               reduce using rule 44 (type_specifier -> SIGNED .)
    *               reduce using rule 44 (type_specifier -> SIGNED .)
    (               reduce using rule 44 (type_specifier -> SIGNED .)
    ID              reduce using rule 44 (type_specifier -> SIGNED .)
    [               reduce using rule 44 (type_specifier -> SIGNED .)
    ,               reduce using rule 44 (type_specifier -> SIGNED .)
    =               reduce using rule 44 (type_specifier -> SIGNED .)
    )               reduce using rule 44 (type_specifier -> SIGNED .)
    :               reduce using rule 44 (type_specifier -> SIGNED .)
    INT             shift and go to state 61
    SHORT           shift and go to state 62
    LONG            shift and go to state 63


state 22

    (52) type_specifier -> UNSIGNED .
    (53) type_specifier -> UNSIGNED . INT
    (54) type_specifier -> UNSIGNED . SHORT
    (55) type_specifier -> UNSIGNED . SHORT INT
    (56) type_specifier -> UNSIGNED . INT SHORT
    (57) type_specifier -> UNSIGNED . LONG
    (58) type_specifier -> UNSIGNED . LONG INT
    (59) type_specifier -> UNSIGNED . INT LONG

    TYPEDEF         reduce using rule 52 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 52 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 52 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 52 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 52 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 52 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 52 (type_specifier -> UNSIGNED .)
    RESTRICT        reduce using rule 52 (type_specifier -> UNSIGNED .)
    ;               reduce using rule 52 (type_specifier -> UNSIGNED .)
    *               reduce using rule 52 (type_specifier -> UNSIGNED .)
    (               reduce using rule 52 (type_specifier -> UNSIGNED .)
    ID              reduce using rule 52 (type_specifier -> UNSIGNED .)
    [               reduce using rule 52 (type_specifier -> UNSIGNED .)
    ,               reduce using rule 52 (type_specifier -> UNSIGNED .)
    =               reduce using rule 52 (type_specifier -> UNSIGNED .)
    )               reduce using rule 52 (type_specifier -> UNSIGNED .)
    :               reduce using rule 52 (type_specifier -> UNSIGNED .)
    INT             shift and go to state 64
    SHORT           shift and go to state 65
    LONG            shift and go to state 66


state 23

    (60) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    RESTRICT        reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    ;               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    *               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    (               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    ID              reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    [               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    ,               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    =               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    )               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)
    :               reduce using rule 60 (type_specifier -> struct_or_union_specifier .)


state 24

    (61) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 61 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 61 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 61 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 61 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 61 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 61 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 61 (type_specifier -> enum_specifier .)
    RESTRICT        reduce using rule 61 (type_specifier -> enum_specifier .)
    ;               reduce using rule 61 (type_specifier -> enum_specifier .)
    *               reduce using rule 61 (type_specifier -> enum_specifier .)
    (               reduce using rule 61 (type_specifier -> enum_specifier .)
    ID              reduce using rule 61 (type_specifier -> enum_specifier .)
    [               reduce using rule 61 (type_specifier -> enum_specifier .)
    ,               reduce using rule 61 (type_specifier -> enum_specifier .)
    =               reduce using rule 61 (type_specifier -> enum_specifier .)
    )               reduce using rule 61 (type_specifier -> enum_specifier .)
    :               reduce using rule 61 (type_specifier -> enum_specifier .)


state 25

    (62) type_specifier -> BOOL .

    TYPEDEF         reduce using rule 62 (type_specifier -> BOOL .)
    EXTERN          reduce using rule 62 (type_specifier -> BOOL .)
    STATIC          reduce using rule 62 (type_specifier -> BOOL .)
    AUTO            reduce using rule 62 (type_specifier -> BOOL .)
    REGISTER        reduce using rule 62 (type_specifier -> BOOL .)
    CONST           reduce using rule 62 (type_specifier -> BOOL .)
    VOLATILE        reduce using rule 62 (type_specifier -> BOOL .)
    RESTRICT        reduce using rule 62 (type_specifier -> BOOL .)
    ;               reduce using rule 62 (type_specifier -> BOOL .)
    *               reduce using rule 62 (type_specifier -> BOOL .)
    (               reduce using rule 62 (type_specifier -> BOOL .)
    ID              reduce using rule 62 (type_specifier -> BOOL .)
    [               reduce using rule 62 (type_specifier -> BOOL .)
    ,               reduce using rule 62 (type_specifier -> BOOL .)
    =               reduce using rule 62 (type_specifier -> BOOL .)
    )               reduce using rule 62 (type_specifier -> BOOL .)
    :               reduce using rule 62 (type_specifier -> BOOL .)


state 26

    (63) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 63 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 63 (type_qualifier -> CONST .)
    STATIC          reduce using rule 63 (type_qualifier -> CONST .)
    AUTO            reduce using rule 63 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 63 (type_qualifier -> CONST .)
    VOID            reduce using rule 63 (type_qualifier -> CONST .)
    CHAR            reduce using rule 63 (type_qualifier -> CONST .)
    SHORT           reduce using rule 63 (type_qualifier -> CONST .)
    INT             reduce using rule 63 (type_qualifier -> CONST .)
    LONG            reduce using rule 63 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 63 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 63 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 63 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 63 (type_qualifier -> CONST .)
    BOOL            reduce using rule 63 (type_qualifier -> CONST .)
    CONST           reduce using rule 63 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 63 (type_qualifier -> CONST .)
    RESTRICT        reduce using rule 63 (type_qualifier -> CONST .)
    ENUM            reduce using rule 63 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 63 (type_qualifier -> CONST .)
    UNION           reduce using rule 63 (type_qualifier -> CONST .)
    ;               reduce using rule 63 (type_qualifier -> CONST .)
    *               reduce using rule 63 (type_qualifier -> CONST .)
    (               reduce using rule 63 (type_qualifier -> CONST .)
    ID              reduce using rule 63 (type_qualifier -> CONST .)
    [               reduce using rule 63 (type_qualifier -> CONST .)
    ,               reduce using rule 63 (type_qualifier -> CONST .)
    =               reduce using rule 63 (type_qualifier -> CONST .)
    )               reduce using rule 63 (type_qualifier -> CONST .)
    :               reduce using rule 63 (type_qualifier -> CONST .)


state 27

    (64) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 64 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 64 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 64 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 64 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 64 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 64 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 64 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 64 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 64 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 64 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 64 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 64 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 64 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 64 (type_qualifier -> VOLATILE .)
    BOOL            reduce using rule 64 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 64 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 64 (type_qualifier -> VOLATILE .)
    RESTRICT        reduce using rule 64 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 64 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 64 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 64 (type_qualifier -> VOLATILE .)
    ;               reduce using rule 64 (type_qualifier -> VOLATILE .)
    *               reduce using rule 64 (type_qualifier -> VOLATILE .)
    (               reduce using rule 64 (type_qualifier -> VOLATILE .)
    ID              reduce using rule 64 (type_qualifier -> VOLATILE .)
    [               reduce using rule 64 (type_qualifier -> VOLATILE .)
    ,               reduce using rule 64 (type_qualifier -> VOLATILE .)
    =               reduce using rule 64 (type_qualifier -> VOLATILE .)
    )               reduce using rule 64 (type_qualifier -> VOLATILE .)
    :               reduce using rule 64 (type_qualifier -> VOLATILE .)


state 28

    (65) type_qualifier -> RESTRICT .

    TYPEDEF         reduce using rule 65 (type_qualifier -> RESTRICT .)
    EXTERN          reduce using rule 65 (type_qualifier -> RESTRICT .)
    STATIC          reduce using rule 65 (type_qualifier -> RESTRICT .)
    AUTO            reduce using rule 65 (type_qualifier -> RESTRICT .)
    REGISTER        reduce using rule 65 (type_qualifier -> RESTRICT .)
    VOID            reduce using rule 65 (type_qualifier -> RESTRICT .)
    CHAR            reduce using rule 65 (type_qualifier -> RESTRICT .)
    SHORT           reduce using rule 65 (type_qualifier -> RESTRICT .)
    INT             reduce using rule 65 (type_qualifier -> RESTRICT .)
    LONG            reduce using rule 65 (type_qualifier -> RESTRICT .)
    FLOAT           reduce using rule 65 (type_qualifier -> RESTRICT .)
    DOUBLE          reduce using rule 65 (type_qualifier -> RESTRICT .)
    SIGNED          reduce using rule 65 (type_qualifier -> RESTRICT .)
    UNSIGNED        reduce using rule 65 (type_qualifier -> RESTRICT .)
    BOOL            reduce using rule 65 (type_qualifier -> RESTRICT .)
    CONST           reduce using rule 65 (type_qualifier -> RESTRICT .)
    VOLATILE        reduce using rule 65 (type_qualifier -> RESTRICT .)
    RESTRICT        reduce using rule 65 (type_qualifier -> RESTRICT .)
    ENUM            reduce using rule 65 (type_qualifier -> RESTRICT .)
    STRUCT          reduce using rule 65 (type_qualifier -> RESTRICT .)
    UNION           reduce using rule 65 (type_qualifier -> RESTRICT .)
    ;               reduce using rule 65 (type_qualifier -> RESTRICT .)
    *               reduce using rule 65 (type_qualifier -> RESTRICT .)
    (               reduce using rule 65 (type_qualifier -> RESTRICT .)
    ID              reduce using rule 65 (type_qualifier -> RESTRICT .)
    [               reduce using rule 65 (type_qualifier -> RESTRICT .)
    ,               reduce using rule 65 (type_qualifier -> RESTRICT .)
    =               reduce using rule 65 (type_qualifier -> RESTRICT .)
    )               reduce using rule 65 (type_qualifier -> RESTRICT .)
    :               reduce using rule 65 (type_qualifier -> RESTRICT .)


state 29

    (75) struct_or_union_specifier -> struct_or_union . identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> struct_or_union . { struct_declaration_list }
    (77) struct_or_union_specifier -> struct_or_union . identifier
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    {               shift and go to state 68
    (               shift and go to state 69
    ID              shift and go to state 42

    identifier                     shift and go to state 67

state 30

    (66) enum_specifier -> ENUM . { enumerator_list }
    (67) enum_specifier -> ENUM . identifier { enumerator_list }
    (68) enum_specifier -> ENUM . { enumerator_list , }
    (69) enum_specifier -> ENUM . identifier { enumerator_list , }
    (70) enum_specifier -> ENUM . identifier
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    {               shift and go to state 70
    (               shift and go to state 69
    ID              shift and go to state 42

    identifier                     shift and go to state 71

state 31

    (78) struct_or_union -> STRUCT .

    {               reduce using rule 78 (struct_or_union -> STRUCT .)
    (               reduce using rule 78 (struct_or_union -> STRUCT .)
    ID              reduce using rule 78 (struct_or_union -> STRUCT .)


state 32

    (79) struct_or_union -> UNION .

    {               reduce using rule 79 (struct_or_union -> UNION .)
    (               reduce using rule 79 (struct_or_union -> UNION .)
    ID              reduce using rule 79 (struct_or_union -> UNION .)


state 33

    (1) start_node -> start_node global_declaration .

    TYPEDEF         reduce using rule 1 (start_node -> start_node global_declaration .)
    EXTERN          reduce using rule 1 (start_node -> start_node global_declaration .)
    STATIC          reduce using rule 1 (start_node -> start_node global_declaration .)
    AUTO            reduce using rule 1 (start_node -> start_node global_declaration .)
    REGISTER        reduce using rule 1 (start_node -> start_node global_declaration .)
    VOID            reduce using rule 1 (start_node -> start_node global_declaration .)
    CHAR            reduce using rule 1 (start_node -> start_node global_declaration .)
    SHORT           reduce using rule 1 (start_node -> start_node global_declaration .)
    INT             reduce using rule 1 (start_node -> start_node global_declaration .)
    LONG            reduce using rule 1 (start_node -> start_node global_declaration .)
    FLOAT           reduce using rule 1 (start_node -> start_node global_declaration .)
    DOUBLE          reduce using rule 1 (start_node -> start_node global_declaration .)
    SIGNED          reduce using rule 1 (start_node -> start_node global_declaration .)
    UNSIGNED        reduce using rule 1 (start_node -> start_node global_declaration .)
    BOOL            reduce using rule 1 (start_node -> start_node global_declaration .)
    CONST           reduce using rule 1 (start_node -> start_node global_declaration .)
    VOLATILE        reduce using rule 1 (start_node -> start_node global_declaration .)
    RESTRICT        reduce using rule 1 (start_node -> start_node global_declaration .)
    ENUM            reduce using rule 1 (start_node -> start_node global_declaration .)
    STRUCT          reduce using rule 1 (start_node -> start_node global_declaration .)
    UNION           reduce using rule 1 (start_node -> start_node global_declaration .)
    $end            reduce using rule 1 (start_node -> start_node global_declaration .)


state 34

    (178) function_definition -> declaration_specifiers pointer . direct_function_declarator compound_statement
    (94) declarator -> pointer . direct_declarator
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]

    (               shift and go to state 74
    ID              shift and go to state 42

    direct_function_declarator     shift and go to state 72
    direct_declarator              shift and go to state 73
    identifier                     shift and go to state 40
    direct_declarator_forlist      shift and go to state 45

state 35

    (179) function_definition -> declaration_specifiers direct_function_declarator . compound_statement
    (104) direct_declarator -> direct_function_declarator .
    (191) compound_statement -> . { }
    (192) compound_statement -> . { block_item_list }

    =               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    ;               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    ,               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    {               shift and go to state 76

    compound_statement             shift and go to state 75

state 36

    (5) declaration -> declaration_specifiers ; .

    TYPEDEF         reduce using rule 5 (declaration -> declaration_specifiers ; .)
    EXTERN          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    STATIC          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    AUTO            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    REGISTER        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    VOID            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CHAR            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SHORT           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    INT             reduce using rule 5 (declaration -> declaration_specifiers ; .)
    LONG            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    FLOAT           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DOUBLE          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SIGNED          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    UNSIGNED        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    BOOL            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CONST           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    VOLATILE        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    RESTRICT        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ENUM            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    STRUCT          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    UNION           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    $end            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    }               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    {               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ;               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    IF              reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SWITCH          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    WHILE           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DO              reduce using rule 5 (declaration -> declaration_specifiers ; .)
    FOR             reduce using rule 5 (declaration -> declaration_specifiers ; .)
    GOTO            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    RETURN          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    (               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ID              reduce using rule 5 (declaration -> declaration_specifiers ; .)
    INC             reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DEC             reduce using rule 5 (declaration -> declaration_specifiers ; .)
    SIZEOF          reduce using rule 5 (declaration -> declaration_specifiers ; .)
    &               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    *               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    +               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    -               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    ~               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    !               reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CONSTANCE       reduce using rule 5 (declaration -> declaration_specifiers ; .)
    STRING_LITERAL  reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CONTINUE        reduce using rule 5 (declaration -> declaration_specifiers ; .)
    BREAK           reduce using rule 5 (declaration -> declaration_specifiers ; .)
    CASE            reduce using rule 5 (declaration -> declaration_specifiers ; .)
    DEFAULT         reduce using rule 5 (declaration -> declaration_specifiers ; .)


state 37

    (6) declaration -> declaration_specifiers init_declarator_list . ;
    (8) init_declarator_list -> init_declarator_list . , init_declarator

    ;               shift and go to state 77
    ,               shift and go to state 78


state 38

    (96) pointer -> * .
    (97) pointer -> * . type_qualifier_list
    (98) pointer -> * . pointer
    (99) pointer -> * . type_qualifier_list pointer
    (100) type_qualifier_list -> . type_qualifier
    (101) type_qualifier_list -> . type_qualifier_list type_qualifier
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    (               reduce using rule 96 (pointer -> * .)
    ID              reduce using rule 96 (pointer -> * .)
    [               reduce using rule 96 (pointer -> * .)
    ,               reduce using rule 96 (pointer -> * .)
    =               reduce using rule 96 (pointer -> * .)
    )               reduce using rule 96 (pointer -> * .)
    *               shift and go to state 38
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    type_qualifier_list            shift and go to state 79
    pointer                        shift and go to state 80
    type_qualifier                 shift and go to state 81

state 39

    (180) direct_function_declarator -> ( . pointer direct_function_declarator )
    (181) direct_function_declarator -> ( . direct_function_declarator )
    (183) identifier -> ( . identifier )
    (103) direct_declarator -> ( . declarator )
    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    *               shift and go to state 38
    (               shift and go to state 82
    ID              shift and go to state 42

    pointer                        shift and go to state 83
    direct_function_declarator     shift and go to state 84
    identifier                     shift and go to state 85
    declarator                     shift and go to state 86
    direct_declarator_forlist      shift and go to state 87
    direct_declarator              shift and go to state 44

state 40

    (182) direct_function_declarator -> identifier . parameter_type_list_definition
    (105) direct_declarator_forlist -> identifier .
    (109) direct_declarator_forlist -> identifier . [ constant_expression ]
    (110) direct_declarator_forlist -> identifier . [ ]
    (185) parameter_type_list_definition -> . ( )
    (186) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (187) parameter_type_list_definition -> . ( parameter_list )

  ! shift/reduce conflict for [ resolved as shift
    =               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    ;               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    ,               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    )               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    [               shift and go to state 89
    (               shift and go to state 90

  ! [               [ reduce using rule 105 (direct_declarator_forlist -> identifier .) ]

    parameter_type_list_definition shift and go to state 88

state 41

    (7) init_declarator_list -> init_declarator .

    ;               reduce using rule 7 (init_declarator_list -> init_declarator .)
    ,               reduce using rule 7 (init_declarator_list -> init_declarator .)


state 42

    (184) identifier -> ID .

    [               reduce using rule 184 (identifier -> ID .)
    (               reduce using rule 184 (identifier -> ID .)
    =               reduce using rule 184 (identifier -> ID .)
    ;               reduce using rule 184 (identifier -> ID .)
    ,               reduce using rule 184 (identifier -> ID .)
    {               reduce using rule 184 (identifier -> ID .)
    TYPEDEF         reduce using rule 184 (identifier -> ID .)
    EXTERN          reduce using rule 184 (identifier -> ID .)
    STATIC          reduce using rule 184 (identifier -> ID .)
    AUTO            reduce using rule 184 (identifier -> ID .)
    REGISTER        reduce using rule 184 (identifier -> ID .)
    CONST           reduce using rule 184 (identifier -> ID .)
    VOLATILE        reduce using rule 184 (identifier -> ID .)
    RESTRICT        reduce using rule 184 (identifier -> ID .)
    *               reduce using rule 184 (identifier -> ID .)
    ID              reduce using rule 184 (identifier -> ID .)
    )               reduce using rule 184 (identifier -> ID .)
    :               reduce using rule 184 (identifier -> ID .)
    }               reduce using rule 184 (identifier -> ID .)
    INC             reduce using rule 184 (identifier -> ID .)
    DEC             reduce using rule 184 (identifier -> ID .)
    .               reduce using rule 184 (identifier -> ID .)
    PTR             reduce using rule 184 (identifier -> ID .)
    AO_MUL          reduce using rule 184 (identifier -> ID .)
    AO_DIV          reduce using rule 184 (identifier -> ID .)
    AO_MOD          reduce using rule 184 (identifier -> ID .)
    AO_PLUS         reduce using rule 184 (identifier -> ID .)
    AO_SUB          reduce using rule 184 (identifier -> ID .)
    AO_SL           reduce using rule 184 (identifier -> ID .)
    AO_SR           reduce using rule 184 (identifier -> ID .)
    AO_AND          reduce using rule 184 (identifier -> ID .)
    AO_XOR          reduce using rule 184 (identifier -> ID .)
    AO_OR           reduce using rule 184 (identifier -> ID .)
    /               reduce using rule 184 (identifier -> ID .)
    %               reduce using rule 184 (identifier -> ID .)
    +               reduce using rule 184 (identifier -> ID .)
    -               reduce using rule 184 (identifier -> ID .)
    SHIFT_LEFT      reduce using rule 184 (identifier -> ID .)
    SHIFT_RIGHT     reduce using rule 184 (identifier -> ID .)
    <               reduce using rule 184 (identifier -> ID .)
    >               reduce using rule 184 (identifier -> ID .)
    LE              reduce using rule 184 (identifier -> ID .)
    GE              reduce using rule 184 (identifier -> ID .)
    EQUAL           reduce using rule 184 (identifier -> ID .)
    NE              reduce using rule 184 (identifier -> ID .)
    &               reduce using rule 184 (identifier -> ID .)
    ^               reduce using rule 184 (identifier -> ID .)
    |               reduce using rule 184 (identifier -> ID .)
    AND             reduce using rule 184 (identifier -> ID .)
    ?               reduce using rule 184 (identifier -> ID .)
    OR              reduce using rule 184 (identifier -> ID .)


state 43

    (9) init_declarator -> declarator .
    (10) init_declarator -> declarator . = initializer

    ;               reduce using rule 9 (init_declarator -> declarator .)
    ,               reduce using rule 9 (init_declarator -> declarator .)
    =               shift and go to state 91


state 44

    (95) declarator -> direct_declarator .

    =               reduce using rule 95 (declarator -> direct_declarator .)
    ;               reduce using rule 95 (declarator -> direct_declarator .)
    ,               reduce using rule 95 (declarator -> direct_declarator .)
    )               reduce using rule 95 (declarator -> direct_declarator .)
    :               reduce using rule 95 (declarator -> direct_declarator .)


state 45

    (102) direct_declarator -> direct_declarator_forlist .
    (108) direct_declarator_forlist -> direct_declarator_forlist . [ constant_expression ]

    =               reduce using rule 102 (direct_declarator -> direct_declarator_forlist .)
    ;               reduce using rule 102 (direct_declarator -> direct_declarator_forlist .)
    ,               reduce using rule 102 (direct_declarator -> direct_declarator_forlist .)
    :               reduce using rule 102 (direct_declarator -> direct_declarator_forlist .)
    )               reduce using rule 102 (direct_declarator -> direct_declarator_forlist .)
    [               shift and go to state 92


state 46

    (11) declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .

    ;               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    *               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    (               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    ID              reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    [               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    ,               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    =               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)
    )               reduce using rule 11 (declaration_specifiers -> storage_class_specifier declaration_specifiers_no_s .)


state 47

    (15) declaration_specifiers_no_s -> type_specifier .
    (16) declaration_specifiers_no_s -> type_specifier . declaration_specifiers_no_ts_s
    (22) declaration_specifiers_no_ts_s -> . type_qualifier
    (23) declaration_specifiers_no_ts_s -> . type_qualifier declaration_specifiers_no_ts_s
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    ;               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    *               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    (               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    ID              reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    [               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    ,               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    =               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    )               reduce using rule 15 (declaration_specifiers_no_s -> type_specifier .)
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    declaration_specifiers_no_ts_s shift and go to state 93
    type_qualifier                 shift and go to state 94

state 48

    (17) declaration_specifiers_no_s -> type_qualifier . declaration_specifiers_no_s
    (15) declaration_specifiers_no_s -> . type_specifier
    (16) declaration_specifiers_no_s -> . type_specifier declaration_specifiers_no_ts_s
    (17) declaration_specifiers_no_s -> . type_qualifier declaration_specifiers_no_s
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    type_qualifier                 shift and go to state 48
    declaration_specifiers_no_s    shift and go to state 95
    type_specifier                 shift and go to state 47
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 49

    (13) declaration_specifiers -> type_specifier declaration_specifiers_no_ts .

    ;               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    *               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    (               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    ID              reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    [               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    ,               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    =               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)
    )               reduce using rule 13 (declaration_specifiers -> type_specifier declaration_specifiers_no_ts .)


state 50

    (18) declaration_specifiers_no_ts -> storage_class_specifier .
    (19) declaration_specifiers_no_ts -> storage_class_specifier . declaration_specifiers_no_ts_s
    (22) declaration_specifiers_no_ts_s -> . type_qualifier
    (23) declaration_specifiers_no_ts_s -> . type_qualifier declaration_specifiers_no_ts_s
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    ;               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    *               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    (               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    ID              reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    [               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    ,               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    =               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    )               reduce using rule 18 (declaration_specifiers_no_ts -> storage_class_specifier .)
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    declaration_specifiers_no_ts_s shift and go to state 96
    type_qualifier                 shift and go to state 94

state 51

    (20) declaration_specifiers_no_ts -> type_qualifier .
    (21) declaration_specifiers_no_ts -> type_qualifier . declaration_specifiers_no_ts
    (18) declaration_specifiers_no_ts -> . storage_class_specifier
    (19) declaration_specifiers_no_ts -> . storage_class_specifier declaration_specifiers_no_ts_s
    (20) declaration_specifiers_no_ts -> . type_qualifier
    (21) declaration_specifiers_no_ts -> . type_qualifier declaration_specifiers_no_ts
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    ;               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    *               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    (               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    ID              reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    [               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    ,               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    =               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    )               reduce using rule 20 (declaration_specifiers_no_ts -> type_qualifier .)
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    type_qualifier                 shift and go to state 51
    declaration_specifiers_no_ts   shift and go to state 97
    storage_class_specifier        shift and go to state 50

state 52

    (14) declaration_specifiers -> type_qualifier declaration_specifiers .

    ;               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    *               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    (               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ID              reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    [               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    ,               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    =               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    )               reduce using rule 14 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 53

    (32) type_specifier -> SHORT INT .

    TYPEDEF         reduce using rule 32 (type_specifier -> SHORT INT .)
    EXTERN          reduce using rule 32 (type_specifier -> SHORT INT .)
    STATIC          reduce using rule 32 (type_specifier -> SHORT INT .)
    AUTO            reduce using rule 32 (type_specifier -> SHORT INT .)
    REGISTER        reduce using rule 32 (type_specifier -> SHORT INT .)
    CONST           reduce using rule 32 (type_specifier -> SHORT INT .)
    VOLATILE        reduce using rule 32 (type_specifier -> SHORT INT .)
    RESTRICT        reduce using rule 32 (type_specifier -> SHORT INT .)
    ;               reduce using rule 32 (type_specifier -> SHORT INT .)
    *               reduce using rule 32 (type_specifier -> SHORT INT .)
    (               reduce using rule 32 (type_specifier -> SHORT INT .)
    ID              reduce using rule 32 (type_specifier -> SHORT INT .)
    [               reduce using rule 32 (type_specifier -> SHORT INT .)
    ,               reduce using rule 32 (type_specifier -> SHORT INT .)
    =               reduce using rule 32 (type_specifier -> SHORT INT .)
    )               reduce using rule 32 (type_specifier -> SHORT INT .)
    :               reduce using rule 32 (type_specifier -> SHORT INT .)


state 54

    (33) type_specifier -> INT SHORT .

    TYPEDEF         reduce using rule 33 (type_specifier -> INT SHORT .)
    EXTERN          reduce using rule 33 (type_specifier -> INT SHORT .)
    STATIC          reduce using rule 33 (type_specifier -> INT SHORT .)
    AUTO            reduce using rule 33 (type_specifier -> INT SHORT .)
    REGISTER        reduce using rule 33 (type_specifier -> INT SHORT .)
    CONST           reduce using rule 33 (type_specifier -> INT SHORT .)
    VOLATILE        reduce using rule 33 (type_specifier -> INT SHORT .)
    RESTRICT        reduce using rule 33 (type_specifier -> INT SHORT .)
    ;               reduce using rule 33 (type_specifier -> INT SHORT .)
    *               reduce using rule 33 (type_specifier -> INT SHORT .)
    (               reduce using rule 33 (type_specifier -> INT SHORT .)
    ID              reduce using rule 33 (type_specifier -> INT SHORT .)
    [               reduce using rule 33 (type_specifier -> INT SHORT .)
    ,               reduce using rule 33 (type_specifier -> INT SHORT .)
    =               reduce using rule 33 (type_specifier -> INT SHORT .)
    )               reduce using rule 33 (type_specifier -> INT SHORT .)
    :               reduce using rule 33 (type_specifier -> INT SHORT .)


state 55

    (37) type_specifier -> INT LONG .

    TYPEDEF         reduce using rule 37 (type_specifier -> INT LONG .)
    EXTERN          reduce using rule 37 (type_specifier -> INT LONG .)
    STATIC          reduce using rule 37 (type_specifier -> INT LONG .)
    AUTO            reduce using rule 37 (type_specifier -> INT LONG .)
    REGISTER        reduce using rule 37 (type_specifier -> INT LONG .)
    CONST           reduce using rule 37 (type_specifier -> INT LONG .)
    VOLATILE        reduce using rule 37 (type_specifier -> INT LONG .)
    RESTRICT        reduce using rule 37 (type_specifier -> INT LONG .)
    ;               reduce using rule 37 (type_specifier -> INT LONG .)
    *               reduce using rule 37 (type_specifier -> INT LONG .)
    (               reduce using rule 37 (type_specifier -> INT LONG .)
    ID              reduce using rule 37 (type_specifier -> INT LONG .)
    [               reduce using rule 37 (type_specifier -> INT LONG .)
    ,               reduce using rule 37 (type_specifier -> INT LONG .)
    =               reduce using rule 37 (type_specifier -> INT LONG .)
    )               reduce using rule 37 (type_specifier -> INT LONG .)
    :               reduce using rule 37 (type_specifier -> INT LONG .)


state 56

    (36) type_specifier -> LONG INT .

    TYPEDEF         reduce using rule 36 (type_specifier -> LONG INT .)
    EXTERN          reduce using rule 36 (type_specifier -> LONG INT .)
    STATIC          reduce using rule 36 (type_specifier -> LONG INT .)
    AUTO            reduce using rule 36 (type_specifier -> LONG INT .)
    REGISTER        reduce using rule 36 (type_specifier -> LONG INT .)
    CONST           reduce using rule 36 (type_specifier -> LONG INT .)
    VOLATILE        reduce using rule 36 (type_specifier -> LONG INT .)
    RESTRICT        reduce using rule 36 (type_specifier -> LONG INT .)
    ;               reduce using rule 36 (type_specifier -> LONG INT .)
    *               reduce using rule 36 (type_specifier -> LONG INT .)
    (               reduce using rule 36 (type_specifier -> LONG INT .)
    ID              reduce using rule 36 (type_specifier -> LONG INT .)
    [               reduce using rule 36 (type_specifier -> LONG INT .)
    ,               reduce using rule 36 (type_specifier -> LONG INT .)
    =               reduce using rule 36 (type_specifier -> LONG INT .)
    )               reduce using rule 36 (type_specifier -> LONG INT .)
    :               reduce using rule 36 (type_specifier -> LONG INT .)


state 57

    (41) type_specifier -> LONG FLOAT .

    TYPEDEF         reduce using rule 41 (type_specifier -> LONG FLOAT .)
    EXTERN          reduce using rule 41 (type_specifier -> LONG FLOAT .)
    STATIC          reduce using rule 41 (type_specifier -> LONG FLOAT .)
    AUTO            reduce using rule 41 (type_specifier -> LONG FLOAT .)
    REGISTER        reduce using rule 41 (type_specifier -> LONG FLOAT .)
    CONST           reduce using rule 41 (type_specifier -> LONG FLOAT .)
    VOLATILE        reduce using rule 41 (type_specifier -> LONG FLOAT .)
    RESTRICT        reduce using rule 41 (type_specifier -> LONG FLOAT .)
    ;               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    *               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    (               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    ID              reduce using rule 41 (type_specifier -> LONG FLOAT .)
    [               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    ,               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    =               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    )               reduce using rule 41 (type_specifier -> LONG FLOAT .)
    :               reduce using rule 41 (type_specifier -> LONG FLOAT .)


state 58

    (43) type_specifier -> LONG DOUBLE .

    TYPEDEF         reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    EXTERN          reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    STATIC          reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    AUTO            reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    REGISTER        reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    CONST           reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    VOLATILE        reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    RESTRICT        reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    ;               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    *               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    (               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    ID              reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    [               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    ,               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    =               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    )               reduce using rule 43 (type_specifier -> LONG DOUBLE .)
    :               reduce using rule 43 (type_specifier -> LONG DOUBLE .)


state 59

    (40) type_specifier -> FLOAT LONG .

    TYPEDEF         reduce using rule 40 (type_specifier -> FLOAT LONG .)
    EXTERN          reduce using rule 40 (type_specifier -> FLOAT LONG .)
    STATIC          reduce using rule 40 (type_specifier -> FLOAT LONG .)
    AUTO            reduce using rule 40 (type_specifier -> FLOAT LONG .)
    REGISTER        reduce using rule 40 (type_specifier -> FLOAT LONG .)
    CONST           reduce using rule 40 (type_specifier -> FLOAT LONG .)
    VOLATILE        reduce using rule 40 (type_specifier -> FLOAT LONG .)
    RESTRICT        reduce using rule 40 (type_specifier -> FLOAT LONG .)
    ;               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    *               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    (               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    ID              reduce using rule 40 (type_specifier -> FLOAT LONG .)
    [               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    ,               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    =               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    )               reduce using rule 40 (type_specifier -> FLOAT LONG .)
    :               reduce using rule 40 (type_specifier -> FLOAT LONG .)


state 60

    (42) type_specifier -> DOUBLE LONG .

    TYPEDEF         reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    EXTERN          reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    STATIC          reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    AUTO            reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    REGISTER        reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    CONST           reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    VOLATILE        reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    RESTRICT        reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    ;               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    *               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    (               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    ID              reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    [               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    ,               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    =               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    )               reduce using rule 42 (type_specifier -> DOUBLE LONG .)
    :               reduce using rule 42 (type_specifier -> DOUBLE LONG .)


state 61

    (45) type_specifier -> SIGNED INT .
    (48) type_specifier -> SIGNED INT . SHORT
    (51) type_specifier -> SIGNED INT . LONG

    TYPEDEF         reduce using rule 45 (type_specifier -> SIGNED INT .)
    EXTERN          reduce using rule 45 (type_specifier -> SIGNED INT .)
    STATIC          reduce using rule 45 (type_specifier -> SIGNED INT .)
    AUTO            reduce using rule 45 (type_specifier -> SIGNED INT .)
    REGISTER        reduce using rule 45 (type_specifier -> SIGNED INT .)
    CONST           reduce using rule 45 (type_specifier -> SIGNED INT .)
    VOLATILE        reduce using rule 45 (type_specifier -> SIGNED INT .)
    RESTRICT        reduce using rule 45 (type_specifier -> SIGNED INT .)
    ;               reduce using rule 45 (type_specifier -> SIGNED INT .)
    *               reduce using rule 45 (type_specifier -> SIGNED INT .)
    (               reduce using rule 45 (type_specifier -> SIGNED INT .)
    ID              reduce using rule 45 (type_specifier -> SIGNED INT .)
    [               reduce using rule 45 (type_specifier -> SIGNED INT .)
    ,               reduce using rule 45 (type_specifier -> SIGNED INT .)
    =               reduce using rule 45 (type_specifier -> SIGNED INT .)
    )               reduce using rule 45 (type_specifier -> SIGNED INT .)
    :               reduce using rule 45 (type_specifier -> SIGNED INT .)
    SHORT           shift and go to state 98
    LONG            shift and go to state 99


state 62

    (46) type_specifier -> SIGNED SHORT .
    (47) type_specifier -> SIGNED SHORT . INT

    TYPEDEF         reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    EXTERN          reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    STATIC          reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    AUTO            reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    REGISTER        reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    CONST           reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    VOLATILE        reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    RESTRICT        reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    ;               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    *               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    (               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    ID              reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    [               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    ,               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    =               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    )               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    :               reduce using rule 46 (type_specifier -> SIGNED SHORT .)
    INT             shift and go to state 100


state 63

    (49) type_specifier -> SIGNED LONG .
    (50) type_specifier -> SIGNED LONG . INT

    TYPEDEF         reduce using rule 49 (type_specifier -> SIGNED LONG .)
    EXTERN          reduce using rule 49 (type_specifier -> SIGNED LONG .)
    STATIC          reduce using rule 49 (type_specifier -> SIGNED LONG .)
    AUTO            reduce using rule 49 (type_specifier -> SIGNED LONG .)
    REGISTER        reduce using rule 49 (type_specifier -> SIGNED LONG .)
    CONST           reduce using rule 49 (type_specifier -> SIGNED LONG .)
    VOLATILE        reduce using rule 49 (type_specifier -> SIGNED LONG .)
    RESTRICT        reduce using rule 49 (type_specifier -> SIGNED LONG .)
    ;               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    *               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    (               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    ID              reduce using rule 49 (type_specifier -> SIGNED LONG .)
    [               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    ,               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    =               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    )               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    :               reduce using rule 49 (type_specifier -> SIGNED LONG .)
    INT             shift and go to state 101


state 64

    (53) type_specifier -> UNSIGNED INT .
    (56) type_specifier -> UNSIGNED INT . SHORT
    (59) type_specifier -> UNSIGNED INT . LONG

    TYPEDEF         reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    EXTERN          reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    STATIC          reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    AUTO            reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    REGISTER        reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    CONST           reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    VOLATILE        reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    RESTRICT        reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    ;               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    *               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    (               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    ID              reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    [               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    ,               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    =               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    )               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    :               reduce using rule 53 (type_specifier -> UNSIGNED INT .)
    SHORT           shift and go to state 102
    LONG            shift and go to state 103


state 65

    (54) type_specifier -> UNSIGNED SHORT .
    (55) type_specifier -> UNSIGNED SHORT . INT

    TYPEDEF         reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    EXTERN          reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    STATIC          reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    AUTO            reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    REGISTER        reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    CONST           reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    VOLATILE        reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    RESTRICT        reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    ;               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    *               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    (               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    ID              reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    [               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    ,               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    =               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    )               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    :               reduce using rule 54 (type_specifier -> UNSIGNED SHORT .)
    INT             shift and go to state 104


state 66

    (57) type_specifier -> UNSIGNED LONG .
    (58) type_specifier -> UNSIGNED LONG . INT

    TYPEDEF         reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    EXTERN          reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    STATIC          reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    AUTO            reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    REGISTER        reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    CONST           reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    VOLATILE        reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    RESTRICT        reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    ;               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    *               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    (               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    ID              reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    [               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    ,               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    =               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    )               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    :               reduce using rule 57 (type_specifier -> UNSIGNED LONG .)
    INT             shift and go to state 105


state 67

    (75) struct_or_union_specifier -> struct_or_union identifier . { struct_declaration_list }
    (77) struct_or_union_specifier -> struct_or_union identifier .

    {               shift and go to state 106
    TYPEDEF         reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    EXTERN          reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    STATIC          reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    AUTO            reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    REGISTER        reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    CONST           reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    VOLATILE        reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    RESTRICT        reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    ;               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    *               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    (               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    ID              reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    [               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    ,               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    =               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    )               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)
    :               reduce using rule 77 (struct_or_union_specifier -> struct_or_union identifier .)


state 68

    (76) struct_or_union_specifier -> struct_or_union { . struct_declaration_list }
    (80) struct_declaration_list -> . struct_declaration
    (81) struct_declaration_list -> . struct_declaration_list struct_declaration
    (82) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    struct_or_union                shift and go to state 29
    struct_declaration_list        shift and go to state 107
    struct_declaration             shift and go to state 108
    specifier_qualifier_list       shift and go to state 109
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24

state 69

    (183) identifier -> ( . identifier )
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 69
    ID              shift and go to state 42

    identifier                     shift and go to state 112

state 70

    (66) enum_specifier -> ENUM { . enumerator_list }
    (68) enum_specifier -> ENUM { . enumerator_list , }
    (71) enumerator_list -> . enumerator
    (72) enumerator_list -> . enumerator_list , enumerator
    (73) enumerator -> . identifier
    (74) enumerator -> . identifier = constant_expression
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 69
    ID              shift and go to state 42

    enumerator_list                shift and go to state 113
    enumerator                     shift and go to state 114
    identifier                     shift and go to state 115

state 71

    (67) enum_specifier -> ENUM identifier . { enumerator_list }
    (69) enum_specifier -> ENUM identifier . { enumerator_list , }
    (70) enum_specifier -> ENUM identifier .

    {               shift and go to state 116
    TYPEDEF         reduce using rule 70 (enum_specifier -> ENUM identifier .)
    EXTERN          reduce using rule 70 (enum_specifier -> ENUM identifier .)
    STATIC          reduce using rule 70 (enum_specifier -> ENUM identifier .)
    AUTO            reduce using rule 70 (enum_specifier -> ENUM identifier .)
    REGISTER        reduce using rule 70 (enum_specifier -> ENUM identifier .)
    CONST           reduce using rule 70 (enum_specifier -> ENUM identifier .)
    VOLATILE        reduce using rule 70 (enum_specifier -> ENUM identifier .)
    RESTRICT        reduce using rule 70 (enum_specifier -> ENUM identifier .)
    ;               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    *               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    (               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    ID              reduce using rule 70 (enum_specifier -> ENUM identifier .)
    [               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    ,               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    =               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    )               reduce using rule 70 (enum_specifier -> ENUM identifier .)
    :               reduce using rule 70 (enum_specifier -> ENUM identifier .)


state 72

    (178) function_definition -> declaration_specifiers pointer direct_function_declarator . compound_statement
    (104) direct_declarator -> direct_function_declarator .
    (191) compound_statement -> . { }
    (192) compound_statement -> . { block_item_list }

    =               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    ;               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    ,               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    {               shift and go to state 76

    compound_statement             shift and go to state 117

state 73

    (94) declarator -> pointer direct_declarator .

    =               reduce using rule 94 (declarator -> pointer direct_declarator .)
    ;               reduce using rule 94 (declarator -> pointer direct_declarator .)
    ,               reduce using rule 94 (declarator -> pointer direct_declarator .)
    )               reduce using rule 94 (declarator -> pointer direct_declarator .)
    :               reduce using rule 94 (declarator -> pointer direct_declarator .)


state 74

    (180) direct_function_declarator -> ( . pointer direct_function_declarator )
    (181) direct_function_declarator -> ( . direct_function_declarator )
    (103) direct_declarator -> ( . declarator )
    (183) identifier -> ( . identifier )
    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    *               shift and go to state 38
    (               shift and go to state 82
    ID              shift and go to state 42

    pointer                        shift and go to state 83
    direct_function_declarator     shift and go to state 84
    declarator                     shift and go to state 86
    identifier                     shift and go to state 85
    direct_declarator_forlist      shift and go to state 87
    direct_declarator              shift and go to state 44

state 75

    (179) function_definition -> declaration_specifiers direct_function_declarator compound_statement .

    TYPEDEF         reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    EXTERN          reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    STATIC          reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    AUTO            reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    REGISTER        reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    VOID            reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    CHAR            reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    SHORT           reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    INT             reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    LONG            reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    FLOAT           reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    DOUBLE          reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    SIGNED          reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    UNSIGNED        reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    BOOL            reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    CONST           reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    VOLATILE        reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    RESTRICT        reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    ENUM            reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    STRUCT          reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    UNION           reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)
    $end            reduce using rule 179 (function_definition -> declaration_specifiers direct_function_declarator compound_statement .)


state 76

    (191) compound_statement -> { . }
    (192) compound_statement -> { . block_item_list }
    (193) block_item_list -> . block_item
    (194) block_item_list -> . block_item_list block_item
    (195) block_item -> . declaration
    (196) block_item -> . statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (197) statement -> . labeled_statement
    (198) statement -> . compound_statement
    (199) statement -> . expression_statement
    (200) statement -> . selection_statement
    (201) statement -> . iteration_statement
    (202) statement -> . jump_statement
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (203) labeled_statement -> . identifier :
    (191) compound_statement -> . { }
    (192) compound_statement -> . { block_item_list }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (284) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (285) selection_statement -> . IF ( expression_variable ) statement
    (286) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (341) jump_statement -> . GOTO ID ;
    (342) jump_statement -> . RETURN ;
    (343) jump_statement -> . RETURN expression_variable ;
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 118
    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    RETURN          shift and go to state 140
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    (               shift and go to state 134
    ID              shift and go to state 42
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    block_item_list                shift and go to state 119
    block_item                     shift and go to state 120
    declaration                    shift and go to state 121
    statement                      shift and go to state 122
    declaration_specifiers         shift and go to state 123
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    assignment_expression          shift and go to state 141
    struct_or_union                shift and go to state 29
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 77

    (6) declaration -> declaration_specifiers init_declarator_list ; .

    TYPEDEF         reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    EXTERN          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    STATIC          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    AUTO            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    REGISTER        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOID            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CHAR            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SHORT           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    INT             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    LONG            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    FLOAT           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DOUBLE          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIGNED          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNSIGNED        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    BOOL            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONST           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    VOLATILE        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    RESTRICT        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ENUM            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRUCT          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    UNION           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    $end            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    }               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    {               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ;               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    IF              reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SWITCH          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    WHILE           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DO              reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    FOR             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    GOTO            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    RETURN          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    (               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ID              reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    INC             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEC             reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    SIZEOF          reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    &               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    *               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    +               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    -               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    ~               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    !               reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONSTANCE       reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    STRING_LITERAL  reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CONTINUE        reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    BREAK           reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    CASE            reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)
    DEFAULT         reduce using rule 6 (declaration -> declaration_specifiers init_declarator_list ; .)


state 78

    (8) init_declarator_list -> init_declarator_list , . init_declarator
    (9) init_declarator -> . declarator
    (10) init_declarator -> . declarator = initializer
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    *               shift and go to state 38
    (               shift and go to state 173
    ID              shift and go to state 42

    init_declarator                shift and go to state 171
    declarator                     shift and go to state 43
    pointer                        shift and go to state 172
    direct_declarator              shift and go to state 44
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 174
    identifier                     shift and go to state 175

state 79

    (97) pointer -> * type_qualifier_list .
    (99) pointer -> * type_qualifier_list . pointer
    (101) type_qualifier_list -> type_qualifier_list . type_qualifier
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    (               reduce using rule 97 (pointer -> * type_qualifier_list .)
    ID              reduce using rule 97 (pointer -> * type_qualifier_list .)
    [               reduce using rule 97 (pointer -> * type_qualifier_list .)
    ,               reduce using rule 97 (pointer -> * type_qualifier_list .)
    =               reduce using rule 97 (pointer -> * type_qualifier_list .)
    )               reduce using rule 97 (pointer -> * type_qualifier_list .)
    *               shift and go to state 38
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    pointer                        shift and go to state 176
    type_qualifier                 shift and go to state 177

state 80

    (98) pointer -> * pointer .

    (               reduce using rule 98 (pointer -> * pointer .)
    ID              reduce using rule 98 (pointer -> * pointer .)
    [               reduce using rule 98 (pointer -> * pointer .)
    ,               reduce using rule 98 (pointer -> * pointer .)
    =               reduce using rule 98 (pointer -> * pointer .)
    )               reduce using rule 98 (pointer -> * pointer .)


state 81

    (100) type_qualifier_list -> type_qualifier .

    *               reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    RESTRICT        reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    (               reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    ID              reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    [               reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    ,               reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    =               reduce using rule 100 (type_qualifier_list -> type_qualifier .)
    )               reduce using rule 100 (type_qualifier_list -> type_qualifier .)


state 82

    (180) direct_function_declarator -> ( . pointer direct_function_declarator )
    (181) direct_function_declarator -> ( . direct_function_declarator )
    (183) identifier -> ( . identifier )
    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (103) direct_declarator -> ( . declarator )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    *               shift and go to state 38
    (               shift and go to state 82
    ID              shift and go to state 42

    pointer                        shift and go to state 83
    direct_function_declarator     shift and go to state 84
    identifier                     shift and go to state 85
    direct_declarator_forlist      shift and go to state 87
    declarator                     shift and go to state 86
    direct_declarator              shift and go to state 44

state 83

    (180) direct_function_declarator -> ( pointer . direct_function_declarator )
    (106) direct_declarator_forlist -> ( pointer . direct_declarator_forlist )
    (94) declarator -> pointer . direct_declarator
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 178
    ID              shift and go to state 42

    direct_function_declarator     shift and go to state 179
    direct_declarator_forlist      shift and go to state 180
    direct_declarator              shift and go to state 73
    identifier                     shift and go to state 40

state 84

    (181) direct_function_declarator -> ( direct_function_declarator . )
    (104) direct_declarator -> direct_function_declarator .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 181

  ! )               [ reduce using rule 104 (direct_declarator -> direct_function_declarator .) ]


state 85

    (183) identifier -> ( identifier . )
    (182) direct_function_declarator -> identifier . parameter_type_list_definition
    (105) direct_declarator_forlist -> identifier .
    (109) direct_declarator_forlist -> identifier . [ constant_expression ]
    (110) direct_declarator_forlist -> identifier . [ ]
    (185) parameter_type_list_definition -> . ( )
    (186) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (187) parameter_type_list_definition -> . ( parameter_list )

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for [ resolved as shift
    )               shift and go to state 182
    [               shift and go to state 89
    (               shift and go to state 90

  ! )               [ reduce using rule 105 (direct_declarator_forlist -> identifier .) ]
  ! [               [ reduce using rule 105 (direct_declarator_forlist -> identifier .) ]

    parameter_type_list_definition shift and go to state 88

state 86

    (103) direct_declarator -> ( declarator . )

    )               shift and go to state 183


state 87

    (107) direct_declarator_forlist -> ( direct_declarator_forlist . )
    (108) direct_declarator_forlist -> direct_declarator_forlist . [ constant_expression ]
    (102) direct_declarator -> direct_declarator_forlist .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 184
    [               shift and go to state 92

  ! )               [ reduce using rule 102 (direct_declarator -> direct_declarator_forlist .) ]


state 88

    (182) direct_function_declarator -> identifier parameter_type_list_definition .

    {               reduce using rule 182 (direct_function_declarator -> identifier parameter_type_list_definition .)
    =               reduce using rule 182 (direct_function_declarator -> identifier parameter_type_list_definition .)
    ;               reduce using rule 182 (direct_function_declarator -> identifier parameter_type_list_definition .)
    ,               reduce using rule 182 (direct_function_declarator -> identifier parameter_type_list_definition .)
    )               reduce using rule 182 (direct_function_declarator -> identifier parameter_type_list_definition .)
    :               reduce using rule 182 (direct_function_declarator -> identifier parameter_type_list_definition .)


state 89

    (109) direct_declarator_forlist -> identifier [ . constant_expression ]
    (110) direct_declarator_forlist -> identifier [ . ]
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    ]               shift and go to state 186
    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    constant_expression            shift and go to state 185
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 90

    (185) parameter_type_list_definition -> ( . )
    (186) parameter_type_list_definition -> ( . parameter_type_list_definition )
    (187) parameter_type_list_definition -> ( . parameter_list )
    (185) parameter_type_list_definition -> . ( )
    (186) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (187) parameter_type_list_definition -> . ( parameter_list )
    (111) parameter_list -> . parameter_list_definition
    (112) parameter_list -> . parameter_declaration
    (113) parameter_list -> . parameter_declaration , parameter_list
    (188) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (189) parameter_list_definition -> . parameter_declaration = constant_expression
    (190) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    )               shift and go to state 210
    (               shift and go to state 90
    ELLIPSIS        shift and go to state 215
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    parameter_type_list_definition shift and go to state 211
    parameter_list                 shift and go to state 212
    parameter_list_definition      shift and go to state 213
    parameter_declaration          shift and go to state 214
    declaration_specifiers         shift and go to state 216
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 91

    (10) init_declarator -> declarator = . initializer
    (355) initializer -> . assignment_expression
    (356) initializer -> . { initializer_list }
    (357) initializer -> . { initializer_list , }
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 219
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    initializer                    shift and go to state 217
    assignment_expression          shift and go to state 218
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 92

    (108) direct_declarator_forlist -> direct_declarator_forlist [ . constant_expression ]
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    constant_expression            shift and go to state 222
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 93

    (16) declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .

    ;               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    *               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    (               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    ID              reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    [               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    ,               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    =               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)
    )               reduce using rule 16 (declaration_specifiers_no_s -> type_specifier declaration_specifiers_no_ts_s .)


state 94

    (22) declaration_specifiers_no_ts_s -> type_qualifier .
    (23) declaration_specifiers_no_ts_s -> type_qualifier . declaration_specifiers_no_ts_s
    (22) declaration_specifiers_no_ts_s -> . type_qualifier
    (23) declaration_specifiers_no_ts_s -> . type_qualifier declaration_specifiers_no_ts_s
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    ;               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    *               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    (               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    ID              reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    [               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    ,               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    =               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    )               reduce using rule 22 (declaration_specifiers_no_ts_s -> type_qualifier .)
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    type_qualifier                 shift and go to state 94
    declaration_specifiers_no_ts_s shift and go to state 223

state 95

    (17) declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .

    ;               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    *               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    (               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    ID              reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    [               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    ,               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    =               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)
    )               reduce using rule 17 (declaration_specifiers_no_s -> type_qualifier declaration_specifiers_no_s .)


state 96

    (19) declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .

    ;               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    *               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    (               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    ID              reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    [               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    ,               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    =               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)
    )               reduce using rule 19 (declaration_specifiers_no_ts -> storage_class_specifier declaration_specifiers_no_ts_s .)


state 97

    (21) declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .

    ;               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    *               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    (               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    ID              reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    [               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    ,               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    =               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)
    )               reduce using rule 21 (declaration_specifiers_no_ts -> type_qualifier declaration_specifiers_no_ts .)


state 98

    (48) type_specifier -> SIGNED INT SHORT .

    TYPEDEF         reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    EXTERN          reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    STATIC          reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    AUTO            reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    REGISTER        reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    CONST           reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    VOLATILE        reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    RESTRICT        reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    ;               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    *               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    (               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    ID              reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    [               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    ,               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    =               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    )               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)
    :               reduce using rule 48 (type_specifier -> SIGNED INT SHORT .)


state 99

    (51) type_specifier -> SIGNED INT LONG .

    TYPEDEF         reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    EXTERN          reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    STATIC          reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    AUTO            reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    REGISTER        reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    CONST           reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    VOLATILE        reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    RESTRICT        reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    ;               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    *               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    (               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    ID              reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    [               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    ,               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    =               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    )               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)
    :               reduce using rule 51 (type_specifier -> SIGNED INT LONG .)


state 100

    (47) type_specifier -> SIGNED SHORT INT .

    TYPEDEF         reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    EXTERN          reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    STATIC          reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    AUTO            reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    REGISTER        reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    CONST           reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    VOLATILE        reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    RESTRICT        reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    ;               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    *               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    (               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    ID              reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    [               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    ,               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    =               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    )               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)
    :               reduce using rule 47 (type_specifier -> SIGNED SHORT INT .)


state 101

    (50) type_specifier -> SIGNED LONG INT .

    TYPEDEF         reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    EXTERN          reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    STATIC          reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    AUTO            reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    REGISTER        reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    CONST           reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    VOLATILE        reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    RESTRICT        reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    ;               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    *               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    (               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    ID              reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    [               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    ,               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    =               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    )               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)
    :               reduce using rule 50 (type_specifier -> SIGNED LONG INT .)


state 102

    (56) type_specifier -> UNSIGNED INT SHORT .

    TYPEDEF         reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    EXTERN          reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    STATIC          reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    AUTO            reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    REGISTER        reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    CONST           reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    VOLATILE        reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    RESTRICT        reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    ;               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    *               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    (               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    ID              reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    [               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    ,               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    =               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    )               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)
    :               reduce using rule 56 (type_specifier -> UNSIGNED INT SHORT .)


state 103

    (59) type_specifier -> UNSIGNED INT LONG .

    TYPEDEF         reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    EXTERN          reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    STATIC          reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    AUTO            reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    REGISTER        reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    CONST           reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    VOLATILE        reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    RESTRICT        reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    ;               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    *               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    (               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    ID              reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    [               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    ,               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    =               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    )               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)
    :               reduce using rule 59 (type_specifier -> UNSIGNED INT LONG .)


state 104

    (55) type_specifier -> UNSIGNED SHORT INT .

    TYPEDEF         reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    EXTERN          reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    STATIC          reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    AUTO            reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    REGISTER        reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    CONST           reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    VOLATILE        reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    RESTRICT        reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    ;               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    *               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    (               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    ID              reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    [               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    ,               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    =               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    )               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)
    :               reduce using rule 55 (type_specifier -> UNSIGNED SHORT INT .)


state 105

    (58) type_specifier -> UNSIGNED LONG INT .

    TYPEDEF         reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    EXTERN          reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    STATIC          reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    AUTO            reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    REGISTER        reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    CONST           reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    VOLATILE        reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    RESTRICT        reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    ;               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    *               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    (               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    ID              reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    [               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    ,               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    =               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    )               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)
    :               reduce using rule 58 (type_specifier -> UNSIGNED LONG INT .)


state 106

    (75) struct_or_union_specifier -> struct_or_union identifier { . struct_declaration_list }
    (80) struct_declaration_list -> . struct_declaration
    (81) struct_declaration_list -> . struct_declaration_list struct_declaration
    (82) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    struct_or_union                shift and go to state 29
    struct_declaration_list        shift and go to state 224
    struct_declaration             shift and go to state 108
    specifier_qualifier_list       shift and go to state 109
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24

state 107

    (76) struct_or_union_specifier -> struct_or_union { struct_declaration_list . }
    (81) struct_declaration_list -> struct_declaration_list . struct_declaration
    (82) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    }               shift and go to state 225
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    struct_or_union                shift and go to state 29
    struct_declaration             shift and go to state 226
    specifier_qualifier_list       shift and go to state 109
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24

state 108

    (80) struct_declaration_list -> struct_declaration .

    }               reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    RESTRICT        reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 80 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 80 (struct_declaration_list -> struct_declaration .)


state 109

    (82) struct_declaration -> specifier_qualifier_list . struct_declarator_list ;
    (89) struct_declarator_list -> . struct_declarator
    (90) struct_declarator_list -> . struct_declarator_list , struct_declarator
    (91) struct_declarator -> . declarator
    (92) struct_declarator -> . : constant_expression
    (93) struct_declarator -> . declarator : constant_expression
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    :               shift and go to state 230
    *               shift and go to state 38
    (               shift and go to state 173
    ID              shift and go to state 42

    struct_declarator_list         shift and go to state 227
    struct_declarator              shift and go to state 228
    declarator                     shift and go to state 229
    pointer                        shift and go to state 172
    direct_declarator              shift and go to state 44
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 174
    identifier                     shift and go to state 175

state 110

    (83) specifier_qualifier_list -> type_specifier . specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> type_specifier .
    (87) specifier_qualifier_list_no_ts -> . type_qualifier specifier_qualifier_list_no_ts
    (88) specifier_qualifier_list_no_ts -> . type_qualifier
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    :               reduce using rule 84 (specifier_qualifier_list -> type_specifier .)
    *               reduce using rule 84 (specifier_qualifier_list -> type_specifier .)
    (               reduce using rule 84 (specifier_qualifier_list -> type_specifier .)
    ID              reduce using rule 84 (specifier_qualifier_list -> type_specifier .)
    )               reduce using rule 84 (specifier_qualifier_list -> type_specifier .)
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    specifier_qualifier_list_no_ts shift and go to state 231
    type_qualifier                 shift and go to state 232

state 111

    (85) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (86) specifier_qualifier_list -> type_qualifier .
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    :               reduce using rule 86 (specifier_qualifier_list -> type_qualifier .)
    *               reduce using rule 86 (specifier_qualifier_list -> type_qualifier .)
    (               reduce using rule 86 (specifier_qualifier_list -> type_qualifier .)
    ID              reduce using rule 86 (specifier_qualifier_list -> type_qualifier .)
    )               reduce using rule 86 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    type_qualifier                 shift and go to state 111
    specifier_qualifier_list       shift and go to state 233
    type_specifier                 shift and go to state 110
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 112

    (183) identifier -> ( identifier . )

    )               shift and go to state 182


state 113

    (66) enum_specifier -> ENUM { enumerator_list . }
    (68) enum_specifier -> ENUM { enumerator_list . , }
    (72) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 234
    ,               shift and go to state 235


state 114

    (71) enumerator_list -> enumerator .

    }               reduce using rule 71 (enumerator_list -> enumerator .)
    ,               reduce using rule 71 (enumerator_list -> enumerator .)


state 115

    (73) enumerator -> identifier .
    (74) enumerator -> identifier . = constant_expression

    }               reduce using rule 73 (enumerator -> identifier .)
    ,               reduce using rule 73 (enumerator -> identifier .)
    =               shift and go to state 236


state 116

    (67) enum_specifier -> ENUM identifier { . enumerator_list }
    (69) enum_specifier -> ENUM identifier { . enumerator_list , }
    (71) enumerator_list -> . enumerator
    (72) enumerator_list -> . enumerator_list , enumerator
    (73) enumerator -> . identifier
    (74) enumerator -> . identifier = constant_expression
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 69
    ID              shift and go to state 42

    identifier                     shift and go to state 115
    enumerator_list                shift and go to state 237
    enumerator                     shift and go to state 114

state 117

    (178) function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .

    TYPEDEF         reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    EXTERN          reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    STATIC          reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    AUTO            reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    REGISTER        reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    VOID            reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    CHAR            reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    SHORT           reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    INT             reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    LONG            reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    FLOAT           reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    DOUBLE          reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    SIGNED          reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    UNSIGNED        reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    BOOL            reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    CONST           reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    VOLATILE        reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    RESTRICT        reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    ENUM            reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    STRUCT          reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    UNION           reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)
    $end            reduce using rule 178 (function_definition -> declaration_specifiers pointer direct_function_declarator compound_statement .)


state 118

    (191) compound_statement -> { } .

    TYPEDEF         reduce using rule 191 (compound_statement -> { } .)
    EXTERN          reduce using rule 191 (compound_statement -> { } .)
    STATIC          reduce using rule 191 (compound_statement -> { } .)
    AUTO            reduce using rule 191 (compound_statement -> { } .)
    REGISTER        reduce using rule 191 (compound_statement -> { } .)
    VOID            reduce using rule 191 (compound_statement -> { } .)
    CHAR            reduce using rule 191 (compound_statement -> { } .)
    SHORT           reduce using rule 191 (compound_statement -> { } .)
    INT             reduce using rule 191 (compound_statement -> { } .)
    LONG            reduce using rule 191 (compound_statement -> { } .)
    FLOAT           reduce using rule 191 (compound_statement -> { } .)
    DOUBLE          reduce using rule 191 (compound_statement -> { } .)
    SIGNED          reduce using rule 191 (compound_statement -> { } .)
    UNSIGNED        reduce using rule 191 (compound_statement -> { } .)
    BOOL            reduce using rule 191 (compound_statement -> { } .)
    CONST           reduce using rule 191 (compound_statement -> { } .)
    VOLATILE        reduce using rule 191 (compound_statement -> { } .)
    RESTRICT        reduce using rule 191 (compound_statement -> { } .)
    ENUM            reduce using rule 191 (compound_statement -> { } .)
    STRUCT          reduce using rule 191 (compound_statement -> { } .)
    UNION           reduce using rule 191 (compound_statement -> { } .)
    $end            reduce using rule 191 (compound_statement -> { } .)
    }               reduce using rule 191 (compound_statement -> { } .)
    {               reduce using rule 191 (compound_statement -> { } .)
    ;               reduce using rule 191 (compound_statement -> { } .)
    IF              reduce using rule 191 (compound_statement -> { } .)
    SWITCH          reduce using rule 191 (compound_statement -> { } .)
    WHILE           reduce using rule 191 (compound_statement -> { } .)
    DO              reduce using rule 191 (compound_statement -> { } .)
    FOR             reduce using rule 191 (compound_statement -> { } .)
    GOTO            reduce using rule 191 (compound_statement -> { } .)
    RETURN          reduce using rule 191 (compound_statement -> { } .)
    (               reduce using rule 191 (compound_statement -> { } .)
    ID              reduce using rule 191 (compound_statement -> { } .)
    INC             reduce using rule 191 (compound_statement -> { } .)
    DEC             reduce using rule 191 (compound_statement -> { } .)
    SIZEOF          reduce using rule 191 (compound_statement -> { } .)
    &               reduce using rule 191 (compound_statement -> { } .)
    *               reduce using rule 191 (compound_statement -> { } .)
    +               reduce using rule 191 (compound_statement -> { } .)
    -               reduce using rule 191 (compound_statement -> { } .)
    ~               reduce using rule 191 (compound_statement -> { } .)
    !               reduce using rule 191 (compound_statement -> { } .)
    CONSTANCE       reduce using rule 191 (compound_statement -> { } .)
    STRING_LITERAL  reduce using rule 191 (compound_statement -> { } .)
    ELSE            reduce using rule 191 (compound_statement -> { } .)
    CASE            reduce using rule 191 (compound_statement -> { } .)
    DEFAULT         reduce using rule 191 (compound_statement -> { } .)
    CONTINUE        reduce using rule 191 (compound_statement -> { } .)
    BREAK           reduce using rule 191 (compound_statement -> { } .)


state 119

    (192) compound_statement -> { block_item_list . }
    (194) block_item_list -> block_item_list . block_item
    (195) block_item -> . declaration
    (196) block_item -> . statement
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (197) statement -> . labeled_statement
    (198) statement -> . compound_statement
    (199) statement -> . expression_statement
    (200) statement -> . selection_statement
    (201) statement -> . iteration_statement
    (202) statement -> . jump_statement
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (203) labeled_statement -> . identifier :
    (191) compound_statement -> . { }
    (192) compound_statement -> . { block_item_list }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (284) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (285) selection_statement -> . IF ( expression_variable ) statement
    (286) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (341) jump_statement -> . GOTO ID ;
    (342) jump_statement -> . RETURN ;
    (343) jump_statement -> . RETURN expression_variable ;
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 238
    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    RETURN          shift and go to state 140
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    (               shift and go to state 134
    ID              shift and go to state 42
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    block_item                     shift and go to state 239
    declaration                    shift and go to state 121
    statement                      shift and go to state 122
    declaration_specifiers         shift and go to state 123
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    assignment_expression          shift and go to state 141
    struct_or_union                shift and go to state 29
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 120

    (193) block_item_list -> block_item .

    }               reduce using rule 193 (block_item_list -> block_item .)
    {               reduce using rule 193 (block_item_list -> block_item .)
    ;               reduce using rule 193 (block_item_list -> block_item .)
    IF              reduce using rule 193 (block_item_list -> block_item .)
    SWITCH          reduce using rule 193 (block_item_list -> block_item .)
    WHILE           reduce using rule 193 (block_item_list -> block_item .)
    DO              reduce using rule 193 (block_item_list -> block_item .)
    FOR             reduce using rule 193 (block_item_list -> block_item .)
    GOTO            reduce using rule 193 (block_item_list -> block_item .)
    RETURN          reduce using rule 193 (block_item_list -> block_item .)
    TYPEDEF         reduce using rule 193 (block_item_list -> block_item .)
    EXTERN          reduce using rule 193 (block_item_list -> block_item .)
    STATIC          reduce using rule 193 (block_item_list -> block_item .)
    AUTO            reduce using rule 193 (block_item_list -> block_item .)
    REGISTER        reduce using rule 193 (block_item_list -> block_item .)
    VOID            reduce using rule 193 (block_item_list -> block_item .)
    CHAR            reduce using rule 193 (block_item_list -> block_item .)
    SHORT           reduce using rule 193 (block_item_list -> block_item .)
    INT             reduce using rule 193 (block_item_list -> block_item .)
    LONG            reduce using rule 193 (block_item_list -> block_item .)
    FLOAT           reduce using rule 193 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 193 (block_item_list -> block_item .)
    SIGNED          reduce using rule 193 (block_item_list -> block_item .)
    UNSIGNED        reduce using rule 193 (block_item_list -> block_item .)
    BOOL            reduce using rule 193 (block_item_list -> block_item .)
    CONST           reduce using rule 193 (block_item_list -> block_item .)
    VOLATILE        reduce using rule 193 (block_item_list -> block_item .)
    RESTRICT        reduce using rule 193 (block_item_list -> block_item .)
    (               reduce using rule 193 (block_item_list -> block_item .)
    ID              reduce using rule 193 (block_item_list -> block_item .)
    ENUM            reduce using rule 193 (block_item_list -> block_item .)
    STRUCT          reduce using rule 193 (block_item_list -> block_item .)
    UNION           reduce using rule 193 (block_item_list -> block_item .)
    INC             reduce using rule 193 (block_item_list -> block_item .)
    DEC             reduce using rule 193 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 193 (block_item_list -> block_item .)
    &               reduce using rule 193 (block_item_list -> block_item .)
    *               reduce using rule 193 (block_item_list -> block_item .)
    +               reduce using rule 193 (block_item_list -> block_item .)
    -               reduce using rule 193 (block_item_list -> block_item .)
    ~               reduce using rule 193 (block_item_list -> block_item .)
    !               reduce using rule 193 (block_item_list -> block_item .)
    CONSTANCE       reduce using rule 193 (block_item_list -> block_item .)
    STRING_LITERAL  reduce using rule 193 (block_item_list -> block_item .)


state 121

    (195) block_item -> declaration .

    }               reduce using rule 195 (block_item -> declaration .)
    {               reduce using rule 195 (block_item -> declaration .)
    ;               reduce using rule 195 (block_item -> declaration .)
    IF              reduce using rule 195 (block_item -> declaration .)
    SWITCH          reduce using rule 195 (block_item -> declaration .)
    WHILE           reduce using rule 195 (block_item -> declaration .)
    DO              reduce using rule 195 (block_item -> declaration .)
    FOR             reduce using rule 195 (block_item -> declaration .)
    GOTO            reduce using rule 195 (block_item -> declaration .)
    RETURN          reduce using rule 195 (block_item -> declaration .)
    TYPEDEF         reduce using rule 195 (block_item -> declaration .)
    EXTERN          reduce using rule 195 (block_item -> declaration .)
    STATIC          reduce using rule 195 (block_item -> declaration .)
    AUTO            reduce using rule 195 (block_item -> declaration .)
    REGISTER        reduce using rule 195 (block_item -> declaration .)
    VOID            reduce using rule 195 (block_item -> declaration .)
    CHAR            reduce using rule 195 (block_item -> declaration .)
    SHORT           reduce using rule 195 (block_item -> declaration .)
    INT             reduce using rule 195 (block_item -> declaration .)
    LONG            reduce using rule 195 (block_item -> declaration .)
    FLOAT           reduce using rule 195 (block_item -> declaration .)
    DOUBLE          reduce using rule 195 (block_item -> declaration .)
    SIGNED          reduce using rule 195 (block_item -> declaration .)
    UNSIGNED        reduce using rule 195 (block_item -> declaration .)
    BOOL            reduce using rule 195 (block_item -> declaration .)
    CONST           reduce using rule 195 (block_item -> declaration .)
    VOLATILE        reduce using rule 195 (block_item -> declaration .)
    RESTRICT        reduce using rule 195 (block_item -> declaration .)
    (               reduce using rule 195 (block_item -> declaration .)
    ID              reduce using rule 195 (block_item -> declaration .)
    ENUM            reduce using rule 195 (block_item -> declaration .)
    STRUCT          reduce using rule 195 (block_item -> declaration .)
    UNION           reduce using rule 195 (block_item -> declaration .)
    INC             reduce using rule 195 (block_item -> declaration .)
    DEC             reduce using rule 195 (block_item -> declaration .)
    SIZEOF          reduce using rule 195 (block_item -> declaration .)
    &               reduce using rule 195 (block_item -> declaration .)
    *               reduce using rule 195 (block_item -> declaration .)
    +               reduce using rule 195 (block_item -> declaration .)
    -               reduce using rule 195 (block_item -> declaration .)
    ~               reduce using rule 195 (block_item -> declaration .)
    !               reduce using rule 195 (block_item -> declaration .)
    CONSTANCE       reduce using rule 195 (block_item -> declaration .)
    STRING_LITERAL  reduce using rule 195 (block_item -> declaration .)


state 122

    (196) block_item -> statement .

    }               reduce using rule 196 (block_item -> statement .)
    {               reduce using rule 196 (block_item -> statement .)
    ;               reduce using rule 196 (block_item -> statement .)
    IF              reduce using rule 196 (block_item -> statement .)
    SWITCH          reduce using rule 196 (block_item -> statement .)
    WHILE           reduce using rule 196 (block_item -> statement .)
    DO              reduce using rule 196 (block_item -> statement .)
    FOR             reduce using rule 196 (block_item -> statement .)
    GOTO            reduce using rule 196 (block_item -> statement .)
    RETURN          reduce using rule 196 (block_item -> statement .)
    TYPEDEF         reduce using rule 196 (block_item -> statement .)
    EXTERN          reduce using rule 196 (block_item -> statement .)
    STATIC          reduce using rule 196 (block_item -> statement .)
    AUTO            reduce using rule 196 (block_item -> statement .)
    REGISTER        reduce using rule 196 (block_item -> statement .)
    VOID            reduce using rule 196 (block_item -> statement .)
    CHAR            reduce using rule 196 (block_item -> statement .)
    SHORT           reduce using rule 196 (block_item -> statement .)
    INT             reduce using rule 196 (block_item -> statement .)
    LONG            reduce using rule 196 (block_item -> statement .)
    FLOAT           reduce using rule 196 (block_item -> statement .)
    DOUBLE          reduce using rule 196 (block_item -> statement .)
    SIGNED          reduce using rule 196 (block_item -> statement .)
    UNSIGNED        reduce using rule 196 (block_item -> statement .)
    BOOL            reduce using rule 196 (block_item -> statement .)
    CONST           reduce using rule 196 (block_item -> statement .)
    VOLATILE        reduce using rule 196 (block_item -> statement .)
    RESTRICT        reduce using rule 196 (block_item -> statement .)
    (               reduce using rule 196 (block_item -> statement .)
    ID              reduce using rule 196 (block_item -> statement .)
    ENUM            reduce using rule 196 (block_item -> statement .)
    STRUCT          reduce using rule 196 (block_item -> statement .)
    UNION           reduce using rule 196 (block_item -> statement .)
    INC             reduce using rule 196 (block_item -> statement .)
    DEC             reduce using rule 196 (block_item -> statement .)
    SIZEOF          reduce using rule 196 (block_item -> statement .)
    &               reduce using rule 196 (block_item -> statement .)
    *               reduce using rule 196 (block_item -> statement .)
    +               reduce using rule 196 (block_item -> statement .)
    -               reduce using rule 196 (block_item -> statement .)
    ~               reduce using rule 196 (block_item -> statement .)
    !               reduce using rule 196 (block_item -> statement .)
    CONSTANCE       reduce using rule 196 (block_item -> statement .)
    STRING_LITERAL  reduce using rule 196 (block_item -> statement .)


state 123

    (5) declaration -> declaration_specifiers . ;
    (6) declaration -> declaration_specifiers . init_declarator_list ;
    (7) init_declarator_list -> . init_declarator
    (8) init_declarator_list -> . init_declarator_list , init_declarator
    (9) init_declarator -> . declarator
    (10) init_declarator -> . declarator = initializer
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    ;               shift and go to state 36
    *               shift and go to state 38
    (               shift and go to state 173
    ID              shift and go to state 42

    init_declarator_list           shift and go to state 37
    init_declarator                shift and go to state 41
    declarator                     shift and go to state 43
    pointer                        shift and go to state 172
    direct_declarator              shift and go to state 44
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 174
    identifier                     shift and go to state 175

state 124

    (204) expression_statement -> ; .

    }               reduce using rule 204 (expression_statement -> ; .)
    {               reduce using rule 204 (expression_statement -> ; .)
    ;               reduce using rule 204 (expression_statement -> ; .)
    IF              reduce using rule 204 (expression_statement -> ; .)
    SWITCH          reduce using rule 204 (expression_statement -> ; .)
    WHILE           reduce using rule 204 (expression_statement -> ; .)
    DO              reduce using rule 204 (expression_statement -> ; .)
    FOR             reduce using rule 204 (expression_statement -> ; .)
    GOTO            reduce using rule 204 (expression_statement -> ; .)
    RETURN          reduce using rule 204 (expression_statement -> ; .)
    TYPEDEF         reduce using rule 204 (expression_statement -> ; .)
    EXTERN          reduce using rule 204 (expression_statement -> ; .)
    STATIC          reduce using rule 204 (expression_statement -> ; .)
    AUTO            reduce using rule 204 (expression_statement -> ; .)
    REGISTER        reduce using rule 204 (expression_statement -> ; .)
    VOID            reduce using rule 204 (expression_statement -> ; .)
    CHAR            reduce using rule 204 (expression_statement -> ; .)
    SHORT           reduce using rule 204 (expression_statement -> ; .)
    INT             reduce using rule 204 (expression_statement -> ; .)
    LONG            reduce using rule 204 (expression_statement -> ; .)
    FLOAT           reduce using rule 204 (expression_statement -> ; .)
    DOUBLE          reduce using rule 204 (expression_statement -> ; .)
    SIGNED          reduce using rule 204 (expression_statement -> ; .)
    UNSIGNED        reduce using rule 204 (expression_statement -> ; .)
    BOOL            reduce using rule 204 (expression_statement -> ; .)
    CONST           reduce using rule 204 (expression_statement -> ; .)
    VOLATILE        reduce using rule 204 (expression_statement -> ; .)
    RESTRICT        reduce using rule 204 (expression_statement -> ; .)
    (               reduce using rule 204 (expression_statement -> ; .)
    ID              reduce using rule 204 (expression_statement -> ; .)
    ENUM            reduce using rule 204 (expression_statement -> ; .)
    STRUCT          reduce using rule 204 (expression_statement -> ; .)
    UNION           reduce using rule 204 (expression_statement -> ; .)
    INC             reduce using rule 204 (expression_statement -> ; .)
    DEC             reduce using rule 204 (expression_statement -> ; .)
    SIZEOF          reduce using rule 204 (expression_statement -> ; .)
    &               reduce using rule 204 (expression_statement -> ; .)
    *               reduce using rule 204 (expression_statement -> ; .)
    +               reduce using rule 204 (expression_statement -> ; .)
    -               reduce using rule 204 (expression_statement -> ; .)
    ~               reduce using rule 204 (expression_statement -> ; .)
    !               reduce using rule 204 (expression_statement -> ; .)
    CONSTANCE       reduce using rule 204 (expression_statement -> ; .)
    STRING_LITERAL  reduce using rule 204 (expression_statement -> ; .)
    CONTINUE        reduce using rule 204 (expression_statement -> ; .)
    BREAK           reduce using rule 204 (expression_statement -> ; .)
    )               reduce using rule 204 (expression_statement -> ; .)
    ELSE            reduce using rule 204 (expression_statement -> ; .)
    CASE            reduce using rule 204 (expression_statement -> ; .)
    DEFAULT         reduce using rule 204 (expression_statement -> ; .)


state 125

    (197) statement -> labeled_statement .

    }               reduce using rule 197 (statement -> labeled_statement .)
    {               reduce using rule 197 (statement -> labeled_statement .)
    ;               reduce using rule 197 (statement -> labeled_statement .)
    IF              reduce using rule 197 (statement -> labeled_statement .)
    SWITCH          reduce using rule 197 (statement -> labeled_statement .)
    WHILE           reduce using rule 197 (statement -> labeled_statement .)
    DO              reduce using rule 197 (statement -> labeled_statement .)
    FOR             reduce using rule 197 (statement -> labeled_statement .)
    GOTO            reduce using rule 197 (statement -> labeled_statement .)
    RETURN          reduce using rule 197 (statement -> labeled_statement .)
    TYPEDEF         reduce using rule 197 (statement -> labeled_statement .)
    EXTERN          reduce using rule 197 (statement -> labeled_statement .)
    STATIC          reduce using rule 197 (statement -> labeled_statement .)
    AUTO            reduce using rule 197 (statement -> labeled_statement .)
    REGISTER        reduce using rule 197 (statement -> labeled_statement .)
    VOID            reduce using rule 197 (statement -> labeled_statement .)
    CHAR            reduce using rule 197 (statement -> labeled_statement .)
    SHORT           reduce using rule 197 (statement -> labeled_statement .)
    INT             reduce using rule 197 (statement -> labeled_statement .)
    LONG            reduce using rule 197 (statement -> labeled_statement .)
    FLOAT           reduce using rule 197 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 197 (statement -> labeled_statement .)
    SIGNED          reduce using rule 197 (statement -> labeled_statement .)
    UNSIGNED        reduce using rule 197 (statement -> labeled_statement .)
    BOOL            reduce using rule 197 (statement -> labeled_statement .)
    CONST           reduce using rule 197 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 197 (statement -> labeled_statement .)
    RESTRICT        reduce using rule 197 (statement -> labeled_statement .)
    (               reduce using rule 197 (statement -> labeled_statement .)
    ID              reduce using rule 197 (statement -> labeled_statement .)
    ENUM            reduce using rule 197 (statement -> labeled_statement .)
    STRUCT          reduce using rule 197 (statement -> labeled_statement .)
    UNION           reduce using rule 197 (statement -> labeled_statement .)
    INC             reduce using rule 197 (statement -> labeled_statement .)
    DEC             reduce using rule 197 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 197 (statement -> labeled_statement .)
    &               reduce using rule 197 (statement -> labeled_statement .)
    *               reduce using rule 197 (statement -> labeled_statement .)
    +               reduce using rule 197 (statement -> labeled_statement .)
    -               reduce using rule 197 (statement -> labeled_statement .)
    ~               reduce using rule 197 (statement -> labeled_statement .)
    !               reduce using rule 197 (statement -> labeled_statement .)
    CONSTANCE       reduce using rule 197 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 197 (statement -> labeled_statement .)
    ELSE            reduce using rule 197 (statement -> labeled_statement .)
    CASE            reduce using rule 197 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 197 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 197 (statement -> labeled_statement .)
    BREAK           reduce using rule 197 (statement -> labeled_statement .)


state 126

    (198) statement -> compound_statement .

    }               reduce using rule 198 (statement -> compound_statement .)
    {               reduce using rule 198 (statement -> compound_statement .)
    ;               reduce using rule 198 (statement -> compound_statement .)
    IF              reduce using rule 198 (statement -> compound_statement .)
    SWITCH          reduce using rule 198 (statement -> compound_statement .)
    WHILE           reduce using rule 198 (statement -> compound_statement .)
    DO              reduce using rule 198 (statement -> compound_statement .)
    FOR             reduce using rule 198 (statement -> compound_statement .)
    GOTO            reduce using rule 198 (statement -> compound_statement .)
    RETURN          reduce using rule 198 (statement -> compound_statement .)
    TYPEDEF         reduce using rule 198 (statement -> compound_statement .)
    EXTERN          reduce using rule 198 (statement -> compound_statement .)
    STATIC          reduce using rule 198 (statement -> compound_statement .)
    AUTO            reduce using rule 198 (statement -> compound_statement .)
    REGISTER        reduce using rule 198 (statement -> compound_statement .)
    VOID            reduce using rule 198 (statement -> compound_statement .)
    CHAR            reduce using rule 198 (statement -> compound_statement .)
    SHORT           reduce using rule 198 (statement -> compound_statement .)
    INT             reduce using rule 198 (statement -> compound_statement .)
    LONG            reduce using rule 198 (statement -> compound_statement .)
    FLOAT           reduce using rule 198 (statement -> compound_statement .)
    DOUBLE          reduce using rule 198 (statement -> compound_statement .)
    SIGNED          reduce using rule 198 (statement -> compound_statement .)
    UNSIGNED        reduce using rule 198 (statement -> compound_statement .)
    BOOL            reduce using rule 198 (statement -> compound_statement .)
    CONST           reduce using rule 198 (statement -> compound_statement .)
    VOLATILE        reduce using rule 198 (statement -> compound_statement .)
    RESTRICT        reduce using rule 198 (statement -> compound_statement .)
    (               reduce using rule 198 (statement -> compound_statement .)
    ID              reduce using rule 198 (statement -> compound_statement .)
    ENUM            reduce using rule 198 (statement -> compound_statement .)
    STRUCT          reduce using rule 198 (statement -> compound_statement .)
    UNION           reduce using rule 198 (statement -> compound_statement .)
    INC             reduce using rule 198 (statement -> compound_statement .)
    DEC             reduce using rule 198 (statement -> compound_statement .)
    SIZEOF          reduce using rule 198 (statement -> compound_statement .)
    &               reduce using rule 198 (statement -> compound_statement .)
    *               reduce using rule 198 (statement -> compound_statement .)
    +               reduce using rule 198 (statement -> compound_statement .)
    -               reduce using rule 198 (statement -> compound_statement .)
    ~               reduce using rule 198 (statement -> compound_statement .)
    !               reduce using rule 198 (statement -> compound_statement .)
    CONSTANCE       reduce using rule 198 (statement -> compound_statement .)
    STRING_LITERAL  reduce using rule 198 (statement -> compound_statement .)
    ELSE            reduce using rule 198 (statement -> compound_statement .)
    CASE            reduce using rule 198 (statement -> compound_statement .)
    DEFAULT         reduce using rule 198 (statement -> compound_statement .)
    CONTINUE        reduce using rule 198 (statement -> compound_statement .)
    BREAK           reduce using rule 198 (statement -> compound_statement .)


state 127

    (199) statement -> expression_statement .

    }               reduce using rule 199 (statement -> expression_statement .)
    {               reduce using rule 199 (statement -> expression_statement .)
    ;               reduce using rule 199 (statement -> expression_statement .)
    IF              reduce using rule 199 (statement -> expression_statement .)
    SWITCH          reduce using rule 199 (statement -> expression_statement .)
    WHILE           reduce using rule 199 (statement -> expression_statement .)
    DO              reduce using rule 199 (statement -> expression_statement .)
    FOR             reduce using rule 199 (statement -> expression_statement .)
    GOTO            reduce using rule 199 (statement -> expression_statement .)
    RETURN          reduce using rule 199 (statement -> expression_statement .)
    TYPEDEF         reduce using rule 199 (statement -> expression_statement .)
    EXTERN          reduce using rule 199 (statement -> expression_statement .)
    STATIC          reduce using rule 199 (statement -> expression_statement .)
    AUTO            reduce using rule 199 (statement -> expression_statement .)
    REGISTER        reduce using rule 199 (statement -> expression_statement .)
    VOID            reduce using rule 199 (statement -> expression_statement .)
    CHAR            reduce using rule 199 (statement -> expression_statement .)
    SHORT           reduce using rule 199 (statement -> expression_statement .)
    INT             reduce using rule 199 (statement -> expression_statement .)
    LONG            reduce using rule 199 (statement -> expression_statement .)
    FLOAT           reduce using rule 199 (statement -> expression_statement .)
    DOUBLE          reduce using rule 199 (statement -> expression_statement .)
    SIGNED          reduce using rule 199 (statement -> expression_statement .)
    UNSIGNED        reduce using rule 199 (statement -> expression_statement .)
    BOOL            reduce using rule 199 (statement -> expression_statement .)
    CONST           reduce using rule 199 (statement -> expression_statement .)
    VOLATILE        reduce using rule 199 (statement -> expression_statement .)
    RESTRICT        reduce using rule 199 (statement -> expression_statement .)
    (               reduce using rule 199 (statement -> expression_statement .)
    ID              reduce using rule 199 (statement -> expression_statement .)
    ENUM            reduce using rule 199 (statement -> expression_statement .)
    STRUCT          reduce using rule 199 (statement -> expression_statement .)
    UNION           reduce using rule 199 (statement -> expression_statement .)
    INC             reduce using rule 199 (statement -> expression_statement .)
    DEC             reduce using rule 199 (statement -> expression_statement .)
    SIZEOF          reduce using rule 199 (statement -> expression_statement .)
    &               reduce using rule 199 (statement -> expression_statement .)
    *               reduce using rule 199 (statement -> expression_statement .)
    +               reduce using rule 199 (statement -> expression_statement .)
    -               reduce using rule 199 (statement -> expression_statement .)
    ~               reduce using rule 199 (statement -> expression_statement .)
    !               reduce using rule 199 (statement -> expression_statement .)
    CONSTANCE       reduce using rule 199 (statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 199 (statement -> expression_statement .)
    ELSE            reduce using rule 199 (statement -> expression_statement .)
    CASE            reduce using rule 199 (statement -> expression_statement .)
    DEFAULT         reduce using rule 199 (statement -> expression_statement .)
    CONTINUE        reduce using rule 199 (statement -> expression_statement .)
    BREAK           reduce using rule 199 (statement -> expression_statement .)


state 128

    (200) statement -> selection_statement .

    }               reduce using rule 200 (statement -> selection_statement .)
    {               reduce using rule 200 (statement -> selection_statement .)
    ;               reduce using rule 200 (statement -> selection_statement .)
    IF              reduce using rule 200 (statement -> selection_statement .)
    SWITCH          reduce using rule 200 (statement -> selection_statement .)
    WHILE           reduce using rule 200 (statement -> selection_statement .)
    DO              reduce using rule 200 (statement -> selection_statement .)
    FOR             reduce using rule 200 (statement -> selection_statement .)
    GOTO            reduce using rule 200 (statement -> selection_statement .)
    RETURN          reduce using rule 200 (statement -> selection_statement .)
    TYPEDEF         reduce using rule 200 (statement -> selection_statement .)
    EXTERN          reduce using rule 200 (statement -> selection_statement .)
    STATIC          reduce using rule 200 (statement -> selection_statement .)
    AUTO            reduce using rule 200 (statement -> selection_statement .)
    REGISTER        reduce using rule 200 (statement -> selection_statement .)
    VOID            reduce using rule 200 (statement -> selection_statement .)
    CHAR            reduce using rule 200 (statement -> selection_statement .)
    SHORT           reduce using rule 200 (statement -> selection_statement .)
    INT             reduce using rule 200 (statement -> selection_statement .)
    LONG            reduce using rule 200 (statement -> selection_statement .)
    FLOAT           reduce using rule 200 (statement -> selection_statement .)
    DOUBLE          reduce using rule 200 (statement -> selection_statement .)
    SIGNED          reduce using rule 200 (statement -> selection_statement .)
    UNSIGNED        reduce using rule 200 (statement -> selection_statement .)
    BOOL            reduce using rule 200 (statement -> selection_statement .)
    CONST           reduce using rule 200 (statement -> selection_statement .)
    VOLATILE        reduce using rule 200 (statement -> selection_statement .)
    RESTRICT        reduce using rule 200 (statement -> selection_statement .)
    (               reduce using rule 200 (statement -> selection_statement .)
    ID              reduce using rule 200 (statement -> selection_statement .)
    ENUM            reduce using rule 200 (statement -> selection_statement .)
    STRUCT          reduce using rule 200 (statement -> selection_statement .)
    UNION           reduce using rule 200 (statement -> selection_statement .)
    INC             reduce using rule 200 (statement -> selection_statement .)
    DEC             reduce using rule 200 (statement -> selection_statement .)
    SIZEOF          reduce using rule 200 (statement -> selection_statement .)
    &               reduce using rule 200 (statement -> selection_statement .)
    *               reduce using rule 200 (statement -> selection_statement .)
    +               reduce using rule 200 (statement -> selection_statement .)
    -               reduce using rule 200 (statement -> selection_statement .)
    ~               reduce using rule 200 (statement -> selection_statement .)
    !               reduce using rule 200 (statement -> selection_statement .)
    CONSTANCE       reduce using rule 200 (statement -> selection_statement .)
    STRING_LITERAL  reduce using rule 200 (statement -> selection_statement .)
    ELSE            reduce using rule 200 (statement -> selection_statement .)
    CASE            reduce using rule 200 (statement -> selection_statement .)
    DEFAULT         reduce using rule 200 (statement -> selection_statement .)
    CONTINUE        reduce using rule 200 (statement -> selection_statement .)
    BREAK           reduce using rule 200 (statement -> selection_statement .)


state 129

    (201) statement -> iteration_statement .

    }               reduce using rule 201 (statement -> iteration_statement .)
    {               reduce using rule 201 (statement -> iteration_statement .)
    ;               reduce using rule 201 (statement -> iteration_statement .)
    IF              reduce using rule 201 (statement -> iteration_statement .)
    SWITCH          reduce using rule 201 (statement -> iteration_statement .)
    WHILE           reduce using rule 201 (statement -> iteration_statement .)
    DO              reduce using rule 201 (statement -> iteration_statement .)
    FOR             reduce using rule 201 (statement -> iteration_statement .)
    GOTO            reduce using rule 201 (statement -> iteration_statement .)
    RETURN          reduce using rule 201 (statement -> iteration_statement .)
    TYPEDEF         reduce using rule 201 (statement -> iteration_statement .)
    EXTERN          reduce using rule 201 (statement -> iteration_statement .)
    STATIC          reduce using rule 201 (statement -> iteration_statement .)
    AUTO            reduce using rule 201 (statement -> iteration_statement .)
    REGISTER        reduce using rule 201 (statement -> iteration_statement .)
    VOID            reduce using rule 201 (statement -> iteration_statement .)
    CHAR            reduce using rule 201 (statement -> iteration_statement .)
    SHORT           reduce using rule 201 (statement -> iteration_statement .)
    INT             reduce using rule 201 (statement -> iteration_statement .)
    LONG            reduce using rule 201 (statement -> iteration_statement .)
    FLOAT           reduce using rule 201 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 201 (statement -> iteration_statement .)
    SIGNED          reduce using rule 201 (statement -> iteration_statement .)
    UNSIGNED        reduce using rule 201 (statement -> iteration_statement .)
    BOOL            reduce using rule 201 (statement -> iteration_statement .)
    CONST           reduce using rule 201 (statement -> iteration_statement .)
    VOLATILE        reduce using rule 201 (statement -> iteration_statement .)
    RESTRICT        reduce using rule 201 (statement -> iteration_statement .)
    (               reduce using rule 201 (statement -> iteration_statement .)
    ID              reduce using rule 201 (statement -> iteration_statement .)
    ENUM            reduce using rule 201 (statement -> iteration_statement .)
    STRUCT          reduce using rule 201 (statement -> iteration_statement .)
    UNION           reduce using rule 201 (statement -> iteration_statement .)
    INC             reduce using rule 201 (statement -> iteration_statement .)
    DEC             reduce using rule 201 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 201 (statement -> iteration_statement .)
    &               reduce using rule 201 (statement -> iteration_statement .)
    *               reduce using rule 201 (statement -> iteration_statement .)
    +               reduce using rule 201 (statement -> iteration_statement .)
    -               reduce using rule 201 (statement -> iteration_statement .)
    ~               reduce using rule 201 (statement -> iteration_statement .)
    !               reduce using rule 201 (statement -> iteration_statement .)
    CONSTANCE       reduce using rule 201 (statement -> iteration_statement .)
    STRING_LITERAL  reduce using rule 201 (statement -> iteration_statement .)
    ELSE            reduce using rule 201 (statement -> iteration_statement .)
    CASE            reduce using rule 201 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 201 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 201 (statement -> iteration_statement .)
    BREAK           reduce using rule 201 (statement -> iteration_statement .)


state 130

    (202) statement -> jump_statement .

    }               reduce using rule 202 (statement -> jump_statement .)
    {               reduce using rule 202 (statement -> jump_statement .)
    ;               reduce using rule 202 (statement -> jump_statement .)
    IF              reduce using rule 202 (statement -> jump_statement .)
    SWITCH          reduce using rule 202 (statement -> jump_statement .)
    WHILE           reduce using rule 202 (statement -> jump_statement .)
    DO              reduce using rule 202 (statement -> jump_statement .)
    FOR             reduce using rule 202 (statement -> jump_statement .)
    GOTO            reduce using rule 202 (statement -> jump_statement .)
    RETURN          reduce using rule 202 (statement -> jump_statement .)
    TYPEDEF         reduce using rule 202 (statement -> jump_statement .)
    EXTERN          reduce using rule 202 (statement -> jump_statement .)
    STATIC          reduce using rule 202 (statement -> jump_statement .)
    AUTO            reduce using rule 202 (statement -> jump_statement .)
    REGISTER        reduce using rule 202 (statement -> jump_statement .)
    VOID            reduce using rule 202 (statement -> jump_statement .)
    CHAR            reduce using rule 202 (statement -> jump_statement .)
    SHORT           reduce using rule 202 (statement -> jump_statement .)
    INT             reduce using rule 202 (statement -> jump_statement .)
    LONG            reduce using rule 202 (statement -> jump_statement .)
    FLOAT           reduce using rule 202 (statement -> jump_statement .)
    DOUBLE          reduce using rule 202 (statement -> jump_statement .)
    SIGNED          reduce using rule 202 (statement -> jump_statement .)
    UNSIGNED        reduce using rule 202 (statement -> jump_statement .)
    BOOL            reduce using rule 202 (statement -> jump_statement .)
    CONST           reduce using rule 202 (statement -> jump_statement .)
    VOLATILE        reduce using rule 202 (statement -> jump_statement .)
    RESTRICT        reduce using rule 202 (statement -> jump_statement .)
    (               reduce using rule 202 (statement -> jump_statement .)
    ID              reduce using rule 202 (statement -> jump_statement .)
    ENUM            reduce using rule 202 (statement -> jump_statement .)
    STRUCT          reduce using rule 202 (statement -> jump_statement .)
    UNION           reduce using rule 202 (statement -> jump_statement .)
    INC             reduce using rule 202 (statement -> jump_statement .)
    DEC             reduce using rule 202 (statement -> jump_statement .)
    SIZEOF          reduce using rule 202 (statement -> jump_statement .)
    &               reduce using rule 202 (statement -> jump_statement .)
    *               reduce using rule 202 (statement -> jump_statement .)
    +               reduce using rule 202 (statement -> jump_statement .)
    -               reduce using rule 202 (statement -> jump_statement .)
    ~               reduce using rule 202 (statement -> jump_statement .)
    !               reduce using rule 202 (statement -> jump_statement .)
    CONSTANCE       reduce using rule 202 (statement -> jump_statement .)
    STRING_LITERAL  reduce using rule 202 (statement -> jump_statement .)
    ELSE            reduce using rule 202 (statement -> jump_statement .)
    CASE            reduce using rule 202 (statement -> jump_statement .)
    DEFAULT         reduce using rule 202 (statement -> jump_statement .)
    CONTINUE        reduce using rule 202 (statement -> jump_statement .)
    BREAK           reduce using rule 202 (statement -> jump_statement .)


state 131

    (203) labeled_statement -> identifier . :
    (270) postfix_expression_v -> identifier . ( )
    (271) postfix_expression_v -> identifier . ( argument_expression_list )
    (276) postfix_expression_v_no_func -> identifier .

    :               shift and go to state 240
    (               shift and go to state 241
    INC             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    DEC             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    [               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    .               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    PTR             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    =               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_MUL          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_DIV          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_MOD          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_PLUS         reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_SUB          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_SL           reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_SR           reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_AND          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_XOR          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_OR           reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    *               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    /               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    %               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    +               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    -               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    SHIFT_LEFT      reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    SHIFT_RIGHT     reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    <               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    >               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    LE              reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    GE              reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    EQUAL           reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    NE              reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    &               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    ^               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    |               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AND             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    ?               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    OR              reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    ;               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    ,               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)


state 132

    (205) expression_statement -> expression_variable . ;
    (207) expression_variable -> expression_variable . , assignment_expression

    ;               shift and go to state 242
    ,               shift and go to state 243


state 133

    (284) selection_statement -> IF . ( expression_variable ) statement ELSE statement
    (285) selection_statement -> IF . ( expression_variable ) statement

    (               shift and go to state 244


state 134

    (183) identifier -> ( . identifier )
    (277) postfix_expression_v_no_func -> ( . postfix_expression_v_no_func )
    (253) cast_expression_v -> ( . type_name ) cast_expression_v
    (283) primary_expression_v -> ( . expression_variable )
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (150) type_name -> . specifier_qualifier_list
    (151) type_name -> . specifier_qualifier_list brace_pointer
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    (               shift and go to state 134
    ID              shift and go to state 42
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    ENUM            shift and go to state 30
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    identifier                     shift and go to state 245
    postfix_expression_v_no_func   shift and go to state 246
    type_name                      shift and go to state 247
    cast_expression_v              shift and go to state 149
    expression_variable            shift and go to state 248
    specifier_qualifier_list       shift and go to state 249
    assignment_expression          shift and go to state 141
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    struct_or_union                shift and go to state 29
    logical_and_expression_v       shift and go to state 151
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 135

    (286) selection_statement -> SWITCH . ( expression_variable ) statement_switch

    (               shift and go to state 250


state 136

    (317) iteration_statement -> WHILE . ( expression_variable ) statement_while

    (               shift and go to state 251


state 137

    (318) iteration_statement -> DO . statement_while WHILE ( expression_variable ) ;
    (311) statement_while -> . labeled_statement
    (312) statement_while -> . compound_statement_while
    (313) statement_while -> . expression_statement
    (314) statement_while -> . selection_statement_while
    (315) statement_while -> . iteration_statement
    (316) statement_while -> . jump_statement_while
    (203) labeled_statement -> . identifier :
    (305) compound_statement_while -> . { }
    (306) compound_statement_while -> . { block_item_list_while }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 259
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    statement_while                shift and go to state 252
    expression_variable            shift and go to state 132
    labeled_statement              shift and go to state 253
    compound_statement_while       shift and go to state 254
    expression_statement           shift and go to state 255
    selection_statement_while      shift and go to state 256
    iteration_statement            shift and go to state 257
    jump_statement_while           shift and go to state 258
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 138

    (319) iteration_statement -> FOR . ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> FOR . ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> FOR . ( declaration expression_statement ) statement_while
    (322) iteration_statement -> FOR . ( declaration expression_statement expression_variable ) statement_while

    (               shift and go to state 266


state 139

    (341) jump_statement -> GOTO . ID ;

    ID              shift and go to state 267


state 140

    (342) jump_statement -> RETURN . ;
    (343) jump_statement -> RETURN . expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ;               shift and go to state 268
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 269
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 141

    (206) expression_variable -> assignment_expression .

    ;               reduce using rule 206 (expression_variable -> assignment_expression .)
    ,               reduce using rule 206 (expression_variable -> assignment_expression .)
    )               reduce using rule 206 (expression_variable -> assignment_expression .)
    :               reduce using rule 206 (expression_variable -> assignment_expression .)


state 142

    (208) assignment_expression -> conditional_expression_v .

    ;               reduce using rule 208 (assignment_expression -> conditional_expression_v .)
    ,               reduce using rule 208 (assignment_expression -> conditional_expression_v .)
    )               reduce using rule 208 (assignment_expression -> conditional_expression_v .)
    }               reduce using rule 208 (assignment_expression -> conditional_expression_v .)
    :               reduce using rule 208 (assignment_expression -> conditional_expression_v .)


state 143

    (209) assignment_expression -> unary_expression_v . assignment_operator assignment_expression
    (251) cast_expression_v -> unary_expression_v .
    (210) assignment_operator -> . =
    (211) assignment_operator -> . AO_MUL
    (212) assignment_operator -> . AO_DIV
    (213) assignment_operator -> . AO_MOD
    (214) assignment_operator -> . AO_PLUS
    (215) assignment_operator -> . AO_SUB
    (216) assignment_operator -> . AO_SL
    (217) assignment_operator -> . AO_SR
    (218) assignment_operator -> . AO_AND
    (219) assignment_operator -> . AO_XOR
    (220) assignment_operator -> . AO_OR

    *               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    /               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    %               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    +               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    -               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    SHIFT_LEFT      reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    SHIFT_RIGHT     reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    <               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    >               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    LE              reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    GE              reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    EQUAL           reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    NE              reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    &               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    ^               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    |               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    AND             reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    ?               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    OR              reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    ;               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    ,               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    )               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    }               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    :               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    =               shift and go to state 271
    AO_MUL          shift and go to state 272
    AO_DIV          shift and go to state 273
    AO_MOD          shift and go to state 274
    AO_PLUS         shift and go to state 275
    AO_SUB          shift and go to state 276
    AO_SL           shift and go to state 277
    AO_SR           shift and go to state 278
    AO_AND          shift and go to state 279
    AO_XOR          shift and go to state 280
    AO_OR           shift and go to state 281

    assignment_operator            shift and go to state 270

state 144

    (221) conditional_expression_v -> logical_or_expression_v .
    (222) conditional_expression_v -> logical_or_expression_v . ? expression_variable : conditional_expression_v
    (224) logical_or_expression_v -> logical_or_expression_v . OR logical_and_expression_v

    ;               reduce using rule 221 (conditional_expression_v -> logical_or_expression_v .)
    ,               reduce using rule 221 (conditional_expression_v -> logical_or_expression_v .)
    )               reduce using rule 221 (conditional_expression_v -> logical_or_expression_v .)
    }               reduce using rule 221 (conditional_expression_v -> logical_or_expression_v .)
    :               reduce using rule 221 (conditional_expression_v -> logical_or_expression_v .)
    ?               shift and go to state 282
    OR              shift and go to state 283


state 145

    (257) unary_expression_v -> postfix_expression_v .
    (269) postfix_expression_v -> postfix_expression_v . [ expression ]
    (272) postfix_expression_v -> postfix_expression_v . . ID
    (273) postfix_expression_v -> postfix_expression_v . PTR ID

    =               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    AO_MUL          reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    AO_DIV          reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    AO_MOD          reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    AO_PLUS         reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    AO_SUB          reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    AO_SL           reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    AO_SR           reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    AO_AND          reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    AO_XOR          reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    AO_OR           reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    *               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    /               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    %               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    +               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    -               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    SHIFT_LEFT      reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    SHIFT_RIGHT     reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    <               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    >               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    LE              reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    GE              reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    EQUAL           reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    NE              reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    &               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    ^               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    |               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    AND             reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    ?               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    OR              reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    ;               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    ,               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    )               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    }               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    :               reduce using rule 257 (unary_expression_v -> postfix_expression_v .)
    [               shift and go to state 284
    .               shift and go to state 285
    PTR             shift and go to state 286


state 146

    (258) unary_expression_v -> INC . unary_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 288
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 289
    ID              shift and go to state 42

    unary_expression_v             shift and go to state 287
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 147

    (259) unary_expression_v -> DEC . unary_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 288
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 289
    ID              shift and go to state 42

    unary_expression_v             shift and go to state 290
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 148

    (260) unary_expression_v -> unary_operator_v . cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 291
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 149

    (247) multiplicative_expression_v -> cast_expression_v .

    *               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    /               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    %               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    +               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    -               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    SHIFT_LEFT      reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    SHIFT_RIGHT     reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    <               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    >               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    LE              reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    GE              reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    EQUAL           reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    NE              reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    &               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    ^               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    |               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    AND             reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    ?               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    OR              reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    ;               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    ,               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    )               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    }               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)
    :               reduce using rule 247 (multiplicative_expression_v -> cast_expression_v .)


state 150

    (261) unary_expression_v -> SIZEOF . unary_expression_v
    (255) unary_expression_v_constance -> SIZEOF . unary_expression_v_constance
    (256) unary_expression_v_constance -> SIZEOF . ( type_name )
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 296
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    unary_expression_v             shift and go to state 294
    unary_expression_v_constance   shift and go to state 295
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 151

    (223) logical_or_expression_v -> logical_and_expression_v .
    (226) logical_and_expression_v -> logical_and_expression_v . AND inclusive_or_expression_v

    ?               reduce using rule 223 (logical_or_expression_v -> logical_and_expression_v .)
    OR              reduce using rule 223 (logical_or_expression_v -> logical_and_expression_v .)
    ;               reduce using rule 223 (logical_or_expression_v -> logical_and_expression_v .)
    ,               reduce using rule 223 (logical_or_expression_v -> logical_and_expression_v .)
    )               reduce using rule 223 (logical_or_expression_v -> logical_and_expression_v .)
    }               reduce using rule 223 (logical_or_expression_v -> logical_and_expression_v .)
    :               reduce using rule 223 (logical_or_expression_v -> logical_and_expression_v .)
    AND             shift and go to state 297


state 152

    (268) postfix_expression_v -> postfix_expression_v_no_func .
    (274) postfix_expression_v -> postfix_expression_v_no_func . INC
    (275) postfix_expression_v -> postfix_expression_v_no_func . DEC
    (278) postfix_expression_v_no_func -> postfix_expression_v_no_func . [ expression ]
    (279) postfix_expression_v_no_func -> postfix_expression_v_no_func . . ID
    (280) postfix_expression_v_no_func -> postfix_expression_v_no_func . PTR ID

  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for PTR resolved as shift
    =               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_MUL          reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_DIV          reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_MOD          reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_PLUS         reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_SUB          reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_SL           reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_SR           reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_AND          reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_XOR          reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_OR           reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    *               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    /               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    %               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    +               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    -               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    SHIFT_LEFT      reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    SHIFT_RIGHT     reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    <               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    >               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    LE              reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    GE              reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    EQUAL           reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    NE              reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    &               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    ^               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    |               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AND             reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    ?               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    OR              reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    ;               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    ,               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    )               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    }               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    :               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    INC             shift and go to state 298
    DEC             shift and go to state 299
    [               shift and go to state 300
    .               shift and go to state 301
    PTR             shift and go to state 302

  ! [               [ reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .) ]
  ! .               [ reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .) ]
  ! PTR             [ reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .) ]


state 153

    (262) unary_operator_v -> & .

    (               reduce using rule 262 (unary_operator_v -> & .)
    INC             reduce using rule 262 (unary_operator_v -> & .)
    DEC             reduce using rule 262 (unary_operator_v -> & .)
    SIZEOF          reduce using rule 262 (unary_operator_v -> & .)
    &               reduce using rule 262 (unary_operator_v -> & .)
    *               reduce using rule 262 (unary_operator_v -> & .)
    +               reduce using rule 262 (unary_operator_v -> & .)
    -               reduce using rule 262 (unary_operator_v -> & .)
    ~               reduce using rule 262 (unary_operator_v -> & .)
    !               reduce using rule 262 (unary_operator_v -> & .)
    CONSTANCE       reduce using rule 262 (unary_operator_v -> & .)
    STRING_LITERAL  reduce using rule 262 (unary_operator_v -> & .)
    ID              reduce using rule 262 (unary_operator_v -> & .)


state 154

    (263) unary_operator_v -> * .

    (               reduce using rule 263 (unary_operator_v -> * .)
    INC             reduce using rule 263 (unary_operator_v -> * .)
    DEC             reduce using rule 263 (unary_operator_v -> * .)
    SIZEOF          reduce using rule 263 (unary_operator_v -> * .)
    &               reduce using rule 263 (unary_operator_v -> * .)
    *               reduce using rule 263 (unary_operator_v -> * .)
    +               reduce using rule 263 (unary_operator_v -> * .)
    -               reduce using rule 263 (unary_operator_v -> * .)
    ~               reduce using rule 263 (unary_operator_v -> * .)
    !               reduce using rule 263 (unary_operator_v -> * .)
    CONSTANCE       reduce using rule 263 (unary_operator_v -> * .)
    STRING_LITERAL  reduce using rule 263 (unary_operator_v -> * .)
    ID              reduce using rule 263 (unary_operator_v -> * .)


state 155

    (264) unary_operator_v -> + .

    (               reduce using rule 264 (unary_operator_v -> + .)
    INC             reduce using rule 264 (unary_operator_v -> + .)
    DEC             reduce using rule 264 (unary_operator_v -> + .)
    SIZEOF          reduce using rule 264 (unary_operator_v -> + .)
    &               reduce using rule 264 (unary_operator_v -> + .)
    *               reduce using rule 264 (unary_operator_v -> + .)
    +               reduce using rule 264 (unary_operator_v -> + .)
    -               reduce using rule 264 (unary_operator_v -> + .)
    ~               reduce using rule 264 (unary_operator_v -> + .)
    !               reduce using rule 264 (unary_operator_v -> + .)
    CONSTANCE       reduce using rule 264 (unary_operator_v -> + .)
    STRING_LITERAL  reduce using rule 264 (unary_operator_v -> + .)
    ID              reduce using rule 264 (unary_operator_v -> + .)


state 156

    (265) unary_operator_v -> - .

    (               reduce using rule 265 (unary_operator_v -> - .)
    INC             reduce using rule 265 (unary_operator_v -> - .)
    DEC             reduce using rule 265 (unary_operator_v -> - .)
    SIZEOF          reduce using rule 265 (unary_operator_v -> - .)
    &               reduce using rule 265 (unary_operator_v -> - .)
    *               reduce using rule 265 (unary_operator_v -> - .)
    +               reduce using rule 265 (unary_operator_v -> - .)
    -               reduce using rule 265 (unary_operator_v -> - .)
    ~               reduce using rule 265 (unary_operator_v -> - .)
    !               reduce using rule 265 (unary_operator_v -> - .)
    CONSTANCE       reduce using rule 265 (unary_operator_v -> - .)
    STRING_LITERAL  reduce using rule 265 (unary_operator_v -> - .)
    ID              reduce using rule 265 (unary_operator_v -> - .)


state 157

    (266) unary_operator_v -> ~ .

    (               reduce using rule 266 (unary_operator_v -> ~ .)
    INC             reduce using rule 266 (unary_operator_v -> ~ .)
    DEC             reduce using rule 266 (unary_operator_v -> ~ .)
    SIZEOF          reduce using rule 266 (unary_operator_v -> ~ .)
    &               reduce using rule 266 (unary_operator_v -> ~ .)
    *               reduce using rule 266 (unary_operator_v -> ~ .)
    +               reduce using rule 266 (unary_operator_v -> ~ .)
    -               reduce using rule 266 (unary_operator_v -> ~ .)
    ~               reduce using rule 266 (unary_operator_v -> ~ .)
    !               reduce using rule 266 (unary_operator_v -> ~ .)
    CONSTANCE       reduce using rule 266 (unary_operator_v -> ~ .)
    STRING_LITERAL  reduce using rule 266 (unary_operator_v -> ~ .)
    ID              reduce using rule 266 (unary_operator_v -> ~ .)


state 158

    (267) unary_operator_v -> ! .

    (               reduce using rule 267 (unary_operator_v -> ! .)
    INC             reduce using rule 267 (unary_operator_v -> ! .)
    DEC             reduce using rule 267 (unary_operator_v -> ! .)
    SIZEOF          reduce using rule 267 (unary_operator_v -> ! .)
    &               reduce using rule 267 (unary_operator_v -> ! .)
    *               reduce using rule 267 (unary_operator_v -> ! .)
    +               reduce using rule 267 (unary_operator_v -> ! .)
    -               reduce using rule 267 (unary_operator_v -> ! .)
    ~               reduce using rule 267 (unary_operator_v -> ! .)
    !               reduce using rule 267 (unary_operator_v -> ! .)
    CONSTANCE       reduce using rule 267 (unary_operator_v -> ! .)
    STRING_LITERAL  reduce using rule 267 (unary_operator_v -> ! .)
    ID              reduce using rule 267 (unary_operator_v -> ! .)


state 159

    (225) logical_and_expression_v -> inclusive_or_expression_v .
    (228) inclusive_or_expression_v -> inclusive_or_expression_v . | exclusive_or_expression_v

    AND             reduce using rule 225 (logical_and_expression_v -> inclusive_or_expression_v .)
    ?               reduce using rule 225 (logical_and_expression_v -> inclusive_or_expression_v .)
    OR              reduce using rule 225 (logical_and_expression_v -> inclusive_or_expression_v .)
    ;               reduce using rule 225 (logical_and_expression_v -> inclusive_or_expression_v .)
    ,               reduce using rule 225 (logical_and_expression_v -> inclusive_or_expression_v .)
    )               reduce using rule 225 (logical_and_expression_v -> inclusive_or_expression_v .)
    }               reduce using rule 225 (logical_and_expression_v -> inclusive_or_expression_v .)
    :               reduce using rule 225 (logical_and_expression_v -> inclusive_or_expression_v .)
    |               shift and go to state 303


state 160

    (227) inclusive_or_expression_v -> exclusive_or_expression_v .
    (230) exclusive_or_expression_v -> exclusive_or_expression_v . ^ and_expression_v

    |               reduce using rule 227 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    AND             reduce using rule 227 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    ?               reduce using rule 227 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    OR              reduce using rule 227 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    ;               reduce using rule 227 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    ,               reduce using rule 227 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    )               reduce using rule 227 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    }               reduce using rule 227 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    :               reduce using rule 227 (inclusive_or_expression_v -> exclusive_or_expression_v .)
    ^               shift and go to state 304


state 161

    (229) exclusive_or_expression_v -> and_expression_v .
    (232) and_expression_v -> and_expression_v . & equality_expression_v

    ^               reduce using rule 229 (exclusive_or_expression_v -> and_expression_v .)
    |               reduce using rule 229 (exclusive_or_expression_v -> and_expression_v .)
    AND             reduce using rule 229 (exclusive_or_expression_v -> and_expression_v .)
    ?               reduce using rule 229 (exclusive_or_expression_v -> and_expression_v .)
    OR              reduce using rule 229 (exclusive_or_expression_v -> and_expression_v .)
    ;               reduce using rule 229 (exclusive_or_expression_v -> and_expression_v .)
    ,               reduce using rule 229 (exclusive_or_expression_v -> and_expression_v .)
    )               reduce using rule 229 (exclusive_or_expression_v -> and_expression_v .)
    }               reduce using rule 229 (exclusive_or_expression_v -> and_expression_v .)
    :               reduce using rule 229 (exclusive_or_expression_v -> and_expression_v .)
    &               shift and go to state 305


state 162

    (231) and_expression_v -> equality_expression_v .
    (234) equality_expression_v -> equality_expression_v . EQUAL relational_expression_v
    (235) equality_expression_v -> equality_expression_v . NE relational_expression_v

    &               reduce using rule 231 (and_expression_v -> equality_expression_v .)
    ^               reduce using rule 231 (and_expression_v -> equality_expression_v .)
    |               reduce using rule 231 (and_expression_v -> equality_expression_v .)
    AND             reduce using rule 231 (and_expression_v -> equality_expression_v .)
    ?               reduce using rule 231 (and_expression_v -> equality_expression_v .)
    OR              reduce using rule 231 (and_expression_v -> equality_expression_v .)
    ;               reduce using rule 231 (and_expression_v -> equality_expression_v .)
    ,               reduce using rule 231 (and_expression_v -> equality_expression_v .)
    )               reduce using rule 231 (and_expression_v -> equality_expression_v .)
    }               reduce using rule 231 (and_expression_v -> equality_expression_v .)
    :               reduce using rule 231 (and_expression_v -> equality_expression_v .)
    EQUAL           shift and go to state 306
    NE              shift and go to state 307


state 163

    (233) equality_expression_v -> relational_expression_v .
    (237) relational_expression_v -> relational_expression_v . < shift_expression_v
    (238) relational_expression_v -> relational_expression_v . > shift_expression_v
    (239) relational_expression_v -> relational_expression_v . LE shift_expression_v
    (240) relational_expression_v -> relational_expression_v . GE shift_expression_v

    EQUAL           reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    NE              reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    &               reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    ^               reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    |               reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    AND             reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    ?               reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    OR              reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    ;               reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    ,               reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    )               reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    }               reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    :               reduce using rule 233 (equality_expression_v -> relational_expression_v .)
    <               shift and go to state 308
    >               shift and go to state 309
    LE              shift and go to state 310
    GE              shift and go to state 311


state 164

    (236) relational_expression_v -> shift_expression_v .
    (242) shift_expression_v -> shift_expression_v . SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> shift_expression_v . SHIFT_RIGHT additive_expression_v

    <               reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    >               reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    LE              reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    GE              reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    EQUAL           reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    NE              reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    &               reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    ^               reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    |               reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    AND             reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    ?               reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    OR              reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    ;               reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    ,               reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    )               reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    }               reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    :               reduce using rule 236 (relational_expression_v -> shift_expression_v .)
    SHIFT_LEFT      shift and go to state 312
    SHIFT_RIGHT     shift and go to state 313


state 165

    (241) shift_expression_v -> additive_expression_v .
    (245) additive_expression_v -> additive_expression_v . + multiplicative_expression_v
    (246) additive_expression_v -> additive_expression_v . - multiplicative_expression_v

    SHIFT_LEFT      reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    SHIFT_RIGHT     reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    <               reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    >               reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    LE              reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    GE              reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    EQUAL           reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    NE              reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    &               reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    ^               reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    |               reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    AND             reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    ?               reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    OR              reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    ;               reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    ,               reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    )               reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    }               reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    :               reduce using rule 241 (shift_expression_v -> additive_expression_v .)
    +               shift and go to state 314
    -               shift and go to state 315


state 166

    (244) additive_expression_v -> multiplicative_expression_v .
    (248) multiplicative_expression_v -> multiplicative_expression_v . * cast_expression_v
    (249) multiplicative_expression_v -> multiplicative_expression_v . / cast_expression_v
    (250) multiplicative_expression_v -> multiplicative_expression_v . % cast_expression_v

    +               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    -               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    SHIFT_LEFT      reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    SHIFT_RIGHT     reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    <               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    >               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    LE              reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    GE              reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    EQUAL           reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    NE              reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    &               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    ^               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    |               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    AND             reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    ?               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    OR              reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    ;               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    ,               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    )               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    }               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    :               reduce using rule 244 (additive_expression_v -> multiplicative_expression_v .)
    *               shift and go to state 316
    /               shift and go to state 317
    %               shift and go to state 318


state 167

    (252) cast_expression_v -> unary_expression_v_constance .

    *               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    /               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    %               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    +               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    -               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    SHIFT_LEFT      reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    SHIFT_RIGHT     reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    <               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    >               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    LE              reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    GE              reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    EQUAL           reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    NE              reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    &               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    ^               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    |               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    AND             reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    ?               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    OR              reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    ;               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    ,               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    )               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    =               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    AO_MUL          reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    AO_DIV          reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    AO_MOD          reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    AO_PLUS         reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    AO_SUB          reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    AO_SL           reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    AO_SR           reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    AO_AND          reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    AO_XOR          reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    AO_OR           reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    }               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)
    :               reduce using rule 252 (cast_expression_v -> unary_expression_v_constance .)


state 168

    (254) unary_expression_v_constance -> primary_expression_v .

    *               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    /               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    %               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    +               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    -               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    SHIFT_LEFT      reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    SHIFT_RIGHT     reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    <               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    >               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    LE              reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    GE              reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    EQUAL           reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    NE              reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    &               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    ^               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    |               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    AND             reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    ?               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    OR              reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    ;               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    ,               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    )               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    =               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    AO_MUL          reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    AO_DIV          reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    AO_MOD          reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    AO_PLUS         reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    AO_SUB          reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    AO_SL           reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    AO_SR           reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    AO_AND          reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    AO_XOR          reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    AO_OR           reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    }               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)
    :               reduce using rule 254 (unary_expression_v_constance -> primary_expression_v .)


state 169

    (281) primary_expression_v -> CONSTANCE .

    *               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    /               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    %               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    +               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    -               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    SHIFT_LEFT      reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    SHIFT_RIGHT     reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    <               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    >               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    LE              reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    GE              reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    EQUAL           reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    NE              reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    &               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    ^               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    |               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    AND             reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    ?               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    OR              reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    ;               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    ,               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    )               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    =               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    AO_MUL          reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    AO_DIV          reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    AO_MOD          reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    AO_PLUS         reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    AO_SUB          reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    AO_SL           reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    AO_SR           reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    AO_AND          reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    AO_XOR          reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    AO_OR           reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    }               reduce using rule 281 (primary_expression_v -> CONSTANCE .)
    :               reduce using rule 281 (primary_expression_v -> CONSTANCE .)


state 170

    (282) primary_expression_v -> STRING_LITERAL .

    *               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    /               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    %               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    +               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    -               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    SHIFT_LEFT      reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    SHIFT_RIGHT     reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    <               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    >               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    LE              reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    GE              reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    EQUAL           reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    NE              reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    &               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    ^               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    |               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    AND             reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    ?               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    OR              reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    ;               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    ,               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    )               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    =               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    AO_MUL          reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    AO_DIV          reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    AO_MOD          reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    AO_PLUS         reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    AO_SUB          reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    AO_SL           reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    AO_SR           reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    AO_AND          reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    AO_XOR          reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    AO_OR           reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    }               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)
    :               reduce using rule 282 (primary_expression_v -> STRING_LITERAL .)


state 171

    (8) init_declarator_list -> init_declarator_list , init_declarator .

    ;               reduce using rule 8 (init_declarator_list -> init_declarator_list , init_declarator .)
    ,               reduce using rule 8 (init_declarator_list -> init_declarator_list , init_declarator .)


state 172

    (94) declarator -> pointer . direct_declarator
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 173
    ID              shift and go to state 42

    direct_declarator              shift and go to state 73
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 174
    identifier                     shift and go to state 175

state 173

    (103) direct_declarator -> ( . declarator )
    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (180) direct_function_declarator -> ( . pointer direct_function_declarator )
    (181) direct_function_declarator -> ( . direct_function_declarator )
    (183) identifier -> ( . identifier )
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    *               shift and go to state 38
    (               shift and go to state 319
    ID              shift and go to state 42

    declarator                     shift and go to state 86
    pointer                        shift and go to state 320
    direct_declarator_forlist      shift and go to state 87
    direct_function_declarator     shift and go to state 84
    identifier                     shift and go to state 321
    direct_declarator              shift and go to state 44

state 174

    (104) direct_declarator -> direct_function_declarator .

    =               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    ;               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    ,               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    :               reduce using rule 104 (direct_declarator -> direct_function_declarator .)
    )               reduce using rule 104 (direct_declarator -> direct_function_declarator .)


state 175

    (105) direct_declarator_forlist -> identifier .
    (109) direct_declarator_forlist -> identifier . [ constant_expression ]
    (110) direct_declarator_forlist -> identifier . [ ]
    (182) direct_function_declarator -> identifier . parameter_type_list_definition
    (185) parameter_type_list_definition -> . ( )
    (186) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (187) parameter_type_list_definition -> . ( parameter_list )

  ! shift/reduce conflict for [ resolved as shift
    =               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    ;               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    ,               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    :               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    )               reduce using rule 105 (direct_declarator_forlist -> identifier .)
    [               shift and go to state 89
    (               shift and go to state 90

  ! [               [ reduce using rule 105 (direct_declarator_forlist -> identifier .) ]

    parameter_type_list_definition shift and go to state 88

state 176

    (99) pointer -> * type_qualifier_list pointer .

    (               reduce using rule 99 (pointer -> * type_qualifier_list pointer .)
    ID              reduce using rule 99 (pointer -> * type_qualifier_list pointer .)
    [               reduce using rule 99 (pointer -> * type_qualifier_list pointer .)
    ,               reduce using rule 99 (pointer -> * type_qualifier_list pointer .)
    =               reduce using rule 99 (pointer -> * type_qualifier_list pointer .)
    )               reduce using rule 99 (pointer -> * type_qualifier_list pointer .)


state 177

    (101) type_qualifier_list -> type_qualifier_list type_qualifier .

    *               reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    RESTRICT        reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    (               reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ID              reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    [               reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    ,               reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    =               reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    )               reduce using rule 101 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 178

    (180) direct_function_declarator -> ( . pointer direct_function_declarator )
    (181) direct_function_declarator -> ( . direct_function_declarator )
    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (103) direct_declarator -> ( . declarator )
    (183) identifier -> ( . identifier )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    *               shift and go to state 38
    (               shift and go to state 322
    ID              shift and go to state 42

    pointer                        shift and go to state 83
    direct_function_declarator     shift and go to state 84
    direct_declarator_forlist      shift and go to state 87
    declarator                     shift and go to state 86
    identifier                     shift and go to state 85
    direct_declarator              shift and go to state 44

state 179

    (180) direct_function_declarator -> ( pointer direct_function_declarator . )
    (104) direct_declarator -> direct_function_declarator .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 323

  ! )               [ reduce using rule 104 (direct_declarator -> direct_function_declarator .) ]


state 180

    (106) direct_declarator_forlist -> ( pointer direct_declarator_forlist . )
    (108) direct_declarator_forlist -> direct_declarator_forlist . [ constant_expression ]
    (102) direct_declarator -> direct_declarator_forlist .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 324
    [               shift and go to state 92

  ! )               [ reduce using rule 102 (direct_declarator -> direct_declarator_forlist .) ]


state 181

    (181) direct_function_declarator -> ( direct_function_declarator ) .

    {               reduce using rule 181 (direct_function_declarator -> ( direct_function_declarator ) .)
    =               reduce using rule 181 (direct_function_declarator -> ( direct_function_declarator ) .)
    ;               reduce using rule 181 (direct_function_declarator -> ( direct_function_declarator ) .)
    ,               reduce using rule 181 (direct_function_declarator -> ( direct_function_declarator ) .)
    )               reduce using rule 181 (direct_function_declarator -> ( direct_function_declarator ) .)
    :               reduce using rule 181 (direct_function_declarator -> ( direct_function_declarator ) .)


state 182

    (183) identifier -> ( identifier ) .

    [               reduce using rule 183 (identifier -> ( identifier ) .)
    (               reduce using rule 183 (identifier -> ( identifier ) .)
    =               reduce using rule 183 (identifier -> ( identifier ) .)
    ;               reduce using rule 183 (identifier -> ( identifier ) .)
    ,               reduce using rule 183 (identifier -> ( identifier ) .)
    {               reduce using rule 183 (identifier -> ( identifier ) .)
    TYPEDEF         reduce using rule 183 (identifier -> ( identifier ) .)
    EXTERN          reduce using rule 183 (identifier -> ( identifier ) .)
    STATIC          reduce using rule 183 (identifier -> ( identifier ) .)
    AUTO            reduce using rule 183 (identifier -> ( identifier ) .)
    REGISTER        reduce using rule 183 (identifier -> ( identifier ) .)
    CONST           reduce using rule 183 (identifier -> ( identifier ) .)
    VOLATILE        reduce using rule 183 (identifier -> ( identifier ) .)
    RESTRICT        reduce using rule 183 (identifier -> ( identifier ) .)
    *               reduce using rule 183 (identifier -> ( identifier ) .)
    ID              reduce using rule 183 (identifier -> ( identifier ) .)
    )               reduce using rule 183 (identifier -> ( identifier ) .)
    :               reduce using rule 183 (identifier -> ( identifier ) .)
    }               reduce using rule 183 (identifier -> ( identifier ) .)
    INC             reduce using rule 183 (identifier -> ( identifier ) .)
    DEC             reduce using rule 183 (identifier -> ( identifier ) .)
    .               reduce using rule 183 (identifier -> ( identifier ) .)
    PTR             reduce using rule 183 (identifier -> ( identifier ) .)
    AO_MUL          reduce using rule 183 (identifier -> ( identifier ) .)
    AO_DIV          reduce using rule 183 (identifier -> ( identifier ) .)
    AO_MOD          reduce using rule 183 (identifier -> ( identifier ) .)
    AO_PLUS         reduce using rule 183 (identifier -> ( identifier ) .)
    AO_SUB          reduce using rule 183 (identifier -> ( identifier ) .)
    AO_SL           reduce using rule 183 (identifier -> ( identifier ) .)
    AO_SR           reduce using rule 183 (identifier -> ( identifier ) .)
    AO_AND          reduce using rule 183 (identifier -> ( identifier ) .)
    AO_XOR          reduce using rule 183 (identifier -> ( identifier ) .)
    AO_OR           reduce using rule 183 (identifier -> ( identifier ) .)
    /               reduce using rule 183 (identifier -> ( identifier ) .)
    %               reduce using rule 183 (identifier -> ( identifier ) .)
    +               reduce using rule 183 (identifier -> ( identifier ) .)
    -               reduce using rule 183 (identifier -> ( identifier ) .)
    SHIFT_LEFT      reduce using rule 183 (identifier -> ( identifier ) .)
    SHIFT_RIGHT     reduce using rule 183 (identifier -> ( identifier ) .)
    <               reduce using rule 183 (identifier -> ( identifier ) .)
    >               reduce using rule 183 (identifier -> ( identifier ) .)
    LE              reduce using rule 183 (identifier -> ( identifier ) .)
    GE              reduce using rule 183 (identifier -> ( identifier ) .)
    EQUAL           reduce using rule 183 (identifier -> ( identifier ) .)
    NE              reduce using rule 183 (identifier -> ( identifier ) .)
    &               reduce using rule 183 (identifier -> ( identifier ) .)
    ^               reduce using rule 183 (identifier -> ( identifier ) .)
    |               reduce using rule 183 (identifier -> ( identifier ) .)
    AND             reduce using rule 183 (identifier -> ( identifier ) .)
    ?               reduce using rule 183 (identifier -> ( identifier ) .)
    OR              reduce using rule 183 (identifier -> ( identifier ) .)


state 183

    (103) direct_declarator -> ( declarator ) .

    =               reduce using rule 103 (direct_declarator -> ( declarator ) .)
    ;               reduce using rule 103 (direct_declarator -> ( declarator ) .)
    ,               reduce using rule 103 (direct_declarator -> ( declarator ) .)
    )               reduce using rule 103 (direct_declarator -> ( declarator ) .)
    :               reduce using rule 103 (direct_declarator -> ( declarator ) .)


state 184

    (107) direct_declarator_forlist -> ( direct_declarator_forlist ) .

    [               reduce using rule 107 (direct_declarator_forlist -> ( direct_declarator_forlist ) .)
    =               reduce using rule 107 (direct_declarator_forlist -> ( direct_declarator_forlist ) .)
    ;               reduce using rule 107 (direct_declarator_forlist -> ( direct_declarator_forlist ) .)
    ,               reduce using rule 107 (direct_declarator_forlist -> ( direct_declarator_forlist ) .)
    )               reduce using rule 107 (direct_declarator_forlist -> ( direct_declarator_forlist ) .)
    :               reduce using rule 107 (direct_declarator_forlist -> ( direct_declarator_forlist ) .)


state 185

    (109) direct_declarator_forlist -> identifier [ constant_expression . ]

    ]               shift and go to state 325


state 186

    (110) direct_declarator_forlist -> identifier [ ] .

    [               reduce using rule 110 (direct_declarator_forlist -> identifier [ ] .)
    =               reduce using rule 110 (direct_declarator_forlist -> identifier [ ] .)
    ;               reduce using rule 110 (direct_declarator_forlist -> identifier [ ] .)
    ,               reduce using rule 110 (direct_declarator_forlist -> identifier [ ] .)
    )               reduce using rule 110 (direct_declarator_forlist -> identifier [ ] .)
    :               reduce using rule 110 (direct_declarator_forlist -> identifier [ ] .)


state 187

    (117) constant_expression -> conditional_expression .

    ]               reduce using rule 117 (constant_expression -> conditional_expression .)
    )               reduce using rule 117 (constant_expression -> conditional_expression .)
    ,               reduce using rule 117 (constant_expression -> conditional_expression .)
    ;               reduce using rule 117 (constant_expression -> conditional_expression .)
    }               reduce using rule 117 (constant_expression -> conditional_expression .)
    :               reduce using rule 117 (constant_expression -> conditional_expression .)


state 188

    (118) conditional_expression -> logical_or_expression .
    (119) conditional_expression -> logical_or_expression . ? expression : conditional_expression
    (121) logical_or_expression -> logical_or_expression . OR logical_and_expression

    ]               reduce using rule 118 (conditional_expression -> logical_or_expression .)
    )               reduce using rule 118 (conditional_expression -> logical_or_expression .)
    ,               reduce using rule 118 (conditional_expression -> logical_or_expression .)
    ;               reduce using rule 118 (conditional_expression -> logical_or_expression .)
    }               reduce using rule 118 (conditional_expression -> logical_or_expression .)
    :               reduce using rule 118 (conditional_expression -> logical_or_expression .)
    ?               shift and go to state 326
    OR              shift and go to state 327


state 189

    (120) logical_or_expression -> logical_and_expression .
    (123) logical_and_expression -> logical_and_expression . AND inclusive_or_expression

    ?               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    OR              reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    ]               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    )               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    ,               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    ;               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    }               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    :               reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    AND             shift and go to state 328


state 190

    (122) logical_and_expression -> inclusive_or_expression .
    (125) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND             reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    ?               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    OR              reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    )               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    }               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    :               reduce using rule 122 (logical_and_expression -> inclusive_or_expression .)
    |               shift and go to state 329


state 191

    (124) inclusive_or_expression -> exclusive_or_expression .
    (127) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    AND             reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    ?               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    OR              reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    ]               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    ;               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    }               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 124 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 330


state 192

    (126) exclusive_or_expression -> and_expression .
    (129) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    AND             reduce using rule 126 (exclusive_or_expression -> and_expression .)
    ?               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 126 (exclusive_or_expression -> and_expression .)
    ]               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    ;               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    }               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 126 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 331


state 193

    (128) and_expression -> equality_expression .
    (131) equality_expression -> equality_expression . EQUAL relational_expression
    (132) equality_expression -> equality_expression . NE relational_expression

    &               reduce using rule 128 (and_expression -> equality_expression .)
    ^               reduce using rule 128 (and_expression -> equality_expression .)
    |               reduce using rule 128 (and_expression -> equality_expression .)
    AND             reduce using rule 128 (and_expression -> equality_expression .)
    ?               reduce using rule 128 (and_expression -> equality_expression .)
    OR              reduce using rule 128 (and_expression -> equality_expression .)
    ]               reduce using rule 128 (and_expression -> equality_expression .)
    )               reduce using rule 128 (and_expression -> equality_expression .)
    ,               reduce using rule 128 (and_expression -> equality_expression .)
    ;               reduce using rule 128 (and_expression -> equality_expression .)
    }               reduce using rule 128 (and_expression -> equality_expression .)
    :               reduce using rule 128 (and_expression -> equality_expression .)
    EQUAL           shift and go to state 332
    NE              shift and go to state 333


state 194

    (130) equality_expression -> relational_expression .
    (134) relational_expression -> relational_expression . < shift_expression
    (135) relational_expression -> relational_expression . > shift_expression
    (136) relational_expression -> relational_expression . LE shift_expression
    (137) relational_expression -> relational_expression . GE shift_expression

    EQUAL           reduce using rule 130 (equality_expression -> relational_expression .)
    NE              reduce using rule 130 (equality_expression -> relational_expression .)
    &               reduce using rule 130 (equality_expression -> relational_expression .)
    ^               reduce using rule 130 (equality_expression -> relational_expression .)
    |               reduce using rule 130 (equality_expression -> relational_expression .)
    AND             reduce using rule 130 (equality_expression -> relational_expression .)
    ?               reduce using rule 130 (equality_expression -> relational_expression .)
    OR              reduce using rule 130 (equality_expression -> relational_expression .)
    ]               reduce using rule 130 (equality_expression -> relational_expression .)
    )               reduce using rule 130 (equality_expression -> relational_expression .)
    ,               reduce using rule 130 (equality_expression -> relational_expression .)
    ;               reduce using rule 130 (equality_expression -> relational_expression .)
    }               reduce using rule 130 (equality_expression -> relational_expression .)
    :               reduce using rule 130 (equality_expression -> relational_expression .)
    <               shift and go to state 334
    >               shift and go to state 335
    LE              shift and go to state 336
    GE              shift and go to state 337


state 195

    (133) relational_expression -> shift_expression .
    (139) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (140) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    <               reduce using rule 133 (relational_expression -> shift_expression .)
    >               reduce using rule 133 (relational_expression -> shift_expression .)
    LE              reduce using rule 133 (relational_expression -> shift_expression .)
    GE              reduce using rule 133 (relational_expression -> shift_expression .)
    EQUAL           reduce using rule 133 (relational_expression -> shift_expression .)
    NE              reduce using rule 133 (relational_expression -> shift_expression .)
    &               reduce using rule 133 (relational_expression -> shift_expression .)
    ^               reduce using rule 133 (relational_expression -> shift_expression .)
    |               reduce using rule 133 (relational_expression -> shift_expression .)
    AND             reduce using rule 133 (relational_expression -> shift_expression .)
    ?               reduce using rule 133 (relational_expression -> shift_expression .)
    OR              reduce using rule 133 (relational_expression -> shift_expression .)
    ]               reduce using rule 133 (relational_expression -> shift_expression .)
    )               reduce using rule 133 (relational_expression -> shift_expression .)
    ,               reduce using rule 133 (relational_expression -> shift_expression .)
    ;               reduce using rule 133 (relational_expression -> shift_expression .)
    }               reduce using rule 133 (relational_expression -> shift_expression .)
    :               reduce using rule 133 (relational_expression -> shift_expression .)
    SHIFT_LEFT      shift and go to state 338
    SHIFT_RIGHT     shift and go to state 339


state 196

    (138) shift_expression -> additive_expression .
    (142) additive_expression -> additive_expression . + multiplicative_expression
    (143) additive_expression -> additive_expression . - multiplicative_expression

    SHIFT_LEFT      reduce using rule 138 (shift_expression -> additive_expression .)
    SHIFT_RIGHT     reduce using rule 138 (shift_expression -> additive_expression .)
    <               reduce using rule 138 (shift_expression -> additive_expression .)
    >               reduce using rule 138 (shift_expression -> additive_expression .)
    LE              reduce using rule 138 (shift_expression -> additive_expression .)
    GE              reduce using rule 138 (shift_expression -> additive_expression .)
    EQUAL           reduce using rule 138 (shift_expression -> additive_expression .)
    NE              reduce using rule 138 (shift_expression -> additive_expression .)
    &               reduce using rule 138 (shift_expression -> additive_expression .)
    ^               reduce using rule 138 (shift_expression -> additive_expression .)
    |               reduce using rule 138 (shift_expression -> additive_expression .)
    AND             reduce using rule 138 (shift_expression -> additive_expression .)
    ?               reduce using rule 138 (shift_expression -> additive_expression .)
    OR              reduce using rule 138 (shift_expression -> additive_expression .)
    ]               reduce using rule 138 (shift_expression -> additive_expression .)
    )               reduce using rule 138 (shift_expression -> additive_expression .)
    ,               reduce using rule 138 (shift_expression -> additive_expression .)
    ;               reduce using rule 138 (shift_expression -> additive_expression .)
    }               reduce using rule 138 (shift_expression -> additive_expression .)
    :               reduce using rule 138 (shift_expression -> additive_expression .)
    +               shift and go to state 340
    -               shift and go to state 341


state 197

    (141) additive_expression -> multiplicative_expression .
    (145) multiplicative_expression -> multiplicative_expression . * cast_expression
    (146) multiplicative_expression -> multiplicative_expression . / cast_expression
    (147) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    SHIFT_LEFT      reduce using rule 141 (additive_expression -> multiplicative_expression .)
    SHIFT_RIGHT     reduce using rule 141 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 141 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 141 (additive_expression -> multiplicative_expression .)
    EQUAL           reduce using rule 141 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 141 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 141 (additive_expression -> multiplicative_expression .)
    ?               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 141 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    }               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 141 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 342
    /               shift and go to state 343
    %               shift and go to state 344


state 198

    (161) unary_operator -> + .

    (               reduce using rule 161 (unary_operator -> + .)
    SIZEOF          reduce using rule 161 (unary_operator -> + .)
    CONSTANCE       reduce using rule 161 (unary_operator -> + .)
    STRING_LITERAL  reduce using rule 161 (unary_operator -> + .)
    +               reduce using rule 161 (unary_operator -> + .)
    -               reduce using rule 161 (unary_operator -> + .)
    ~               reduce using rule 161 (unary_operator -> + .)
    !               reduce using rule 161 (unary_operator -> + .)


state 199

    (162) unary_operator -> - .

    (               reduce using rule 162 (unary_operator -> - .)
    SIZEOF          reduce using rule 162 (unary_operator -> - .)
    CONSTANCE       reduce using rule 162 (unary_operator -> - .)
    STRING_LITERAL  reduce using rule 162 (unary_operator -> - .)
    +               reduce using rule 162 (unary_operator -> - .)
    -               reduce using rule 162 (unary_operator -> - .)
    ~               reduce using rule 162 (unary_operator -> - .)
    !               reduce using rule 162 (unary_operator -> - .)


state 200

    (144) multiplicative_expression -> cast_expression .

    *               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    /               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    %               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    +               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    -               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    SHIFT_LEFT      reduce using rule 144 (multiplicative_expression -> cast_expression .)
    SHIFT_RIGHT     reduce using rule 144 (multiplicative_expression -> cast_expression .)
    <               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    >               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 144 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 144 (multiplicative_expression -> cast_expression .)
    EQUAL           reduce using rule 144 (multiplicative_expression -> cast_expression .)
    NE              reduce using rule 144 (multiplicative_expression -> cast_expression .)
    &               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    ^               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    |               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    AND             reduce using rule 144 (multiplicative_expression -> cast_expression .)
    ?               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    OR              reduce using rule 144 (multiplicative_expression -> cast_expression .)
    ]               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    )               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    ,               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    ;               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    }               reduce using rule 144 (multiplicative_expression -> cast_expression .)
    :               reduce using rule 144 (multiplicative_expression -> cast_expression .)


state 201

    (148) cast_expression -> unary_expression .

    *               reduce using rule 148 (cast_expression -> unary_expression .)
    /               reduce using rule 148 (cast_expression -> unary_expression .)
    %               reduce using rule 148 (cast_expression -> unary_expression .)
    +               reduce using rule 148 (cast_expression -> unary_expression .)
    -               reduce using rule 148 (cast_expression -> unary_expression .)
    SHIFT_LEFT      reduce using rule 148 (cast_expression -> unary_expression .)
    SHIFT_RIGHT     reduce using rule 148 (cast_expression -> unary_expression .)
    <               reduce using rule 148 (cast_expression -> unary_expression .)
    >               reduce using rule 148 (cast_expression -> unary_expression .)
    LE              reduce using rule 148 (cast_expression -> unary_expression .)
    GE              reduce using rule 148 (cast_expression -> unary_expression .)
    EQUAL           reduce using rule 148 (cast_expression -> unary_expression .)
    NE              reduce using rule 148 (cast_expression -> unary_expression .)
    &               reduce using rule 148 (cast_expression -> unary_expression .)
    ^               reduce using rule 148 (cast_expression -> unary_expression .)
    |               reduce using rule 148 (cast_expression -> unary_expression .)
    AND             reduce using rule 148 (cast_expression -> unary_expression .)
    ?               reduce using rule 148 (cast_expression -> unary_expression .)
    OR              reduce using rule 148 (cast_expression -> unary_expression .)
    ]               reduce using rule 148 (cast_expression -> unary_expression .)
    )               reduce using rule 148 (cast_expression -> unary_expression .)
    ,               reduce using rule 148 (cast_expression -> unary_expression .)
    ;               reduce using rule 148 (cast_expression -> unary_expression .)
    }               reduce using rule 148 (cast_expression -> unary_expression .)
    :               reduce using rule 148 (cast_expression -> unary_expression .)


state 202

    (149) cast_expression -> ( . type_name ) cast_expression
    (167) primary_expression -> ( . expression )
    (150) type_name -> . specifier_qualifier_list
    (151) type_name -> . specifier_qualifier_list brace_pointer
    (168) expression -> . constant_expression
    (169) expression -> . expression , constant_expression
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (117) constant_expression -> . conditional_expression
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    type_name                      shift and go to state 345
    cast_expression                shift and go to state 200
    expression                     shift and go to state 346
    specifier_qualifier_list       shift and go to state 249
    constant_expression            shift and go to state 347
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    conditional_expression         shift and go to state 187
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    logical_or_expression          shift and go to state 188
    struct_or_union                shift and go to state 29
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 203

    (157) unary_expression -> primary_expression .

    *               reduce using rule 157 (unary_expression -> primary_expression .)
    /               reduce using rule 157 (unary_expression -> primary_expression .)
    %               reduce using rule 157 (unary_expression -> primary_expression .)
    +               reduce using rule 157 (unary_expression -> primary_expression .)
    -               reduce using rule 157 (unary_expression -> primary_expression .)
    SHIFT_LEFT      reduce using rule 157 (unary_expression -> primary_expression .)
    SHIFT_RIGHT     reduce using rule 157 (unary_expression -> primary_expression .)
    <               reduce using rule 157 (unary_expression -> primary_expression .)
    >               reduce using rule 157 (unary_expression -> primary_expression .)
    LE              reduce using rule 157 (unary_expression -> primary_expression .)
    GE              reduce using rule 157 (unary_expression -> primary_expression .)
    EQUAL           reduce using rule 157 (unary_expression -> primary_expression .)
    NE              reduce using rule 157 (unary_expression -> primary_expression .)
    &               reduce using rule 157 (unary_expression -> primary_expression .)
    ^               reduce using rule 157 (unary_expression -> primary_expression .)
    |               reduce using rule 157 (unary_expression -> primary_expression .)
    AND             reduce using rule 157 (unary_expression -> primary_expression .)
    ?               reduce using rule 157 (unary_expression -> primary_expression .)
    OR              reduce using rule 157 (unary_expression -> primary_expression .)
    ]               reduce using rule 157 (unary_expression -> primary_expression .)
    )               reduce using rule 157 (unary_expression -> primary_expression .)
    ,               reduce using rule 157 (unary_expression -> primary_expression .)
    ;               reduce using rule 157 (unary_expression -> primary_expression .)
    }               reduce using rule 157 (unary_expression -> primary_expression .)
    :               reduce using rule 157 (unary_expression -> primary_expression .)


state 204

    (158) unary_expression -> unary_operator . cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    unary_operator                 shift and go to state 204
    cast_expression                shift and go to state 348
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203

state 205

    (159) unary_expression -> SIZEOF . unary_expression
    (160) unary_expression -> SIZEOF . ( type_name )
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 350
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    unary_expression               shift and go to state 349
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 206

    (165) primary_expression -> CONSTANCE .

    *               reduce using rule 165 (primary_expression -> CONSTANCE .)
    /               reduce using rule 165 (primary_expression -> CONSTANCE .)
    %               reduce using rule 165 (primary_expression -> CONSTANCE .)
    +               reduce using rule 165 (primary_expression -> CONSTANCE .)
    -               reduce using rule 165 (primary_expression -> CONSTANCE .)
    SHIFT_LEFT      reduce using rule 165 (primary_expression -> CONSTANCE .)
    SHIFT_RIGHT     reduce using rule 165 (primary_expression -> CONSTANCE .)
    <               reduce using rule 165 (primary_expression -> CONSTANCE .)
    >               reduce using rule 165 (primary_expression -> CONSTANCE .)
    LE              reduce using rule 165 (primary_expression -> CONSTANCE .)
    GE              reduce using rule 165 (primary_expression -> CONSTANCE .)
    EQUAL           reduce using rule 165 (primary_expression -> CONSTANCE .)
    NE              reduce using rule 165 (primary_expression -> CONSTANCE .)
    &               reduce using rule 165 (primary_expression -> CONSTANCE .)
    ^               reduce using rule 165 (primary_expression -> CONSTANCE .)
    |               reduce using rule 165 (primary_expression -> CONSTANCE .)
    AND             reduce using rule 165 (primary_expression -> CONSTANCE .)
    ?               reduce using rule 165 (primary_expression -> CONSTANCE .)
    OR              reduce using rule 165 (primary_expression -> CONSTANCE .)
    ]               reduce using rule 165 (primary_expression -> CONSTANCE .)
    )               reduce using rule 165 (primary_expression -> CONSTANCE .)
    ,               reduce using rule 165 (primary_expression -> CONSTANCE .)
    ;               reduce using rule 165 (primary_expression -> CONSTANCE .)
    }               reduce using rule 165 (primary_expression -> CONSTANCE .)
    :               reduce using rule 165 (primary_expression -> CONSTANCE .)


state 207

    (166) primary_expression -> STRING_LITERAL .

    *               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    /               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    %               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    +               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    -               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    SHIFT_LEFT      reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    SHIFT_RIGHT     reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    <               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    >               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    LE              reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    GE              reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    EQUAL           reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    NE              reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    &               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    ^               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    |               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    AND             reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    ?               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    OR              reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    ]               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    )               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    ,               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    ;               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    }               reduce using rule 166 (primary_expression -> STRING_LITERAL .)
    :               reduce using rule 166 (primary_expression -> STRING_LITERAL .)


state 208

    (163) unary_operator -> ~ .

    (               reduce using rule 163 (unary_operator -> ~ .)
    SIZEOF          reduce using rule 163 (unary_operator -> ~ .)
    CONSTANCE       reduce using rule 163 (unary_operator -> ~ .)
    STRING_LITERAL  reduce using rule 163 (unary_operator -> ~ .)
    +               reduce using rule 163 (unary_operator -> ~ .)
    -               reduce using rule 163 (unary_operator -> ~ .)
    ~               reduce using rule 163 (unary_operator -> ~ .)
    !               reduce using rule 163 (unary_operator -> ~ .)


state 209

    (164) unary_operator -> ! .

    (               reduce using rule 164 (unary_operator -> ! .)
    SIZEOF          reduce using rule 164 (unary_operator -> ! .)
    CONSTANCE       reduce using rule 164 (unary_operator -> ! .)
    STRING_LITERAL  reduce using rule 164 (unary_operator -> ! .)
    +               reduce using rule 164 (unary_operator -> ! .)
    -               reduce using rule 164 (unary_operator -> ! .)
    ~               reduce using rule 164 (unary_operator -> ! .)
    !               reduce using rule 164 (unary_operator -> ! .)


state 210

    (185) parameter_type_list_definition -> ( ) .

    {               reduce using rule 185 (parameter_type_list_definition -> ( ) .)
    =               reduce using rule 185 (parameter_type_list_definition -> ( ) .)
    ;               reduce using rule 185 (parameter_type_list_definition -> ( ) .)
    ,               reduce using rule 185 (parameter_type_list_definition -> ( ) .)
    )               reduce using rule 185 (parameter_type_list_definition -> ( ) .)
    :               reduce using rule 185 (parameter_type_list_definition -> ( ) .)
    [               reduce using rule 185 (parameter_type_list_definition -> ( ) .)


state 211

    (186) parameter_type_list_definition -> ( parameter_type_list_definition . )

    )               shift and go to state 351


state 212

    (187) parameter_type_list_definition -> ( parameter_list . )

    )               shift and go to state 352


state 213

    (111) parameter_list -> parameter_list_definition .

    )               reduce using rule 111 (parameter_list -> parameter_list_definition .)


state 214

    (112) parameter_list -> parameter_declaration .
    (113) parameter_list -> parameter_declaration . , parameter_list
    (188) parameter_list_definition -> parameter_declaration . = constant_expression , parameter_list_definition
    (189) parameter_list_definition -> parameter_declaration . = constant_expression

    )               reduce using rule 112 (parameter_list -> parameter_declaration .)
    ,               shift and go to state 353
    =               shift and go to state 354


state 215

    (190) parameter_list_definition -> ELLIPSIS .

    )               reduce using rule 190 (parameter_list_definition -> ELLIPSIS .)


state 216

    (114) parameter_declaration -> declaration_specifiers . declarator
    (115) parameter_declaration -> declaration_specifiers . abstract_declarator
    (116) parameter_declaration -> declaration_specifiers .
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (170) abstract_declarator -> . pointer
    (171) abstract_declarator -> . direct_abstract_declarator
    (172) abstract_declarator -> . pointer direct_abstract_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (173) direct_abstract_declarator -> . ( abstract_declarator )
    (174) direct_abstract_declarator -> . [ ]
    (175) direct_abstract_declarator -> . [ constant_expression ]
    (176) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (177) direct_abstract_declarator -> . parameter_type_list_definition
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (185) parameter_type_list_definition -> . ( )
    (186) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (187) parameter_type_list_definition -> . ( parameter_list )
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    ,               reduce using rule 116 (parameter_declaration -> declaration_specifiers .)
    =               reduce using rule 116 (parameter_declaration -> declaration_specifiers .)
    )               reduce using rule 116 (parameter_declaration -> declaration_specifiers .)
    *               shift and go to state 38
    (               shift and go to state 359
    [               shift and go to state 360
    ID              shift and go to state 42

    declarator                     shift and go to state 355
    abstract_declarator            shift and go to state 356
    pointer                        shift and go to state 357
    direct_declarator              shift and go to state 44
    direct_abstract_declarator     shift and go to state 358
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 174
    parameter_type_list_definition shift and go to state 361
    identifier                     shift and go to state 175

state 217

    (10) init_declarator -> declarator = initializer .

    ;               reduce using rule 10 (init_declarator -> declarator = initializer .)
    ,               reduce using rule 10 (init_declarator -> declarator = initializer .)


state 218

    (355) initializer -> assignment_expression .

    ;               reduce using rule 355 (initializer -> assignment_expression .)
    ,               reduce using rule 355 (initializer -> assignment_expression .)
    }               reduce using rule 355 (initializer -> assignment_expression .)


state 219

    (356) initializer -> { . initializer_list }
    (357) initializer -> { . initializer_list , }
    (351) initializer_list -> . initializer
    (352) initializer_list -> . designation initializer
    (353) initializer_list -> . initializer_list , initializer
    (354) initializer_list -> . initializer_list , designation initializer
    (355) initializer -> . assignment_expression
    (356) initializer -> . { initializer_list }
    (357) initializer -> . { initializer_list , }
    (358) designation -> . designator_list =
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (359) designator_list -> . designator
    (360) designator_list -> . designator_list designator
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (361) designator -> . [ constant_expression ]
    (362) designator -> . . ID
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 219
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    [               shift and go to state 367
    .               shift and go to state 368
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    initializer_list               shift and go to state 362
    initializer                    shift and go to state 363
    designation                    shift and go to state 364
    assignment_expression          shift and go to state 218
    designator_list                shift and go to state 365
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    designator                     shift and go to state 366
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 220

    (270) postfix_expression_v -> identifier . ( )
    (271) postfix_expression_v -> identifier . ( argument_expression_list )
    (276) postfix_expression_v_no_func -> identifier .

    (               shift and go to state 241
    INC             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    DEC             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    [               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    .               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    PTR             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    =               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_MUL          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_DIV          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_MOD          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_PLUS         reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_SUB          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_SL           reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_SR           reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_AND          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_XOR          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_OR           reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    *               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    /               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    %               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    +               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    -               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    SHIFT_LEFT      reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    SHIFT_RIGHT     reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    <               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    >               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    LE              reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    GE              reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    EQUAL           reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    NE              reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    &               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    ^               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    |               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AND             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    ?               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    OR              reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    ;               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    ,               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    )               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    }               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    :               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)


state 221

    (277) postfix_expression_v_no_func -> ( . postfix_expression_v_no_func )
    (183) identifier -> ( . identifier )
    (253) cast_expression_v -> ( . type_name ) cast_expression_v
    (283) primary_expression_v -> ( . expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (150) type_name -> . specifier_qualifier_list
    (151) type_name -> . specifier_qualifier_list brace_pointer
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    (               shift and go to state 221
    ID              shift and go to state 42
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    ENUM            shift and go to state 30
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    postfix_expression_v_no_func   shift and go to state 246
    identifier                     shift and go to state 245
    type_name                      shift and go to state 247
    cast_expression_v              shift and go to state 149
    expression_variable            shift and go to state 248
    specifier_qualifier_list       shift and go to state 249
    assignment_expression          shift and go to state 141
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    struct_or_union                shift and go to state 29
    logical_and_expression_v       shift and go to state 151
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 222

    (108) direct_declarator_forlist -> direct_declarator_forlist [ constant_expression . ]

    ]               shift and go to state 369


state 223

    (23) declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .

    ;               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    *               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    (               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    ID              reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    [               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    ,               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    =               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)
    )               reduce using rule 23 (declaration_specifiers_no_ts_s -> type_qualifier declaration_specifiers_no_ts_s .)


state 224

    (75) struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list . }
    (81) struct_declaration_list -> struct_declaration_list . struct_declaration
    (82) struct_declaration -> . specifier_qualifier_list struct_declarator_list ;
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    }               shift and go to state 370
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    struct_or_union                shift and go to state 29
    struct_declaration             shift and go to state 226
    specifier_qualifier_list       shift and go to state 109
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24

state 225

    (76) struct_or_union_specifier -> struct_or_union { struct_declaration_list } .

    TYPEDEF         reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    EXTERN          reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    STATIC          reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    AUTO            reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    REGISTER        reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    CONST           reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    VOLATILE        reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    RESTRICT        reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ;               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    *               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    (               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ID              reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    [               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    ,               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    =               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    )               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)
    :               reduce using rule 76 (struct_or_union_specifier -> struct_or_union { struct_declaration_list } .)


state 226

    (81) struct_declaration_list -> struct_declaration_list struct_declaration .

    }               reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    RESTRICT        reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 81 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 227

    (82) struct_declaration -> specifier_qualifier_list struct_declarator_list . ;
    (90) struct_declarator_list -> struct_declarator_list . , struct_declarator

    ;               shift and go to state 371
    ,               shift and go to state 372


state 228

    (89) struct_declarator_list -> struct_declarator .

    ;               reduce using rule 89 (struct_declarator_list -> struct_declarator .)
    ,               reduce using rule 89 (struct_declarator_list -> struct_declarator .)


state 229

    (91) struct_declarator -> declarator .
    (93) struct_declarator -> declarator . : constant_expression

    ;               reduce using rule 91 (struct_declarator -> declarator .)
    ,               reduce using rule 91 (struct_declarator -> declarator .)
    :               shift and go to state 373


state 230

    (92) struct_declarator -> : . constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    constant_expression            shift and go to state 374
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 231

    (83) specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts .

    :               reduce using rule 83 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts .)
    *               reduce using rule 83 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts .)
    (               reduce using rule 83 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts .)
    ID              reduce using rule 83 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts .)
    )               reduce using rule 83 (specifier_qualifier_list -> type_specifier specifier_qualifier_list_no_ts .)


state 232

    (87) specifier_qualifier_list_no_ts -> type_qualifier . specifier_qualifier_list_no_ts
    (88) specifier_qualifier_list_no_ts -> type_qualifier .
    (87) specifier_qualifier_list_no_ts -> . type_qualifier specifier_qualifier_list_no_ts
    (88) specifier_qualifier_list_no_ts -> . type_qualifier
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    :               reduce using rule 88 (specifier_qualifier_list_no_ts -> type_qualifier .)
    *               reduce using rule 88 (specifier_qualifier_list_no_ts -> type_qualifier .)
    (               reduce using rule 88 (specifier_qualifier_list_no_ts -> type_qualifier .)
    ID              reduce using rule 88 (specifier_qualifier_list_no_ts -> type_qualifier .)
    )               reduce using rule 88 (specifier_qualifier_list_no_ts -> type_qualifier .)
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    type_qualifier                 shift and go to state 232
    specifier_qualifier_list_no_ts shift and go to state 375

state 233

    (85) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    :               reduce using rule 85 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    *               reduce using rule 85 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    (               reduce using rule 85 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    ID              reduce using rule 85 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    )               reduce using rule 85 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 234

    (66) enum_specifier -> ENUM { enumerator_list } .

    TYPEDEF         reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    EXTERN          reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    STATIC          reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    AUTO            reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    REGISTER        reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    CONST           reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    VOLATILE        reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    RESTRICT        reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    ;               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    *               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    (               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    ID              reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    [               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    ,               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    =               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    )               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)
    :               reduce using rule 66 (enum_specifier -> ENUM { enumerator_list } .)


state 235

    (68) enum_specifier -> ENUM { enumerator_list , . }
    (72) enumerator_list -> enumerator_list , . enumerator
    (73) enumerator -> . identifier
    (74) enumerator -> . identifier = constant_expression
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    }               shift and go to state 376
    (               shift and go to state 69
    ID              shift and go to state 42

    enumerator                     shift and go to state 377
    identifier                     shift and go to state 115

state 236

    (74) enumerator -> identifier = . constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    constant_expression            shift and go to state 378
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 237

    (67) enum_specifier -> ENUM identifier { enumerator_list . }
    (69) enum_specifier -> ENUM identifier { enumerator_list . , }
    (72) enumerator_list -> enumerator_list . , enumerator

    }               shift and go to state 379
    ,               shift and go to state 380


state 238

    (192) compound_statement -> { block_item_list } .

    TYPEDEF         reduce using rule 192 (compound_statement -> { block_item_list } .)
    EXTERN          reduce using rule 192 (compound_statement -> { block_item_list } .)
    STATIC          reduce using rule 192 (compound_statement -> { block_item_list } .)
    AUTO            reduce using rule 192 (compound_statement -> { block_item_list } .)
    REGISTER        reduce using rule 192 (compound_statement -> { block_item_list } .)
    VOID            reduce using rule 192 (compound_statement -> { block_item_list } .)
    CHAR            reduce using rule 192 (compound_statement -> { block_item_list } .)
    SHORT           reduce using rule 192 (compound_statement -> { block_item_list } .)
    INT             reduce using rule 192 (compound_statement -> { block_item_list } .)
    LONG            reduce using rule 192 (compound_statement -> { block_item_list } .)
    FLOAT           reduce using rule 192 (compound_statement -> { block_item_list } .)
    DOUBLE          reduce using rule 192 (compound_statement -> { block_item_list } .)
    SIGNED          reduce using rule 192 (compound_statement -> { block_item_list } .)
    UNSIGNED        reduce using rule 192 (compound_statement -> { block_item_list } .)
    BOOL            reduce using rule 192 (compound_statement -> { block_item_list } .)
    CONST           reduce using rule 192 (compound_statement -> { block_item_list } .)
    VOLATILE        reduce using rule 192 (compound_statement -> { block_item_list } .)
    RESTRICT        reduce using rule 192 (compound_statement -> { block_item_list } .)
    ENUM            reduce using rule 192 (compound_statement -> { block_item_list } .)
    STRUCT          reduce using rule 192 (compound_statement -> { block_item_list } .)
    UNION           reduce using rule 192 (compound_statement -> { block_item_list } .)
    $end            reduce using rule 192 (compound_statement -> { block_item_list } .)
    }               reduce using rule 192 (compound_statement -> { block_item_list } .)
    {               reduce using rule 192 (compound_statement -> { block_item_list } .)
    ;               reduce using rule 192 (compound_statement -> { block_item_list } .)
    IF              reduce using rule 192 (compound_statement -> { block_item_list } .)
    SWITCH          reduce using rule 192 (compound_statement -> { block_item_list } .)
    WHILE           reduce using rule 192 (compound_statement -> { block_item_list } .)
    DO              reduce using rule 192 (compound_statement -> { block_item_list } .)
    FOR             reduce using rule 192 (compound_statement -> { block_item_list } .)
    GOTO            reduce using rule 192 (compound_statement -> { block_item_list } .)
    RETURN          reduce using rule 192 (compound_statement -> { block_item_list } .)
    (               reduce using rule 192 (compound_statement -> { block_item_list } .)
    ID              reduce using rule 192 (compound_statement -> { block_item_list } .)
    INC             reduce using rule 192 (compound_statement -> { block_item_list } .)
    DEC             reduce using rule 192 (compound_statement -> { block_item_list } .)
    SIZEOF          reduce using rule 192 (compound_statement -> { block_item_list } .)
    &               reduce using rule 192 (compound_statement -> { block_item_list } .)
    *               reduce using rule 192 (compound_statement -> { block_item_list } .)
    +               reduce using rule 192 (compound_statement -> { block_item_list } .)
    -               reduce using rule 192 (compound_statement -> { block_item_list } .)
    ~               reduce using rule 192 (compound_statement -> { block_item_list } .)
    !               reduce using rule 192 (compound_statement -> { block_item_list } .)
    CONSTANCE       reduce using rule 192 (compound_statement -> { block_item_list } .)
    STRING_LITERAL  reduce using rule 192 (compound_statement -> { block_item_list } .)
    ELSE            reduce using rule 192 (compound_statement -> { block_item_list } .)
    CASE            reduce using rule 192 (compound_statement -> { block_item_list } .)
    DEFAULT         reduce using rule 192 (compound_statement -> { block_item_list } .)
    CONTINUE        reduce using rule 192 (compound_statement -> { block_item_list } .)
    BREAK           reduce using rule 192 (compound_statement -> { block_item_list } .)


state 239

    (194) block_item_list -> block_item_list block_item .

    }               reduce using rule 194 (block_item_list -> block_item_list block_item .)
    {               reduce using rule 194 (block_item_list -> block_item_list block_item .)
    ;               reduce using rule 194 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 194 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 194 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 194 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 194 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 194 (block_item_list -> block_item_list block_item .)
    GOTO            reduce using rule 194 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 194 (block_item_list -> block_item_list block_item .)
    TYPEDEF         reduce using rule 194 (block_item_list -> block_item_list block_item .)
    EXTERN          reduce using rule 194 (block_item_list -> block_item_list block_item .)
    STATIC          reduce using rule 194 (block_item_list -> block_item_list block_item .)
    AUTO            reduce using rule 194 (block_item_list -> block_item_list block_item .)
    REGISTER        reduce using rule 194 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 194 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 194 (block_item_list -> block_item_list block_item .)
    SHORT           reduce using rule 194 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 194 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 194 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 194 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 194 (block_item_list -> block_item_list block_item .)
    SIGNED          reduce using rule 194 (block_item_list -> block_item_list block_item .)
    UNSIGNED        reduce using rule 194 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 194 (block_item_list -> block_item_list block_item .)
    CONST           reduce using rule 194 (block_item_list -> block_item_list block_item .)
    VOLATILE        reduce using rule 194 (block_item_list -> block_item_list block_item .)
    RESTRICT        reduce using rule 194 (block_item_list -> block_item_list block_item .)
    (               reduce using rule 194 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 194 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 194 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 194 (block_item_list -> block_item_list block_item .)
    UNION           reduce using rule 194 (block_item_list -> block_item_list block_item .)
    INC             reduce using rule 194 (block_item_list -> block_item_list block_item .)
    DEC             reduce using rule 194 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 194 (block_item_list -> block_item_list block_item .)
    &               reduce using rule 194 (block_item_list -> block_item_list block_item .)
    *               reduce using rule 194 (block_item_list -> block_item_list block_item .)
    +               reduce using rule 194 (block_item_list -> block_item_list block_item .)
    -               reduce using rule 194 (block_item_list -> block_item_list block_item .)
    ~               reduce using rule 194 (block_item_list -> block_item_list block_item .)
    !               reduce using rule 194 (block_item_list -> block_item_list block_item .)
    CONSTANCE       reduce using rule 194 (block_item_list -> block_item_list block_item .)
    STRING_LITERAL  reduce using rule 194 (block_item_list -> block_item_list block_item .)


state 240

    (203) labeled_statement -> identifier : .

    }               reduce using rule 203 (labeled_statement -> identifier : .)
    {               reduce using rule 203 (labeled_statement -> identifier : .)
    ;               reduce using rule 203 (labeled_statement -> identifier : .)
    IF              reduce using rule 203 (labeled_statement -> identifier : .)
    SWITCH          reduce using rule 203 (labeled_statement -> identifier : .)
    WHILE           reduce using rule 203 (labeled_statement -> identifier : .)
    DO              reduce using rule 203 (labeled_statement -> identifier : .)
    FOR             reduce using rule 203 (labeled_statement -> identifier : .)
    GOTO            reduce using rule 203 (labeled_statement -> identifier : .)
    RETURN          reduce using rule 203 (labeled_statement -> identifier : .)
    TYPEDEF         reduce using rule 203 (labeled_statement -> identifier : .)
    EXTERN          reduce using rule 203 (labeled_statement -> identifier : .)
    STATIC          reduce using rule 203 (labeled_statement -> identifier : .)
    AUTO            reduce using rule 203 (labeled_statement -> identifier : .)
    REGISTER        reduce using rule 203 (labeled_statement -> identifier : .)
    VOID            reduce using rule 203 (labeled_statement -> identifier : .)
    CHAR            reduce using rule 203 (labeled_statement -> identifier : .)
    SHORT           reduce using rule 203 (labeled_statement -> identifier : .)
    INT             reduce using rule 203 (labeled_statement -> identifier : .)
    LONG            reduce using rule 203 (labeled_statement -> identifier : .)
    FLOAT           reduce using rule 203 (labeled_statement -> identifier : .)
    DOUBLE          reduce using rule 203 (labeled_statement -> identifier : .)
    SIGNED          reduce using rule 203 (labeled_statement -> identifier : .)
    UNSIGNED        reduce using rule 203 (labeled_statement -> identifier : .)
    BOOL            reduce using rule 203 (labeled_statement -> identifier : .)
    CONST           reduce using rule 203 (labeled_statement -> identifier : .)
    VOLATILE        reduce using rule 203 (labeled_statement -> identifier : .)
    RESTRICT        reduce using rule 203 (labeled_statement -> identifier : .)
    (               reduce using rule 203 (labeled_statement -> identifier : .)
    ID              reduce using rule 203 (labeled_statement -> identifier : .)
    ENUM            reduce using rule 203 (labeled_statement -> identifier : .)
    STRUCT          reduce using rule 203 (labeled_statement -> identifier : .)
    UNION           reduce using rule 203 (labeled_statement -> identifier : .)
    INC             reduce using rule 203 (labeled_statement -> identifier : .)
    DEC             reduce using rule 203 (labeled_statement -> identifier : .)
    SIZEOF          reduce using rule 203 (labeled_statement -> identifier : .)
    &               reduce using rule 203 (labeled_statement -> identifier : .)
    *               reduce using rule 203 (labeled_statement -> identifier : .)
    +               reduce using rule 203 (labeled_statement -> identifier : .)
    -               reduce using rule 203 (labeled_statement -> identifier : .)
    ~               reduce using rule 203 (labeled_statement -> identifier : .)
    !               reduce using rule 203 (labeled_statement -> identifier : .)
    CONSTANCE       reduce using rule 203 (labeled_statement -> identifier : .)
    STRING_LITERAL  reduce using rule 203 (labeled_statement -> identifier : .)
    CONTINUE        reduce using rule 203 (labeled_statement -> identifier : .)
    BREAK           reduce using rule 203 (labeled_statement -> identifier : .)
    ELSE            reduce using rule 203 (labeled_statement -> identifier : .)
    CASE            reduce using rule 203 (labeled_statement -> identifier : .)
    DEFAULT         reduce using rule 203 (labeled_statement -> identifier : .)


state 241

    (270) postfix_expression_v -> identifier ( . )
    (271) postfix_expression_v -> identifier ( . argument_expression_list )
    (349) argument_expression_list -> . assignment_expression
    (350) argument_expression_list -> . argument_expression_list , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    )               shift and go to state 381
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    identifier                     shift and go to state 220
    argument_expression_list       shift and go to state 382
    assignment_expression          shift and go to state 383
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 242

    (205) expression_statement -> expression_variable ; .

    }               reduce using rule 205 (expression_statement -> expression_variable ; .)
    {               reduce using rule 205 (expression_statement -> expression_variable ; .)
    ;               reduce using rule 205 (expression_statement -> expression_variable ; .)
    IF              reduce using rule 205 (expression_statement -> expression_variable ; .)
    SWITCH          reduce using rule 205 (expression_statement -> expression_variable ; .)
    WHILE           reduce using rule 205 (expression_statement -> expression_variable ; .)
    DO              reduce using rule 205 (expression_statement -> expression_variable ; .)
    FOR             reduce using rule 205 (expression_statement -> expression_variable ; .)
    GOTO            reduce using rule 205 (expression_statement -> expression_variable ; .)
    RETURN          reduce using rule 205 (expression_statement -> expression_variable ; .)
    TYPEDEF         reduce using rule 205 (expression_statement -> expression_variable ; .)
    EXTERN          reduce using rule 205 (expression_statement -> expression_variable ; .)
    STATIC          reduce using rule 205 (expression_statement -> expression_variable ; .)
    AUTO            reduce using rule 205 (expression_statement -> expression_variable ; .)
    REGISTER        reduce using rule 205 (expression_statement -> expression_variable ; .)
    VOID            reduce using rule 205 (expression_statement -> expression_variable ; .)
    CHAR            reduce using rule 205 (expression_statement -> expression_variable ; .)
    SHORT           reduce using rule 205 (expression_statement -> expression_variable ; .)
    INT             reduce using rule 205 (expression_statement -> expression_variable ; .)
    LONG            reduce using rule 205 (expression_statement -> expression_variable ; .)
    FLOAT           reduce using rule 205 (expression_statement -> expression_variable ; .)
    DOUBLE          reduce using rule 205 (expression_statement -> expression_variable ; .)
    SIGNED          reduce using rule 205 (expression_statement -> expression_variable ; .)
    UNSIGNED        reduce using rule 205 (expression_statement -> expression_variable ; .)
    BOOL            reduce using rule 205 (expression_statement -> expression_variable ; .)
    CONST           reduce using rule 205 (expression_statement -> expression_variable ; .)
    VOLATILE        reduce using rule 205 (expression_statement -> expression_variable ; .)
    RESTRICT        reduce using rule 205 (expression_statement -> expression_variable ; .)
    (               reduce using rule 205 (expression_statement -> expression_variable ; .)
    ID              reduce using rule 205 (expression_statement -> expression_variable ; .)
    ENUM            reduce using rule 205 (expression_statement -> expression_variable ; .)
    STRUCT          reduce using rule 205 (expression_statement -> expression_variable ; .)
    UNION           reduce using rule 205 (expression_statement -> expression_variable ; .)
    INC             reduce using rule 205 (expression_statement -> expression_variable ; .)
    DEC             reduce using rule 205 (expression_statement -> expression_variable ; .)
    SIZEOF          reduce using rule 205 (expression_statement -> expression_variable ; .)
    &               reduce using rule 205 (expression_statement -> expression_variable ; .)
    *               reduce using rule 205 (expression_statement -> expression_variable ; .)
    +               reduce using rule 205 (expression_statement -> expression_variable ; .)
    -               reduce using rule 205 (expression_statement -> expression_variable ; .)
    ~               reduce using rule 205 (expression_statement -> expression_variable ; .)
    !               reduce using rule 205 (expression_statement -> expression_variable ; .)
    CONSTANCE       reduce using rule 205 (expression_statement -> expression_variable ; .)
    STRING_LITERAL  reduce using rule 205 (expression_statement -> expression_variable ; .)
    CONTINUE        reduce using rule 205 (expression_statement -> expression_variable ; .)
    BREAK           reduce using rule 205 (expression_statement -> expression_variable ; .)
    )               reduce using rule 205 (expression_statement -> expression_variable ; .)
    ELSE            reduce using rule 205 (expression_statement -> expression_variable ; .)
    CASE            reduce using rule 205 (expression_statement -> expression_variable ; .)
    DEFAULT         reduce using rule 205 (expression_statement -> expression_variable ; .)


state 243

    (207) expression_variable -> expression_variable , . assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    assignment_expression          shift and go to state 384
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 244

    (284) selection_statement -> IF ( . expression_variable ) statement ELSE statement
    (285) selection_statement -> IF ( . expression_variable ) statement
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 385
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 245

    (183) identifier -> ( identifier . )
    (276) postfix_expression_v_no_func -> identifier .
    (270) postfix_expression_v -> identifier . ( )
    (271) postfix_expression_v -> identifier . ( argument_expression_list )

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 182
    [               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    .               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    PTR             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    INC             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    DEC             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    =               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_MUL          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_DIV          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_MOD          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_PLUS         reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_SUB          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_SL           reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_SR           reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_AND          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_XOR          reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AO_OR           reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    *               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    /               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    %               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    +               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    -               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    SHIFT_LEFT      reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    SHIFT_RIGHT     reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    <               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    >               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    LE              reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    GE              reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    EQUAL           reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    NE              reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    &               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    ^               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    |               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    AND             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    ?               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    OR              reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    ,               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    (               shift and go to state 241

  ! )               [ reduce using rule 276 (postfix_expression_v_no_func -> identifier .) ]


state 246

    (277) postfix_expression_v_no_func -> ( postfix_expression_v_no_func . )
    (278) postfix_expression_v_no_func -> postfix_expression_v_no_func . [ expression ]
    (279) postfix_expression_v_no_func -> postfix_expression_v_no_func . . ID
    (280) postfix_expression_v_no_func -> postfix_expression_v_no_func . PTR ID
    (268) postfix_expression_v -> postfix_expression_v_no_func .
    (274) postfix_expression_v -> postfix_expression_v_no_func . INC
    (275) postfix_expression_v -> postfix_expression_v_no_func . DEC

  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for PTR resolved as shift
  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 386
    [               shift and go to state 300
    .               shift and go to state 301
    PTR             shift and go to state 302
    =               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_MUL          reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_DIV          reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_MOD          reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_PLUS         reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_SUB          reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_SL           reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_SR           reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_AND          reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_XOR          reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AO_OR           reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    *               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    /               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    %               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    +               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    -               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    SHIFT_LEFT      reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    SHIFT_RIGHT     reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    <               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    >               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    LE              reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    GE              reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    EQUAL           reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    NE              reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    &               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    ^               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    |               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    AND             reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    ?               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    OR              reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    ,               reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .)
    INC             shift and go to state 298
    DEC             shift and go to state 299

  ! [               [ reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .) ]
  ! .               [ reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .) ]
  ! PTR             [ reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .) ]
  ! )               [ reduce using rule 268 (postfix_expression_v -> postfix_expression_v_no_func .) ]


state 247

    (253) cast_expression_v -> ( type_name . ) cast_expression_v

    )               shift and go to state 387


state 248

    (283) primary_expression_v -> ( expression_variable . )
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 388
    ,               shift and go to state 243


state 249

    (150) type_name -> specifier_qualifier_list .
    (151) type_name -> specifier_qualifier_list . brace_pointer
    (152) brace_pointer -> . *
    (153) brace_pointer -> . * type_qualifier_list
    (154) brace_pointer -> . ( brace_pointer )
    (155) brace_pointer -> . * brace_pointer
    (156) brace_pointer -> . * type_qualifier_list brace_pointer

    )               reduce using rule 150 (type_name -> specifier_qualifier_list .)
    *               shift and go to state 390
    (               shift and go to state 391

    brace_pointer                  shift and go to state 389

state 250

    (286) selection_statement -> SWITCH ( . expression_variable ) statement_switch
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 392
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 251

    (317) iteration_statement -> WHILE ( . expression_variable ) statement_while
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 393
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 252

    (318) iteration_statement -> DO statement_while . WHILE ( expression_variable ) ;

    WHILE           shift and go to state 394


state 253

    (311) statement_while -> labeled_statement .

    WHILE           reduce using rule 311 (statement_while -> labeled_statement .)
    }               reduce using rule 311 (statement_while -> labeled_statement .)
    {               reduce using rule 311 (statement_while -> labeled_statement .)
    ;               reduce using rule 311 (statement_while -> labeled_statement .)
    IF              reduce using rule 311 (statement_while -> labeled_statement .)
    SWITCH          reduce using rule 311 (statement_while -> labeled_statement .)
    DO              reduce using rule 311 (statement_while -> labeled_statement .)
    FOR             reduce using rule 311 (statement_while -> labeled_statement .)
    GOTO            reduce using rule 311 (statement_while -> labeled_statement .)
    CONTINUE        reduce using rule 311 (statement_while -> labeled_statement .)
    BREAK           reduce using rule 311 (statement_while -> labeled_statement .)
    RETURN          reduce using rule 311 (statement_while -> labeled_statement .)
    TYPEDEF         reduce using rule 311 (statement_while -> labeled_statement .)
    EXTERN          reduce using rule 311 (statement_while -> labeled_statement .)
    STATIC          reduce using rule 311 (statement_while -> labeled_statement .)
    AUTO            reduce using rule 311 (statement_while -> labeled_statement .)
    REGISTER        reduce using rule 311 (statement_while -> labeled_statement .)
    VOID            reduce using rule 311 (statement_while -> labeled_statement .)
    CHAR            reduce using rule 311 (statement_while -> labeled_statement .)
    SHORT           reduce using rule 311 (statement_while -> labeled_statement .)
    INT             reduce using rule 311 (statement_while -> labeled_statement .)
    LONG            reduce using rule 311 (statement_while -> labeled_statement .)
    FLOAT           reduce using rule 311 (statement_while -> labeled_statement .)
    DOUBLE          reduce using rule 311 (statement_while -> labeled_statement .)
    SIGNED          reduce using rule 311 (statement_while -> labeled_statement .)
    UNSIGNED        reduce using rule 311 (statement_while -> labeled_statement .)
    BOOL            reduce using rule 311 (statement_while -> labeled_statement .)
    CONST           reduce using rule 311 (statement_while -> labeled_statement .)
    VOLATILE        reduce using rule 311 (statement_while -> labeled_statement .)
    RESTRICT        reduce using rule 311 (statement_while -> labeled_statement .)
    (               reduce using rule 311 (statement_while -> labeled_statement .)
    ID              reduce using rule 311 (statement_while -> labeled_statement .)
    ENUM            reduce using rule 311 (statement_while -> labeled_statement .)
    STRUCT          reduce using rule 311 (statement_while -> labeled_statement .)
    UNION           reduce using rule 311 (statement_while -> labeled_statement .)
    INC             reduce using rule 311 (statement_while -> labeled_statement .)
    DEC             reduce using rule 311 (statement_while -> labeled_statement .)
    SIZEOF          reduce using rule 311 (statement_while -> labeled_statement .)
    &               reduce using rule 311 (statement_while -> labeled_statement .)
    *               reduce using rule 311 (statement_while -> labeled_statement .)
    +               reduce using rule 311 (statement_while -> labeled_statement .)
    -               reduce using rule 311 (statement_while -> labeled_statement .)
    ~               reduce using rule 311 (statement_while -> labeled_statement .)
    !               reduce using rule 311 (statement_while -> labeled_statement .)
    CONSTANCE       reduce using rule 311 (statement_while -> labeled_statement .)
    STRING_LITERAL  reduce using rule 311 (statement_while -> labeled_statement .)
    ELSE            reduce using rule 311 (statement_while -> labeled_statement .)
    CASE            reduce using rule 311 (statement_while -> labeled_statement .)
    DEFAULT         reduce using rule 311 (statement_while -> labeled_statement .)


state 254

    (312) statement_while -> compound_statement_while .

    WHILE           reduce using rule 312 (statement_while -> compound_statement_while .)
    }               reduce using rule 312 (statement_while -> compound_statement_while .)
    {               reduce using rule 312 (statement_while -> compound_statement_while .)
    ;               reduce using rule 312 (statement_while -> compound_statement_while .)
    IF              reduce using rule 312 (statement_while -> compound_statement_while .)
    SWITCH          reduce using rule 312 (statement_while -> compound_statement_while .)
    DO              reduce using rule 312 (statement_while -> compound_statement_while .)
    FOR             reduce using rule 312 (statement_while -> compound_statement_while .)
    GOTO            reduce using rule 312 (statement_while -> compound_statement_while .)
    CONTINUE        reduce using rule 312 (statement_while -> compound_statement_while .)
    BREAK           reduce using rule 312 (statement_while -> compound_statement_while .)
    RETURN          reduce using rule 312 (statement_while -> compound_statement_while .)
    TYPEDEF         reduce using rule 312 (statement_while -> compound_statement_while .)
    EXTERN          reduce using rule 312 (statement_while -> compound_statement_while .)
    STATIC          reduce using rule 312 (statement_while -> compound_statement_while .)
    AUTO            reduce using rule 312 (statement_while -> compound_statement_while .)
    REGISTER        reduce using rule 312 (statement_while -> compound_statement_while .)
    VOID            reduce using rule 312 (statement_while -> compound_statement_while .)
    CHAR            reduce using rule 312 (statement_while -> compound_statement_while .)
    SHORT           reduce using rule 312 (statement_while -> compound_statement_while .)
    INT             reduce using rule 312 (statement_while -> compound_statement_while .)
    LONG            reduce using rule 312 (statement_while -> compound_statement_while .)
    FLOAT           reduce using rule 312 (statement_while -> compound_statement_while .)
    DOUBLE          reduce using rule 312 (statement_while -> compound_statement_while .)
    SIGNED          reduce using rule 312 (statement_while -> compound_statement_while .)
    UNSIGNED        reduce using rule 312 (statement_while -> compound_statement_while .)
    BOOL            reduce using rule 312 (statement_while -> compound_statement_while .)
    CONST           reduce using rule 312 (statement_while -> compound_statement_while .)
    VOLATILE        reduce using rule 312 (statement_while -> compound_statement_while .)
    RESTRICT        reduce using rule 312 (statement_while -> compound_statement_while .)
    (               reduce using rule 312 (statement_while -> compound_statement_while .)
    ID              reduce using rule 312 (statement_while -> compound_statement_while .)
    ENUM            reduce using rule 312 (statement_while -> compound_statement_while .)
    STRUCT          reduce using rule 312 (statement_while -> compound_statement_while .)
    UNION           reduce using rule 312 (statement_while -> compound_statement_while .)
    INC             reduce using rule 312 (statement_while -> compound_statement_while .)
    DEC             reduce using rule 312 (statement_while -> compound_statement_while .)
    SIZEOF          reduce using rule 312 (statement_while -> compound_statement_while .)
    &               reduce using rule 312 (statement_while -> compound_statement_while .)
    *               reduce using rule 312 (statement_while -> compound_statement_while .)
    +               reduce using rule 312 (statement_while -> compound_statement_while .)
    -               reduce using rule 312 (statement_while -> compound_statement_while .)
    ~               reduce using rule 312 (statement_while -> compound_statement_while .)
    !               reduce using rule 312 (statement_while -> compound_statement_while .)
    CONSTANCE       reduce using rule 312 (statement_while -> compound_statement_while .)
    STRING_LITERAL  reduce using rule 312 (statement_while -> compound_statement_while .)
    ELSE            reduce using rule 312 (statement_while -> compound_statement_while .)
    CASE            reduce using rule 312 (statement_while -> compound_statement_while .)
    DEFAULT         reduce using rule 312 (statement_while -> compound_statement_while .)


state 255

    (313) statement_while -> expression_statement .

    WHILE           reduce using rule 313 (statement_while -> expression_statement .)
    }               reduce using rule 313 (statement_while -> expression_statement .)
    {               reduce using rule 313 (statement_while -> expression_statement .)
    ;               reduce using rule 313 (statement_while -> expression_statement .)
    IF              reduce using rule 313 (statement_while -> expression_statement .)
    SWITCH          reduce using rule 313 (statement_while -> expression_statement .)
    DO              reduce using rule 313 (statement_while -> expression_statement .)
    FOR             reduce using rule 313 (statement_while -> expression_statement .)
    GOTO            reduce using rule 313 (statement_while -> expression_statement .)
    CONTINUE        reduce using rule 313 (statement_while -> expression_statement .)
    BREAK           reduce using rule 313 (statement_while -> expression_statement .)
    RETURN          reduce using rule 313 (statement_while -> expression_statement .)
    TYPEDEF         reduce using rule 313 (statement_while -> expression_statement .)
    EXTERN          reduce using rule 313 (statement_while -> expression_statement .)
    STATIC          reduce using rule 313 (statement_while -> expression_statement .)
    AUTO            reduce using rule 313 (statement_while -> expression_statement .)
    REGISTER        reduce using rule 313 (statement_while -> expression_statement .)
    VOID            reduce using rule 313 (statement_while -> expression_statement .)
    CHAR            reduce using rule 313 (statement_while -> expression_statement .)
    SHORT           reduce using rule 313 (statement_while -> expression_statement .)
    INT             reduce using rule 313 (statement_while -> expression_statement .)
    LONG            reduce using rule 313 (statement_while -> expression_statement .)
    FLOAT           reduce using rule 313 (statement_while -> expression_statement .)
    DOUBLE          reduce using rule 313 (statement_while -> expression_statement .)
    SIGNED          reduce using rule 313 (statement_while -> expression_statement .)
    UNSIGNED        reduce using rule 313 (statement_while -> expression_statement .)
    BOOL            reduce using rule 313 (statement_while -> expression_statement .)
    CONST           reduce using rule 313 (statement_while -> expression_statement .)
    VOLATILE        reduce using rule 313 (statement_while -> expression_statement .)
    RESTRICT        reduce using rule 313 (statement_while -> expression_statement .)
    (               reduce using rule 313 (statement_while -> expression_statement .)
    ID              reduce using rule 313 (statement_while -> expression_statement .)
    ENUM            reduce using rule 313 (statement_while -> expression_statement .)
    STRUCT          reduce using rule 313 (statement_while -> expression_statement .)
    UNION           reduce using rule 313 (statement_while -> expression_statement .)
    INC             reduce using rule 313 (statement_while -> expression_statement .)
    DEC             reduce using rule 313 (statement_while -> expression_statement .)
    SIZEOF          reduce using rule 313 (statement_while -> expression_statement .)
    &               reduce using rule 313 (statement_while -> expression_statement .)
    *               reduce using rule 313 (statement_while -> expression_statement .)
    +               reduce using rule 313 (statement_while -> expression_statement .)
    -               reduce using rule 313 (statement_while -> expression_statement .)
    ~               reduce using rule 313 (statement_while -> expression_statement .)
    !               reduce using rule 313 (statement_while -> expression_statement .)
    CONSTANCE       reduce using rule 313 (statement_while -> expression_statement .)
    STRING_LITERAL  reduce using rule 313 (statement_while -> expression_statement .)
    ELSE            reduce using rule 313 (statement_while -> expression_statement .)
    CASE            reduce using rule 313 (statement_while -> expression_statement .)
    DEFAULT         reduce using rule 313 (statement_while -> expression_statement .)


state 256

    (314) statement_while -> selection_statement_while .

    WHILE           reduce using rule 314 (statement_while -> selection_statement_while .)
    }               reduce using rule 314 (statement_while -> selection_statement_while .)
    {               reduce using rule 314 (statement_while -> selection_statement_while .)
    ;               reduce using rule 314 (statement_while -> selection_statement_while .)
    IF              reduce using rule 314 (statement_while -> selection_statement_while .)
    SWITCH          reduce using rule 314 (statement_while -> selection_statement_while .)
    DO              reduce using rule 314 (statement_while -> selection_statement_while .)
    FOR             reduce using rule 314 (statement_while -> selection_statement_while .)
    GOTO            reduce using rule 314 (statement_while -> selection_statement_while .)
    CONTINUE        reduce using rule 314 (statement_while -> selection_statement_while .)
    BREAK           reduce using rule 314 (statement_while -> selection_statement_while .)
    RETURN          reduce using rule 314 (statement_while -> selection_statement_while .)
    TYPEDEF         reduce using rule 314 (statement_while -> selection_statement_while .)
    EXTERN          reduce using rule 314 (statement_while -> selection_statement_while .)
    STATIC          reduce using rule 314 (statement_while -> selection_statement_while .)
    AUTO            reduce using rule 314 (statement_while -> selection_statement_while .)
    REGISTER        reduce using rule 314 (statement_while -> selection_statement_while .)
    VOID            reduce using rule 314 (statement_while -> selection_statement_while .)
    CHAR            reduce using rule 314 (statement_while -> selection_statement_while .)
    SHORT           reduce using rule 314 (statement_while -> selection_statement_while .)
    INT             reduce using rule 314 (statement_while -> selection_statement_while .)
    LONG            reduce using rule 314 (statement_while -> selection_statement_while .)
    FLOAT           reduce using rule 314 (statement_while -> selection_statement_while .)
    DOUBLE          reduce using rule 314 (statement_while -> selection_statement_while .)
    SIGNED          reduce using rule 314 (statement_while -> selection_statement_while .)
    UNSIGNED        reduce using rule 314 (statement_while -> selection_statement_while .)
    BOOL            reduce using rule 314 (statement_while -> selection_statement_while .)
    CONST           reduce using rule 314 (statement_while -> selection_statement_while .)
    VOLATILE        reduce using rule 314 (statement_while -> selection_statement_while .)
    RESTRICT        reduce using rule 314 (statement_while -> selection_statement_while .)
    (               reduce using rule 314 (statement_while -> selection_statement_while .)
    ID              reduce using rule 314 (statement_while -> selection_statement_while .)
    ENUM            reduce using rule 314 (statement_while -> selection_statement_while .)
    STRUCT          reduce using rule 314 (statement_while -> selection_statement_while .)
    UNION           reduce using rule 314 (statement_while -> selection_statement_while .)
    INC             reduce using rule 314 (statement_while -> selection_statement_while .)
    DEC             reduce using rule 314 (statement_while -> selection_statement_while .)
    SIZEOF          reduce using rule 314 (statement_while -> selection_statement_while .)
    &               reduce using rule 314 (statement_while -> selection_statement_while .)
    *               reduce using rule 314 (statement_while -> selection_statement_while .)
    +               reduce using rule 314 (statement_while -> selection_statement_while .)
    -               reduce using rule 314 (statement_while -> selection_statement_while .)
    ~               reduce using rule 314 (statement_while -> selection_statement_while .)
    !               reduce using rule 314 (statement_while -> selection_statement_while .)
    CONSTANCE       reduce using rule 314 (statement_while -> selection_statement_while .)
    STRING_LITERAL  reduce using rule 314 (statement_while -> selection_statement_while .)
    ELSE            reduce using rule 314 (statement_while -> selection_statement_while .)
    CASE            reduce using rule 314 (statement_while -> selection_statement_while .)
    DEFAULT         reduce using rule 314 (statement_while -> selection_statement_while .)


state 257

    (315) statement_while -> iteration_statement .

    WHILE           reduce using rule 315 (statement_while -> iteration_statement .)
    }               reduce using rule 315 (statement_while -> iteration_statement .)
    {               reduce using rule 315 (statement_while -> iteration_statement .)
    ;               reduce using rule 315 (statement_while -> iteration_statement .)
    IF              reduce using rule 315 (statement_while -> iteration_statement .)
    SWITCH          reduce using rule 315 (statement_while -> iteration_statement .)
    DO              reduce using rule 315 (statement_while -> iteration_statement .)
    FOR             reduce using rule 315 (statement_while -> iteration_statement .)
    GOTO            reduce using rule 315 (statement_while -> iteration_statement .)
    CONTINUE        reduce using rule 315 (statement_while -> iteration_statement .)
    BREAK           reduce using rule 315 (statement_while -> iteration_statement .)
    RETURN          reduce using rule 315 (statement_while -> iteration_statement .)
    TYPEDEF         reduce using rule 315 (statement_while -> iteration_statement .)
    EXTERN          reduce using rule 315 (statement_while -> iteration_statement .)
    STATIC          reduce using rule 315 (statement_while -> iteration_statement .)
    AUTO            reduce using rule 315 (statement_while -> iteration_statement .)
    REGISTER        reduce using rule 315 (statement_while -> iteration_statement .)
    VOID            reduce using rule 315 (statement_while -> iteration_statement .)
    CHAR            reduce using rule 315 (statement_while -> iteration_statement .)
    SHORT           reduce using rule 315 (statement_while -> iteration_statement .)
    INT             reduce using rule 315 (statement_while -> iteration_statement .)
    LONG            reduce using rule 315 (statement_while -> iteration_statement .)
    FLOAT           reduce using rule 315 (statement_while -> iteration_statement .)
    DOUBLE          reduce using rule 315 (statement_while -> iteration_statement .)
    SIGNED          reduce using rule 315 (statement_while -> iteration_statement .)
    UNSIGNED        reduce using rule 315 (statement_while -> iteration_statement .)
    BOOL            reduce using rule 315 (statement_while -> iteration_statement .)
    CONST           reduce using rule 315 (statement_while -> iteration_statement .)
    VOLATILE        reduce using rule 315 (statement_while -> iteration_statement .)
    RESTRICT        reduce using rule 315 (statement_while -> iteration_statement .)
    (               reduce using rule 315 (statement_while -> iteration_statement .)
    ID              reduce using rule 315 (statement_while -> iteration_statement .)
    ENUM            reduce using rule 315 (statement_while -> iteration_statement .)
    STRUCT          reduce using rule 315 (statement_while -> iteration_statement .)
    UNION           reduce using rule 315 (statement_while -> iteration_statement .)
    INC             reduce using rule 315 (statement_while -> iteration_statement .)
    DEC             reduce using rule 315 (statement_while -> iteration_statement .)
    SIZEOF          reduce using rule 315 (statement_while -> iteration_statement .)
    &               reduce using rule 315 (statement_while -> iteration_statement .)
    *               reduce using rule 315 (statement_while -> iteration_statement .)
    +               reduce using rule 315 (statement_while -> iteration_statement .)
    -               reduce using rule 315 (statement_while -> iteration_statement .)
    ~               reduce using rule 315 (statement_while -> iteration_statement .)
    !               reduce using rule 315 (statement_while -> iteration_statement .)
    CONSTANCE       reduce using rule 315 (statement_while -> iteration_statement .)
    STRING_LITERAL  reduce using rule 315 (statement_while -> iteration_statement .)
    ELSE            reduce using rule 315 (statement_while -> iteration_statement .)
    CASE            reduce using rule 315 (statement_while -> iteration_statement .)
    DEFAULT         reduce using rule 315 (statement_while -> iteration_statement .)


state 258

    (316) statement_while -> jump_statement_while .

    WHILE           reduce using rule 316 (statement_while -> jump_statement_while .)
    }               reduce using rule 316 (statement_while -> jump_statement_while .)
    {               reduce using rule 316 (statement_while -> jump_statement_while .)
    ;               reduce using rule 316 (statement_while -> jump_statement_while .)
    IF              reduce using rule 316 (statement_while -> jump_statement_while .)
    SWITCH          reduce using rule 316 (statement_while -> jump_statement_while .)
    DO              reduce using rule 316 (statement_while -> jump_statement_while .)
    FOR             reduce using rule 316 (statement_while -> jump_statement_while .)
    GOTO            reduce using rule 316 (statement_while -> jump_statement_while .)
    CONTINUE        reduce using rule 316 (statement_while -> jump_statement_while .)
    BREAK           reduce using rule 316 (statement_while -> jump_statement_while .)
    RETURN          reduce using rule 316 (statement_while -> jump_statement_while .)
    TYPEDEF         reduce using rule 316 (statement_while -> jump_statement_while .)
    EXTERN          reduce using rule 316 (statement_while -> jump_statement_while .)
    STATIC          reduce using rule 316 (statement_while -> jump_statement_while .)
    AUTO            reduce using rule 316 (statement_while -> jump_statement_while .)
    REGISTER        reduce using rule 316 (statement_while -> jump_statement_while .)
    VOID            reduce using rule 316 (statement_while -> jump_statement_while .)
    CHAR            reduce using rule 316 (statement_while -> jump_statement_while .)
    SHORT           reduce using rule 316 (statement_while -> jump_statement_while .)
    INT             reduce using rule 316 (statement_while -> jump_statement_while .)
    LONG            reduce using rule 316 (statement_while -> jump_statement_while .)
    FLOAT           reduce using rule 316 (statement_while -> jump_statement_while .)
    DOUBLE          reduce using rule 316 (statement_while -> jump_statement_while .)
    SIGNED          reduce using rule 316 (statement_while -> jump_statement_while .)
    UNSIGNED        reduce using rule 316 (statement_while -> jump_statement_while .)
    BOOL            reduce using rule 316 (statement_while -> jump_statement_while .)
    CONST           reduce using rule 316 (statement_while -> jump_statement_while .)
    VOLATILE        reduce using rule 316 (statement_while -> jump_statement_while .)
    RESTRICT        reduce using rule 316 (statement_while -> jump_statement_while .)
    (               reduce using rule 316 (statement_while -> jump_statement_while .)
    ID              reduce using rule 316 (statement_while -> jump_statement_while .)
    ENUM            reduce using rule 316 (statement_while -> jump_statement_while .)
    STRUCT          reduce using rule 316 (statement_while -> jump_statement_while .)
    UNION           reduce using rule 316 (statement_while -> jump_statement_while .)
    INC             reduce using rule 316 (statement_while -> jump_statement_while .)
    DEC             reduce using rule 316 (statement_while -> jump_statement_while .)
    SIZEOF          reduce using rule 316 (statement_while -> jump_statement_while .)
    &               reduce using rule 316 (statement_while -> jump_statement_while .)
    *               reduce using rule 316 (statement_while -> jump_statement_while .)
    +               reduce using rule 316 (statement_while -> jump_statement_while .)
    -               reduce using rule 316 (statement_while -> jump_statement_while .)
    ~               reduce using rule 316 (statement_while -> jump_statement_while .)
    !               reduce using rule 316 (statement_while -> jump_statement_while .)
    CONSTANCE       reduce using rule 316 (statement_while -> jump_statement_while .)
    STRING_LITERAL  reduce using rule 316 (statement_while -> jump_statement_while .)
    ELSE            reduce using rule 316 (statement_while -> jump_statement_while .)
    CASE            reduce using rule 316 (statement_while -> jump_statement_while .)
    DEFAULT         reduce using rule 316 (statement_while -> jump_statement_while .)


state 259

    (305) compound_statement_while -> { . }
    (306) compound_statement_while -> { . block_item_list_while }
    (307) block_item_list_while -> . block_item_while
    (308) block_item_list_while -> . block_item_list_while block_item_while
    (309) block_item_while -> . declaration
    (310) block_item_while -> . statement_while
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (311) statement_while -> . labeled_statement
    (312) statement_while -> . compound_statement_while
    (313) statement_while -> . expression_statement
    (314) statement_while -> . selection_statement_while
    (315) statement_while -> . iteration_statement
    (316) statement_while -> . jump_statement_while
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (203) labeled_statement -> . identifier :
    (305) compound_statement_while -> . { }
    (306) compound_statement_while -> . { block_item_list_while }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 395
    {               shift and go to state 259
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    (               shift and go to state 134
    ID              shift and go to state 42
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    block_item_list_while          shift and go to state 396
    block_item_while               shift and go to state 397
    declaration                    shift and go to state 398
    statement_while                shift and go to state 399
    declaration_specifiers         shift and go to state 123
    labeled_statement              shift and go to state 253
    compound_statement_while       shift and go to state 254
    expression_statement           shift and go to state 255
    selection_statement_while      shift and go to state 256
    iteration_statement            shift and go to state 257
    jump_statement_while           shift and go to state 258
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    assignment_expression          shift and go to state 141
    struct_or_union                shift and go to state 29
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 260

    (287) selection_statement_while -> IF . ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> IF . ( expression_variable ) statement_while

    (               shift and go to state 400


state 261

    (289) selection_statement_while -> SWITCH . ( expression_variable ) statement_while_switch

    (               shift and go to state 401


state 262

    (344) jump_statement_while -> GOTO . ID ;

    ID              shift and go to state 402


state 263

    (345) jump_statement_while -> CONTINUE . ;

    ;               shift and go to state 403


state 264

    (346) jump_statement_while -> BREAK . ;

    ;               shift and go to state 404


state 265

    (347) jump_statement_while -> RETURN . ;
    (348) jump_statement_while -> RETURN . expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ;               shift and go to state 405
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 406
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 266

    (319) iteration_statement -> FOR ( . expression_statement expression_statement ) statement_while
    (320) iteration_statement -> FOR ( . expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> FOR ( . declaration expression_statement ) statement_while
    (322) iteration_statement -> FOR ( . declaration expression_statement expression_variable ) statement_while
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ;               shift and go to state 124
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    ENUM            shift and go to state 30
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 407
    expression_variable            shift and go to state 132
    declaration                    shift and go to state 408
    declaration_specifiers         shift and go to state 123
    assignment_expression          shift and go to state 141
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    struct_or_union                shift and go to state 29
    identifier                     shift and go to state 220
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 267

    (341) jump_statement -> GOTO ID . ;

    ;               shift and go to state 409


state 268

    (342) jump_statement -> RETURN ; .

    }               reduce using rule 342 (jump_statement -> RETURN ; .)
    {               reduce using rule 342 (jump_statement -> RETURN ; .)
    ;               reduce using rule 342 (jump_statement -> RETURN ; .)
    IF              reduce using rule 342 (jump_statement -> RETURN ; .)
    SWITCH          reduce using rule 342 (jump_statement -> RETURN ; .)
    WHILE           reduce using rule 342 (jump_statement -> RETURN ; .)
    DO              reduce using rule 342 (jump_statement -> RETURN ; .)
    FOR             reduce using rule 342 (jump_statement -> RETURN ; .)
    GOTO            reduce using rule 342 (jump_statement -> RETURN ; .)
    RETURN          reduce using rule 342 (jump_statement -> RETURN ; .)
    TYPEDEF         reduce using rule 342 (jump_statement -> RETURN ; .)
    EXTERN          reduce using rule 342 (jump_statement -> RETURN ; .)
    STATIC          reduce using rule 342 (jump_statement -> RETURN ; .)
    AUTO            reduce using rule 342 (jump_statement -> RETURN ; .)
    REGISTER        reduce using rule 342 (jump_statement -> RETURN ; .)
    VOID            reduce using rule 342 (jump_statement -> RETURN ; .)
    CHAR            reduce using rule 342 (jump_statement -> RETURN ; .)
    SHORT           reduce using rule 342 (jump_statement -> RETURN ; .)
    INT             reduce using rule 342 (jump_statement -> RETURN ; .)
    LONG            reduce using rule 342 (jump_statement -> RETURN ; .)
    FLOAT           reduce using rule 342 (jump_statement -> RETURN ; .)
    DOUBLE          reduce using rule 342 (jump_statement -> RETURN ; .)
    SIGNED          reduce using rule 342 (jump_statement -> RETURN ; .)
    UNSIGNED        reduce using rule 342 (jump_statement -> RETURN ; .)
    BOOL            reduce using rule 342 (jump_statement -> RETURN ; .)
    CONST           reduce using rule 342 (jump_statement -> RETURN ; .)
    VOLATILE        reduce using rule 342 (jump_statement -> RETURN ; .)
    RESTRICT        reduce using rule 342 (jump_statement -> RETURN ; .)
    (               reduce using rule 342 (jump_statement -> RETURN ; .)
    ID              reduce using rule 342 (jump_statement -> RETURN ; .)
    ENUM            reduce using rule 342 (jump_statement -> RETURN ; .)
    STRUCT          reduce using rule 342 (jump_statement -> RETURN ; .)
    UNION           reduce using rule 342 (jump_statement -> RETURN ; .)
    INC             reduce using rule 342 (jump_statement -> RETURN ; .)
    DEC             reduce using rule 342 (jump_statement -> RETURN ; .)
    SIZEOF          reduce using rule 342 (jump_statement -> RETURN ; .)
    &               reduce using rule 342 (jump_statement -> RETURN ; .)
    *               reduce using rule 342 (jump_statement -> RETURN ; .)
    +               reduce using rule 342 (jump_statement -> RETURN ; .)
    -               reduce using rule 342 (jump_statement -> RETURN ; .)
    ~               reduce using rule 342 (jump_statement -> RETURN ; .)
    !               reduce using rule 342 (jump_statement -> RETURN ; .)
    CONSTANCE       reduce using rule 342 (jump_statement -> RETURN ; .)
    STRING_LITERAL  reduce using rule 342 (jump_statement -> RETURN ; .)
    ELSE            reduce using rule 342 (jump_statement -> RETURN ; .)
    CASE            reduce using rule 342 (jump_statement -> RETURN ; .)
    DEFAULT         reduce using rule 342 (jump_statement -> RETURN ; .)
    CONTINUE        reduce using rule 342 (jump_statement -> RETURN ; .)
    BREAK           reduce using rule 342 (jump_statement -> RETURN ; .)


state 269

    (343) jump_statement -> RETURN expression_variable . ;
    (207) expression_variable -> expression_variable . , assignment_expression

    ;               shift and go to state 410
    ,               shift and go to state 243


state 270

    (209) assignment_expression -> unary_expression_v assignment_operator . assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    unary_expression_v             shift and go to state 143
    assignment_expression          shift and go to state 411
    conditional_expression_v       shift and go to state 142
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 271

    (210) assignment_operator -> = .

    INC             reduce using rule 210 (assignment_operator -> = .)
    DEC             reduce using rule 210 (assignment_operator -> = .)
    SIZEOF          reduce using rule 210 (assignment_operator -> = .)
    &               reduce using rule 210 (assignment_operator -> = .)
    *               reduce using rule 210 (assignment_operator -> = .)
    +               reduce using rule 210 (assignment_operator -> = .)
    -               reduce using rule 210 (assignment_operator -> = .)
    ~               reduce using rule 210 (assignment_operator -> = .)
    !               reduce using rule 210 (assignment_operator -> = .)
    (               reduce using rule 210 (assignment_operator -> = .)
    ID              reduce using rule 210 (assignment_operator -> = .)
    CONSTANCE       reduce using rule 210 (assignment_operator -> = .)
    STRING_LITERAL  reduce using rule 210 (assignment_operator -> = .)


state 272

    (211) assignment_operator -> AO_MUL .

    INC             reduce using rule 211 (assignment_operator -> AO_MUL .)
    DEC             reduce using rule 211 (assignment_operator -> AO_MUL .)
    SIZEOF          reduce using rule 211 (assignment_operator -> AO_MUL .)
    &               reduce using rule 211 (assignment_operator -> AO_MUL .)
    *               reduce using rule 211 (assignment_operator -> AO_MUL .)
    +               reduce using rule 211 (assignment_operator -> AO_MUL .)
    -               reduce using rule 211 (assignment_operator -> AO_MUL .)
    ~               reduce using rule 211 (assignment_operator -> AO_MUL .)
    !               reduce using rule 211 (assignment_operator -> AO_MUL .)
    (               reduce using rule 211 (assignment_operator -> AO_MUL .)
    ID              reduce using rule 211 (assignment_operator -> AO_MUL .)
    CONSTANCE       reduce using rule 211 (assignment_operator -> AO_MUL .)
    STRING_LITERAL  reduce using rule 211 (assignment_operator -> AO_MUL .)


state 273

    (212) assignment_operator -> AO_DIV .

    INC             reduce using rule 212 (assignment_operator -> AO_DIV .)
    DEC             reduce using rule 212 (assignment_operator -> AO_DIV .)
    SIZEOF          reduce using rule 212 (assignment_operator -> AO_DIV .)
    &               reduce using rule 212 (assignment_operator -> AO_DIV .)
    *               reduce using rule 212 (assignment_operator -> AO_DIV .)
    +               reduce using rule 212 (assignment_operator -> AO_DIV .)
    -               reduce using rule 212 (assignment_operator -> AO_DIV .)
    ~               reduce using rule 212 (assignment_operator -> AO_DIV .)
    !               reduce using rule 212 (assignment_operator -> AO_DIV .)
    (               reduce using rule 212 (assignment_operator -> AO_DIV .)
    ID              reduce using rule 212 (assignment_operator -> AO_DIV .)
    CONSTANCE       reduce using rule 212 (assignment_operator -> AO_DIV .)
    STRING_LITERAL  reduce using rule 212 (assignment_operator -> AO_DIV .)


state 274

    (213) assignment_operator -> AO_MOD .

    INC             reduce using rule 213 (assignment_operator -> AO_MOD .)
    DEC             reduce using rule 213 (assignment_operator -> AO_MOD .)
    SIZEOF          reduce using rule 213 (assignment_operator -> AO_MOD .)
    &               reduce using rule 213 (assignment_operator -> AO_MOD .)
    *               reduce using rule 213 (assignment_operator -> AO_MOD .)
    +               reduce using rule 213 (assignment_operator -> AO_MOD .)
    -               reduce using rule 213 (assignment_operator -> AO_MOD .)
    ~               reduce using rule 213 (assignment_operator -> AO_MOD .)
    !               reduce using rule 213 (assignment_operator -> AO_MOD .)
    (               reduce using rule 213 (assignment_operator -> AO_MOD .)
    ID              reduce using rule 213 (assignment_operator -> AO_MOD .)
    CONSTANCE       reduce using rule 213 (assignment_operator -> AO_MOD .)
    STRING_LITERAL  reduce using rule 213 (assignment_operator -> AO_MOD .)


state 275

    (214) assignment_operator -> AO_PLUS .

    INC             reduce using rule 214 (assignment_operator -> AO_PLUS .)
    DEC             reduce using rule 214 (assignment_operator -> AO_PLUS .)
    SIZEOF          reduce using rule 214 (assignment_operator -> AO_PLUS .)
    &               reduce using rule 214 (assignment_operator -> AO_PLUS .)
    *               reduce using rule 214 (assignment_operator -> AO_PLUS .)
    +               reduce using rule 214 (assignment_operator -> AO_PLUS .)
    -               reduce using rule 214 (assignment_operator -> AO_PLUS .)
    ~               reduce using rule 214 (assignment_operator -> AO_PLUS .)
    !               reduce using rule 214 (assignment_operator -> AO_PLUS .)
    (               reduce using rule 214 (assignment_operator -> AO_PLUS .)
    ID              reduce using rule 214 (assignment_operator -> AO_PLUS .)
    CONSTANCE       reduce using rule 214 (assignment_operator -> AO_PLUS .)
    STRING_LITERAL  reduce using rule 214 (assignment_operator -> AO_PLUS .)


state 276

    (215) assignment_operator -> AO_SUB .

    INC             reduce using rule 215 (assignment_operator -> AO_SUB .)
    DEC             reduce using rule 215 (assignment_operator -> AO_SUB .)
    SIZEOF          reduce using rule 215 (assignment_operator -> AO_SUB .)
    &               reduce using rule 215 (assignment_operator -> AO_SUB .)
    *               reduce using rule 215 (assignment_operator -> AO_SUB .)
    +               reduce using rule 215 (assignment_operator -> AO_SUB .)
    -               reduce using rule 215 (assignment_operator -> AO_SUB .)
    ~               reduce using rule 215 (assignment_operator -> AO_SUB .)
    !               reduce using rule 215 (assignment_operator -> AO_SUB .)
    (               reduce using rule 215 (assignment_operator -> AO_SUB .)
    ID              reduce using rule 215 (assignment_operator -> AO_SUB .)
    CONSTANCE       reduce using rule 215 (assignment_operator -> AO_SUB .)
    STRING_LITERAL  reduce using rule 215 (assignment_operator -> AO_SUB .)


state 277

    (216) assignment_operator -> AO_SL .

    INC             reduce using rule 216 (assignment_operator -> AO_SL .)
    DEC             reduce using rule 216 (assignment_operator -> AO_SL .)
    SIZEOF          reduce using rule 216 (assignment_operator -> AO_SL .)
    &               reduce using rule 216 (assignment_operator -> AO_SL .)
    *               reduce using rule 216 (assignment_operator -> AO_SL .)
    +               reduce using rule 216 (assignment_operator -> AO_SL .)
    -               reduce using rule 216 (assignment_operator -> AO_SL .)
    ~               reduce using rule 216 (assignment_operator -> AO_SL .)
    !               reduce using rule 216 (assignment_operator -> AO_SL .)
    (               reduce using rule 216 (assignment_operator -> AO_SL .)
    ID              reduce using rule 216 (assignment_operator -> AO_SL .)
    CONSTANCE       reduce using rule 216 (assignment_operator -> AO_SL .)
    STRING_LITERAL  reduce using rule 216 (assignment_operator -> AO_SL .)


state 278

    (217) assignment_operator -> AO_SR .

    INC             reduce using rule 217 (assignment_operator -> AO_SR .)
    DEC             reduce using rule 217 (assignment_operator -> AO_SR .)
    SIZEOF          reduce using rule 217 (assignment_operator -> AO_SR .)
    &               reduce using rule 217 (assignment_operator -> AO_SR .)
    *               reduce using rule 217 (assignment_operator -> AO_SR .)
    +               reduce using rule 217 (assignment_operator -> AO_SR .)
    -               reduce using rule 217 (assignment_operator -> AO_SR .)
    ~               reduce using rule 217 (assignment_operator -> AO_SR .)
    !               reduce using rule 217 (assignment_operator -> AO_SR .)
    (               reduce using rule 217 (assignment_operator -> AO_SR .)
    ID              reduce using rule 217 (assignment_operator -> AO_SR .)
    CONSTANCE       reduce using rule 217 (assignment_operator -> AO_SR .)
    STRING_LITERAL  reduce using rule 217 (assignment_operator -> AO_SR .)


state 279

    (218) assignment_operator -> AO_AND .

    INC             reduce using rule 218 (assignment_operator -> AO_AND .)
    DEC             reduce using rule 218 (assignment_operator -> AO_AND .)
    SIZEOF          reduce using rule 218 (assignment_operator -> AO_AND .)
    &               reduce using rule 218 (assignment_operator -> AO_AND .)
    *               reduce using rule 218 (assignment_operator -> AO_AND .)
    +               reduce using rule 218 (assignment_operator -> AO_AND .)
    -               reduce using rule 218 (assignment_operator -> AO_AND .)
    ~               reduce using rule 218 (assignment_operator -> AO_AND .)
    !               reduce using rule 218 (assignment_operator -> AO_AND .)
    (               reduce using rule 218 (assignment_operator -> AO_AND .)
    ID              reduce using rule 218 (assignment_operator -> AO_AND .)
    CONSTANCE       reduce using rule 218 (assignment_operator -> AO_AND .)
    STRING_LITERAL  reduce using rule 218 (assignment_operator -> AO_AND .)


state 280

    (219) assignment_operator -> AO_XOR .

    INC             reduce using rule 219 (assignment_operator -> AO_XOR .)
    DEC             reduce using rule 219 (assignment_operator -> AO_XOR .)
    SIZEOF          reduce using rule 219 (assignment_operator -> AO_XOR .)
    &               reduce using rule 219 (assignment_operator -> AO_XOR .)
    *               reduce using rule 219 (assignment_operator -> AO_XOR .)
    +               reduce using rule 219 (assignment_operator -> AO_XOR .)
    -               reduce using rule 219 (assignment_operator -> AO_XOR .)
    ~               reduce using rule 219 (assignment_operator -> AO_XOR .)
    !               reduce using rule 219 (assignment_operator -> AO_XOR .)
    (               reduce using rule 219 (assignment_operator -> AO_XOR .)
    ID              reduce using rule 219 (assignment_operator -> AO_XOR .)
    CONSTANCE       reduce using rule 219 (assignment_operator -> AO_XOR .)
    STRING_LITERAL  reduce using rule 219 (assignment_operator -> AO_XOR .)


state 281

    (220) assignment_operator -> AO_OR .

    INC             reduce using rule 220 (assignment_operator -> AO_OR .)
    DEC             reduce using rule 220 (assignment_operator -> AO_OR .)
    SIZEOF          reduce using rule 220 (assignment_operator -> AO_OR .)
    &               reduce using rule 220 (assignment_operator -> AO_OR .)
    *               reduce using rule 220 (assignment_operator -> AO_OR .)
    +               reduce using rule 220 (assignment_operator -> AO_OR .)
    -               reduce using rule 220 (assignment_operator -> AO_OR .)
    ~               reduce using rule 220 (assignment_operator -> AO_OR .)
    !               reduce using rule 220 (assignment_operator -> AO_OR .)
    (               reduce using rule 220 (assignment_operator -> AO_OR .)
    ID              reduce using rule 220 (assignment_operator -> AO_OR .)
    CONSTANCE       reduce using rule 220 (assignment_operator -> AO_OR .)
    STRING_LITERAL  reduce using rule 220 (assignment_operator -> AO_OR .)


state 282

    (222) conditional_expression_v -> logical_or_expression_v ? . expression_variable : conditional_expression_v
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    logical_or_expression_v        shift and go to state 144
    expression_variable            shift and go to state 412
    conditional_expression_v       shift and go to state 142
    assignment_expression          shift and go to state 141
    unary_expression_v             shift and go to state 143
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 283

    (224) logical_or_expression_v -> logical_or_expression_v OR . logical_and_expression_v
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    logical_and_expression_v       shift and go to state 413
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 284

    (269) postfix_expression_v -> postfix_expression_v [ . expression ]
    (168) expression -> . constant_expression
    (169) expression -> . expression , constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    expression                     shift and go to state 414
    constant_expression            shift and go to state 347
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 285

    (272) postfix_expression_v -> postfix_expression_v . . ID

    ID              shift and go to state 415


state 286

    (273) postfix_expression_v -> postfix_expression_v PTR . ID

    ID              shift and go to state 416


state 287

    (258) unary_expression_v -> INC unary_expression_v .

    =               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    AO_MUL          reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    AO_DIV          reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    AO_MOD          reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    AO_PLUS         reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    AO_SUB          reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    AO_SL           reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    AO_SR           reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    AO_AND          reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    AO_XOR          reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    AO_OR           reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    *               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    /               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    %               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    +               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    -               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    SHIFT_LEFT      reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    SHIFT_RIGHT     reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    <               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    >               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    LE              reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    GE              reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    EQUAL           reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    NE              reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    &               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    ^               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    |               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    AND             reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    ?               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    OR              reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    ;               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    ,               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    )               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    }               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)
    :               reduce using rule 258 (unary_expression_v -> INC unary_expression_v .)


state 288

    (261) unary_expression_v -> SIZEOF . unary_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 288
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 289
    ID              shift and go to state 42

    unary_expression_v             shift and go to state 294
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 289

    (277) postfix_expression_v_no_func -> ( . postfix_expression_v_no_func )
    (183) identifier -> ( . identifier )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 289
    ID              shift and go to state 42

    postfix_expression_v_no_func   shift and go to state 417
    identifier                     shift and go to state 418

state 290

    (259) unary_expression_v -> DEC unary_expression_v .

    =               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    AO_MUL          reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    AO_DIV          reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    AO_MOD          reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    AO_PLUS         reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    AO_SUB          reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    AO_SL           reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    AO_SR           reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    AO_AND          reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    AO_XOR          reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    AO_OR           reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    *               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    /               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    %               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    +               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    -               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    SHIFT_LEFT      reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    SHIFT_RIGHT     reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    <               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    >               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    LE              reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    GE              reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    EQUAL           reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    NE              reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    &               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    ^               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    |               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    AND             reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    ?               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    OR              reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    ;               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    ,               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    )               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    }               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)
    :               reduce using rule 259 (unary_expression_v -> DEC unary_expression_v .)


state 291

    (260) unary_expression_v -> unary_operator_v cast_expression_v .

    =               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_MUL          reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_DIV          reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_MOD          reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_PLUS         reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_SUB          reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_SL           reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_SR           reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_AND          reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_XOR          reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AO_OR           reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    *               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    /               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    %               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    +               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    -               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    SHIFT_LEFT      reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    SHIFT_RIGHT     reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    <               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    >               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    LE              reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    GE              reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    EQUAL           reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    NE              reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    &               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    ^               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    |               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    AND             reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    ?               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    OR              reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    ;               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    ,               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    )               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    }               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)
    :               reduce using rule 260 (unary_expression_v -> unary_operator_v cast_expression_v .)


state 292

    (251) cast_expression_v -> unary_expression_v .

    =               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    AO_MUL          reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    AO_DIV          reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    AO_MOD          reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    AO_PLUS         reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    AO_SUB          reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    AO_SL           reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    AO_SR           reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    AO_AND          reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    AO_XOR          reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    AO_OR           reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    *               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    /               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    %               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    +               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    -               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    SHIFT_LEFT      reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    SHIFT_RIGHT     reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    <               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    >               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    LE              reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    GE              reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    EQUAL           reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    NE              reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    &               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    ^               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    |               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    AND             reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    ?               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    OR              reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    ;               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    ,               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    )               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    }               reduce using rule 251 (cast_expression_v -> unary_expression_v .)
    :               reduce using rule 251 (cast_expression_v -> unary_expression_v .)


state 293

    (253) cast_expression_v -> ( . type_name ) cast_expression_v
    (283) primary_expression_v -> ( . expression_variable )
    (277) postfix_expression_v_no_func -> ( . postfix_expression_v_no_func )
    (183) identifier -> ( . identifier )
    (150) type_name -> . specifier_qualifier_list
    (151) type_name -> . specifier_qualifier_list brace_pointer
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    (               shift and go to state 221
    ID              shift and go to state 42
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    ENUM            shift and go to state 30
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    type_name                      shift and go to state 247
    cast_expression_v              shift and go to state 149
    expression_variable            shift and go to state 248
    postfix_expression_v_no_func   shift and go to state 246
    identifier                     shift and go to state 245
    specifier_qualifier_list       shift and go to state 249
    assignment_expression          shift and go to state 141
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    struct_or_union                shift and go to state 29
    logical_and_expression_v       shift and go to state 151
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 294

    (261) unary_expression_v -> SIZEOF unary_expression_v .

    =               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_MUL          reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_DIV          reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_MOD          reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_PLUS         reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_SUB          reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_SL           reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_SR           reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_AND          reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_XOR          reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    AO_OR           reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    *               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    /               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    %               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    +               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    -               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    SHIFT_LEFT      reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    SHIFT_RIGHT     reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    <               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    >               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    LE              reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    GE              reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    EQUAL           reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    NE              reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    &               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    ^               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    |               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    AND             reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    ?               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    OR              reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    ;               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    ,               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    )               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    }               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)
    :               reduce using rule 261 (unary_expression_v -> SIZEOF unary_expression_v .)


state 295

    (255) unary_expression_v_constance -> SIZEOF unary_expression_v_constance .

    *               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    /               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    %               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    +               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    -               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    SHIFT_LEFT      reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    SHIFT_RIGHT     reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    <               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    >               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    LE              reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    GE              reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    EQUAL           reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    NE              reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    &               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    ^               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    |               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AND             reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    ?               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    OR              reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    ;               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    ,               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    )               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    =               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_MUL          reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_DIV          reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_MOD          reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_PLUS         reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_SUB          reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_SL           reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_SR           reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_AND          reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_XOR          reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    AO_OR           reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    }               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)
    :               reduce using rule 255 (unary_expression_v_constance -> SIZEOF unary_expression_v_constance .)


state 296

    (256) unary_expression_v_constance -> SIZEOF ( . type_name )
    (283) primary_expression_v -> ( . expression_variable )
    (277) postfix_expression_v_no_func -> ( . postfix_expression_v_no_func )
    (183) identifier -> ( . identifier )
    (150) type_name -> . specifier_qualifier_list
    (151) type_name -> . specifier_qualifier_list brace_pointer
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    (               shift and go to state 221
    ID              shift and go to state 42
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    ENUM            shift and go to state 30
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    type_name                      shift and go to state 419
    expression_variable            shift and go to state 248
    postfix_expression_v_no_func   shift and go to state 246
    identifier                     shift and go to state 245
    specifier_qualifier_list       shift and go to state 249
    assignment_expression          shift and go to state 141
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    struct_or_union                shift and go to state 29
    logical_and_expression_v       shift and go to state 151
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 297

    (226) logical_and_expression_v -> logical_and_expression_v AND . inclusive_or_expression_v
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    inclusive_or_expression_v      shift and go to state 420
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 298

    (274) postfix_expression_v -> postfix_expression_v_no_func INC .

    [               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    .               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    PTR             reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    =               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_MUL          reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_DIV          reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_MOD          reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_PLUS         reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_SUB          reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_SL           reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_SR           reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_AND          reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_XOR          reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AO_OR           reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    *               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    /               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    %               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    +               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    -               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    SHIFT_LEFT      reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    SHIFT_RIGHT     reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    <               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    >               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    LE              reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    GE              reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    EQUAL           reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    NE              reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    &               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    ^               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    |               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    AND             reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    ?               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    OR              reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    ;               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    ,               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    )               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    }               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)
    :               reduce using rule 274 (postfix_expression_v -> postfix_expression_v_no_func INC .)


state 299

    (275) postfix_expression_v -> postfix_expression_v_no_func DEC .

    [               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    .               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    PTR             reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    =               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_MUL          reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_DIV          reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_MOD          reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_PLUS         reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_SUB          reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_SL           reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_SR           reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_AND          reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_XOR          reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AO_OR           reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    *               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    /               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    %               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    +               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    -               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    SHIFT_LEFT      reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    SHIFT_RIGHT     reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    <               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    >               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    LE              reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    GE              reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    EQUAL           reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    NE              reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    &               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    ^               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    |               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    AND             reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    ?               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    OR              reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    ;               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    ,               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    )               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    }               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)
    :               reduce using rule 275 (postfix_expression_v -> postfix_expression_v_no_func DEC .)


state 300

    (278) postfix_expression_v_no_func -> postfix_expression_v_no_func [ . expression ]
    (168) expression -> . constant_expression
    (169) expression -> . expression , constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    expression                     shift and go to state 421
    constant_expression            shift and go to state 347
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 301

    (279) postfix_expression_v_no_func -> postfix_expression_v_no_func . . ID

    ID              shift and go to state 422


state 302

    (280) postfix_expression_v_no_func -> postfix_expression_v_no_func PTR . ID

    ID              shift and go to state 423


state 303

    (228) inclusive_or_expression_v -> inclusive_or_expression_v | . exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    exclusive_or_expression_v      shift and go to state 424
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 304

    (230) exclusive_or_expression_v -> exclusive_or_expression_v ^ . and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    and_expression_v               shift and go to state 425
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 305

    (232) and_expression_v -> and_expression_v & . equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    equality_expression_v          shift and go to state 426
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 306

    (234) equality_expression_v -> equality_expression_v EQUAL . relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    relational_expression_v        shift and go to state 427
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 307

    (235) equality_expression_v -> equality_expression_v NE . relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    relational_expression_v        shift and go to state 428
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 308

    (237) relational_expression_v -> relational_expression_v < . shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    shift_expression_v             shift and go to state 429
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 309

    (238) relational_expression_v -> relational_expression_v > . shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    shift_expression_v             shift and go to state 430
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 310

    (239) relational_expression_v -> relational_expression_v LE . shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    shift_expression_v             shift and go to state 431
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 311

    (240) relational_expression_v -> relational_expression_v GE . shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    shift_expression_v             shift and go to state 432
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 312

    (242) shift_expression_v -> shift_expression_v SHIFT_LEFT . additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    additive_expression_v          shift and go to state 433
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 313

    (243) shift_expression_v -> shift_expression_v SHIFT_RIGHT . additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    additive_expression_v          shift and go to state 434
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 314

    (245) additive_expression_v -> additive_expression_v + . multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    multiplicative_expression_v    shift and go to state 435
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 315

    (246) additive_expression_v -> additive_expression_v - . multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    multiplicative_expression_v    shift and go to state 436
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 316

    (248) multiplicative_expression_v -> multiplicative_expression_v * . cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    cast_expression_v              shift and go to state 437
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 317

    (249) multiplicative_expression_v -> multiplicative_expression_v / . cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    cast_expression_v              shift and go to state 438
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 318

    (250) multiplicative_expression_v -> multiplicative_expression_v % . cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    cast_expression_v              shift and go to state 439
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 319

    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (180) direct_function_declarator -> ( . pointer direct_function_declarator )
    (181) direct_function_declarator -> ( . direct_function_declarator )
    (183) identifier -> ( . identifier )
    (103) direct_declarator -> ( . declarator )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    *               shift and go to state 38
    (               shift and go to state 319
    ID              shift and go to state 42

    pointer                        shift and go to state 320
    direct_declarator_forlist      shift and go to state 87
    direct_function_declarator     shift and go to state 84
    identifier                     shift and go to state 321
    declarator                     shift and go to state 86
    direct_declarator              shift and go to state 44

state 320

    (106) direct_declarator_forlist -> ( pointer . direct_declarator_forlist )
    (180) direct_function_declarator -> ( pointer . direct_function_declarator )
    (94) declarator -> pointer . direct_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 440
    ID              shift and go to state 42

    direct_declarator_forlist      shift and go to state 180
    direct_function_declarator     shift and go to state 179
    direct_declarator              shift and go to state 73
    identifier                     shift and go to state 175

state 321

    (183) identifier -> ( identifier . )
    (105) direct_declarator_forlist -> identifier .
    (109) direct_declarator_forlist -> identifier . [ constant_expression ]
    (110) direct_declarator_forlist -> identifier . [ ]
    (182) direct_function_declarator -> identifier . parameter_type_list_definition
    (185) parameter_type_list_definition -> . ( )
    (186) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (187) parameter_type_list_definition -> . ( parameter_list )

  ! shift/reduce conflict for ) resolved as shift
  ! shift/reduce conflict for [ resolved as shift
    )               shift and go to state 182
    [               shift and go to state 89
    (               shift and go to state 90

  ! )               [ reduce using rule 105 (direct_declarator_forlist -> identifier .) ]
  ! [               [ reduce using rule 105 (direct_declarator_forlist -> identifier .) ]

    parameter_type_list_definition shift and go to state 88

state 322

    (180) direct_function_declarator -> ( . pointer direct_function_declarator )
    (181) direct_function_declarator -> ( . direct_function_declarator )
    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (183) identifier -> ( . identifier )
    (103) direct_declarator -> ( . declarator )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    *               shift and go to state 38
    (               shift and go to state 322
    ID              shift and go to state 42

    pointer                        shift and go to state 83
    direct_function_declarator     shift and go to state 84
    direct_declarator_forlist      shift and go to state 87
    identifier                     shift and go to state 85
    declarator                     shift and go to state 86
    direct_declarator              shift and go to state 44

state 323

    (180) direct_function_declarator -> ( pointer direct_function_declarator ) .

    {               reduce using rule 180 (direct_function_declarator -> ( pointer direct_function_declarator ) .)
    =               reduce using rule 180 (direct_function_declarator -> ( pointer direct_function_declarator ) .)
    ;               reduce using rule 180 (direct_function_declarator -> ( pointer direct_function_declarator ) .)
    ,               reduce using rule 180 (direct_function_declarator -> ( pointer direct_function_declarator ) .)
    )               reduce using rule 180 (direct_function_declarator -> ( pointer direct_function_declarator ) .)
    :               reduce using rule 180 (direct_function_declarator -> ( pointer direct_function_declarator ) .)


state 324

    (106) direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .

    [               reduce using rule 106 (direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .)
    =               reduce using rule 106 (direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .)
    ;               reduce using rule 106 (direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .)
    ,               reduce using rule 106 (direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .)
    )               reduce using rule 106 (direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .)
    :               reduce using rule 106 (direct_declarator_forlist -> ( pointer direct_declarator_forlist ) .)


state 325

    (109) direct_declarator_forlist -> identifier [ constant_expression ] .

    [               reduce using rule 109 (direct_declarator_forlist -> identifier [ constant_expression ] .)
    =               reduce using rule 109 (direct_declarator_forlist -> identifier [ constant_expression ] .)
    ;               reduce using rule 109 (direct_declarator_forlist -> identifier [ constant_expression ] .)
    ,               reduce using rule 109 (direct_declarator_forlist -> identifier [ constant_expression ] .)
    )               reduce using rule 109 (direct_declarator_forlist -> identifier [ constant_expression ] .)
    :               reduce using rule 109 (direct_declarator_forlist -> identifier [ constant_expression ] .)


state 326

    (119) conditional_expression -> logical_or_expression ? . expression : conditional_expression
    (168) expression -> . constant_expression
    (169) expression -> . expression , constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    logical_or_expression          shift and go to state 188
    expression                     shift and go to state 441
    conditional_expression         shift and go to state 187
    constant_expression            shift and go to state 347
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 327

    (121) logical_or_expression -> logical_or_expression OR . logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    logical_and_expression         shift and go to state 442
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 328

    (123) logical_and_expression -> logical_and_expression AND . inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    inclusive_or_expression        shift and go to state 443
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 329

    (125) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    exclusive_or_expression        shift and go to state 444
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 330

    (127) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    and_expression                 shift and go to state 445
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 331

    (129) and_expression -> and_expression & . equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    equality_expression            shift and go to state 446
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 332

    (131) equality_expression -> equality_expression EQUAL . relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    relational_expression          shift and go to state 447
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 333

    (132) equality_expression -> equality_expression NE . relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    relational_expression          shift and go to state 448
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 334

    (134) relational_expression -> relational_expression < . shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    shift_expression               shift and go to state 449
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 335

    (135) relational_expression -> relational_expression > . shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    shift_expression               shift and go to state 450
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 336

    (136) relational_expression -> relational_expression LE . shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    shift_expression               shift and go to state 451
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 337

    (137) relational_expression -> relational_expression GE . shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    shift_expression               shift and go to state 452
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 338

    (139) shift_expression -> shift_expression SHIFT_LEFT . additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    additive_expression            shift and go to state 453
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 339

    (140) shift_expression -> shift_expression SHIFT_RIGHT . additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    additive_expression            shift and go to state 454
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 340

    (142) additive_expression -> additive_expression + . multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    multiplicative_expression      shift and go to state 455
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 341

    (143) additive_expression -> additive_expression - . multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    multiplicative_expression      shift and go to state 456
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 342

    (145) multiplicative_expression -> multiplicative_expression * . cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    cast_expression                shift and go to state 457
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 343

    (146) multiplicative_expression -> multiplicative_expression / . cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    cast_expression                shift and go to state 458
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 344

    (147) multiplicative_expression -> multiplicative_expression % . cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    cast_expression                shift and go to state 459
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 345

    (149) cast_expression -> ( type_name . ) cast_expression

    )               shift and go to state 460


state 346

    (167) primary_expression -> ( expression . )
    (169) expression -> expression . , constant_expression

    )               shift and go to state 461
    ,               shift and go to state 462


state 347

    (168) expression -> constant_expression .

    )               reduce using rule 168 (expression -> constant_expression .)
    ,               reduce using rule 168 (expression -> constant_expression .)
    ]               reduce using rule 168 (expression -> constant_expression .)
    :               reduce using rule 168 (expression -> constant_expression .)


state 348

    (158) unary_expression -> unary_operator cast_expression .

    *               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    /               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    %               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    +               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    -               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    SHIFT_LEFT      reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    SHIFT_RIGHT     reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    <               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    >               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    EQUAL           reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    &               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    ^               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    |               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    ?               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    ]               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    )               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    ,               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    ;               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    }               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)
    :               reduce using rule 158 (unary_expression -> unary_operator cast_expression .)


state 349

    (159) unary_expression -> SIZEOF unary_expression .

    *               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    /               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    %               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    +               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    -               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    SHIFT_LEFT      reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    SHIFT_RIGHT     reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    <               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    >               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    LE              reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    GE              reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    EQUAL           reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    NE              reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    &               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    ^               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    |               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    AND             reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    ?               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    OR              reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    ]               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    )               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    ,               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    ;               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    }               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)
    :               reduce using rule 159 (unary_expression -> SIZEOF unary_expression .)


state 350

    (160) unary_expression -> SIZEOF ( . type_name )
    (167) primary_expression -> ( . expression )
    (150) type_name -> . specifier_qualifier_list
    (151) type_name -> . specifier_qualifier_list brace_pointer
    (168) expression -> . constant_expression
    (169) expression -> . expression , constant_expression
    (83) specifier_qualifier_list -> . type_specifier specifier_qualifier_list_no_ts
    (84) specifier_qualifier_list -> . type_specifier
    (85) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (86) specifier_qualifier_list -> . type_qualifier
    (117) constant_expression -> . conditional_expression
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    type_name                      shift and go to state 463
    expression                     shift and go to state 346
    specifier_qualifier_list       shift and go to state 249
    constant_expression            shift and go to state 347
    type_specifier                 shift and go to state 110
    type_qualifier                 shift and go to state 111
    conditional_expression         shift and go to state 187
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    logical_or_expression          shift and go to state 188
    struct_or_union                shift and go to state 29
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 351

    (186) parameter_type_list_definition -> ( parameter_type_list_definition ) .

    {               reduce using rule 186 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)
    =               reduce using rule 186 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)
    ;               reduce using rule 186 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)
    ,               reduce using rule 186 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)
    )               reduce using rule 186 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)
    :               reduce using rule 186 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)
    [               reduce using rule 186 (parameter_type_list_definition -> ( parameter_type_list_definition ) .)


state 352

    (187) parameter_type_list_definition -> ( parameter_list ) .

    {               reduce using rule 187 (parameter_type_list_definition -> ( parameter_list ) .)
    =               reduce using rule 187 (parameter_type_list_definition -> ( parameter_list ) .)
    ;               reduce using rule 187 (parameter_type_list_definition -> ( parameter_list ) .)
    ,               reduce using rule 187 (parameter_type_list_definition -> ( parameter_list ) .)
    )               reduce using rule 187 (parameter_type_list_definition -> ( parameter_list ) .)
    :               reduce using rule 187 (parameter_type_list_definition -> ( parameter_list ) .)
    [               reduce using rule 187 (parameter_type_list_definition -> ( parameter_list ) .)


state 353

    (113) parameter_list -> parameter_declaration , . parameter_list
    (111) parameter_list -> . parameter_list_definition
    (112) parameter_list -> . parameter_declaration
    (113) parameter_list -> . parameter_declaration , parameter_list
    (188) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (189) parameter_list_definition -> . parameter_declaration = constant_expression
    (190) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 215
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    parameter_declaration          shift and go to state 214
    parameter_list                 shift and go to state 464
    parameter_list_definition      shift and go to state 213
    declaration_specifiers         shift and go to state 216
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 354

    (188) parameter_list_definition -> parameter_declaration = . constant_expression , parameter_list_definition
    (189) parameter_list_definition -> parameter_declaration = . constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    constant_expression            shift and go to state 465
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 355

    (114) parameter_declaration -> declaration_specifiers declarator .

    ,               reduce using rule 114 (parameter_declaration -> declaration_specifiers declarator .)
    =               reduce using rule 114 (parameter_declaration -> declaration_specifiers declarator .)
    )               reduce using rule 114 (parameter_declaration -> declaration_specifiers declarator .)


state 356

    (115) parameter_declaration -> declaration_specifiers abstract_declarator .

    ,               reduce using rule 115 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    =               reduce using rule 115 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    )               reduce using rule 115 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 357

    (94) declarator -> pointer . direct_declarator
    (170) abstract_declarator -> pointer .
    (172) abstract_declarator -> pointer . direct_abstract_declarator
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (173) direct_abstract_declarator -> . ( abstract_declarator )
    (174) direct_abstract_declarator -> . [ ]
    (175) direct_abstract_declarator -> . [ constant_expression ]
    (176) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (177) direct_abstract_declarator -> . parameter_type_list_definition
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (185) parameter_type_list_definition -> . ( )
    (186) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (187) parameter_type_list_definition -> . ( parameter_list )
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    ,               reduce using rule 170 (abstract_declarator -> pointer .)
    =               reduce using rule 170 (abstract_declarator -> pointer .)
    )               reduce using rule 170 (abstract_declarator -> pointer .)
    (               shift and go to state 359
    [               shift and go to state 360
    ID              shift and go to state 42

    direct_declarator              shift and go to state 73
    direct_abstract_declarator     shift and go to state 466
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 174
    parameter_type_list_definition shift and go to state 361
    identifier                     shift and go to state 175

state 358

    (171) abstract_declarator -> direct_abstract_declarator .
    (176) direct_abstract_declarator -> direct_abstract_declarator . [ constant_expression ]

    ,               reduce using rule 171 (abstract_declarator -> direct_abstract_declarator .)
    =               reduce using rule 171 (abstract_declarator -> direct_abstract_declarator .)
    )               reduce using rule 171 (abstract_declarator -> direct_abstract_declarator .)
    [               shift and go to state 467


state 359

    (103) direct_declarator -> ( . declarator )
    (173) direct_abstract_declarator -> ( . abstract_declarator )
    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (180) direct_function_declarator -> ( . pointer direct_function_declarator )
    (181) direct_function_declarator -> ( . direct_function_declarator )
    (185) parameter_type_list_definition -> ( . )
    (186) parameter_type_list_definition -> ( . parameter_type_list_definition )
    (187) parameter_type_list_definition -> ( . parameter_list )
    (183) identifier -> ( . identifier )
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (170) abstract_declarator -> . pointer
    (171) abstract_declarator -> . direct_abstract_declarator
    (172) abstract_declarator -> . pointer direct_abstract_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (185) parameter_type_list_definition -> . ( )
    (186) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (187) parameter_type_list_definition -> . ( parameter_list )
    (111) parameter_list -> . parameter_list_definition
    (112) parameter_list -> . parameter_declaration
    (113) parameter_list -> . parameter_declaration , parameter_list
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (173) direct_abstract_declarator -> . ( abstract_declarator )
    (174) direct_abstract_declarator -> . [ ]
    (175) direct_abstract_declarator -> . [ constant_expression ]
    (176) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (177) direct_abstract_declarator -> . parameter_type_list_definition
    (188) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (189) parameter_list_definition -> . parameter_declaration = constant_expression
    (190) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    )               shift and go to state 210
    *               shift and go to state 38
    (               shift and go to state 468
    ID              shift and go to state 42
    [               shift and go to state 360
    ELLIPSIS        shift and go to state 215
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    declarator                     shift and go to state 86
    abstract_declarator            shift and go to state 469
    pointer                        shift and go to state 470
    direct_declarator_forlist      shift and go to state 87
    direct_function_declarator     shift and go to state 84
    parameter_type_list_definition shift and go to state 471
    parameter_list                 shift and go to state 212
    identifier                     shift and go to state 321
    direct_declarator              shift and go to state 44
    direct_abstract_declarator     shift and go to state 358
    parameter_list_definition      shift and go to state 213
    parameter_declaration          shift and go to state 214
    declaration_specifiers         shift and go to state 216
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 360

    (174) direct_abstract_declarator -> [ . ]
    (175) direct_abstract_declarator -> [ . constant_expression ]
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    ]               shift and go to state 472
    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    constant_expression            shift and go to state 473
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 361

    (177) direct_abstract_declarator -> parameter_type_list_definition .

    [               reduce using rule 177 (direct_abstract_declarator -> parameter_type_list_definition .)
    ,               reduce using rule 177 (direct_abstract_declarator -> parameter_type_list_definition .)
    =               reduce using rule 177 (direct_abstract_declarator -> parameter_type_list_definition .)
    )               reduce using rule 177 (direct_abstract_declarator -> parameter_type_list_definition .)


state 362

    (356) initializer -> { initializer_list . }
    (357) initializer -> { initializer_list . , }
    (353) initializer_list -> initializer_list . , initializer
    (354) initializer_list -> initializer_list . , designation initializer

    }               shift and go to state 474
    ,               shift and go to state 475


state 363

    (351) initializer_list -> initializer .

    }               reduce using rule 351 (initializer_list -> initializer .)
    ,               reduce using rule 351 (initializer_list -> initializer .)


state 364

    (352) initializer_list -> designation . initializer
    (355) initializer -> . assignment_expression
    (356) initializer -> . { initializer_list }
    (357) initializer -> . { initializer_list , }
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 219
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    initializer                    shift and go to state 476
    assignment_expression          shift and go to state 218
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 365

    (358) designation -> designator_list . =
    (360) designator_list -> designator_list . designator
    (361) designator -> . [ constant_expression ]
    (362) designator -> . . ID

    =               shift and go to state 477
    [               shift and go to state 367
    .               shift and go to state 368

    designator                     shift and go to state 478

state 366

    (359) designator_list -> designator .

    =               reduce using rule 359 (designator_list -> designator .)
    [               reduce using rule 359 (designator_list -> designator .)
    .               reduce using rule 359 (designator_list -> designator .)


state 367

    (361) designator -> [ . constant_expression ]
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    constant_expression            shift and go to state 479
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 368

    (362) designator -> . . ID

    ID              shift and go to state 480


state 369

    (108) direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .

    [               reduce using rule 108 (direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .)
    =               reduce using rule 108 (direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .)
    ;               reduce using rule 108 (direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .)
    ,               reduce using rule 108 (direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .)
    )               reduce using rule 108 (direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .)
    :               reduce using rule 108 (direct_declarator_forlist -> direct_declarator_forlist [ constant_expression ] .)


state 370

    (75) struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .

    TYPEDEF         reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    EXTERN          reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    STATIC          reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    AUTO            reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    REGISTER        reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    CONST           reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    VOLATILE        reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    RESTRICT        reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    ;               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    *               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    (               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    ID              reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    [               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    ,               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    =               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    )               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)
    :               reduce using rule 75 (struct_or_union_specifier -> struct_or_union identifier { struct_declaration_list } .)


state 371

    (82) struct_declaration -> specifier_qualifier_list struct_declarator_list ; .

    }               reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOID            reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CHAR            reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SHORT           reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    INT             reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    LONG            reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    FLOAT           reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    DOUBLE          reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    SIGNED          reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNSIGNED        reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    BOOL            reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    CONST           reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    VOLATILE        reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    RESTRICT        reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    ENUM            reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    STRUCT          reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)
    UNION           reduce using rule 82 (struct_declaration -> specifier_qualifier_list struct_declarator_list ; .)


state 372

    (90) struct_declarator_list -> struct_declarator_list , . struct_declarator
    (91) struct_declarator -> . declarator
    (92) struct_declarator -> . : constant_expression
    (93) struct_declarator -> . declarator : constant_expression
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    :               shift and go to state 230
    *               shift and go to state 38
    (               shift and go to state 173
    ID              shift and go to state 42

    struct_declarator              shift and go to state 481
    declarator                     shift and go to state 229
    pointer                        shift and go to state 172
    direct_declarator              shift and go to state 44
    direct_declarator_forlist      shift and go to state 45
    direct_function_declarator     shift and go to state 174
    identifier                     shift and go to state 175

state 373

    (93) struct_declarator -> declarator : . constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    constant_expression            shift and go to state 482
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 374

    (92) struct_declarator -> : constant_expression .

    ;               reduce using rule 92 (struct_declarator -> : constant_expression .)
    ,               reduce using rule 92 (struct_declarator -> : constant_expression .)


state 375

    (87) specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts .

    :               reduce using rule 87 (specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts .)
    *               reduce using rule 87 (specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts .)
    (               reduce using rule 87 (specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts .)
    ID              reduce using rule 87 (specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts .)
    )               reduce using rule 87 (specifier_qualifier_list_no_ts -> type_qualifier specifier_qualifier_list_no_ts .)


state 376

    (68) enum_specifier -> ENUM { enumerator_list , } .

    TYPEDEF         reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    EXTERN          reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    STATIC          reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    AUTO            reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    REGISTER        reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    CONST           reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    VOLATILE        reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    RESTRICT        reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    ;               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    *               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    (               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    ID              reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    [               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    ,               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    =               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    )               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)
    :               reduce using rule 68 (enum_specifier -> ENUM { enumerator_list , } .)


state 377

    (72) enumerator_list -> enumerator_list , enumerator .

    }               reduce using rule 72 (enumerator_list -> enumerator_list , enumerator .)
    ,               reduce using rule 72 (enumerator_list -> enumerator_list , enumerator .)


state 378

    (74) enumerator -> identifier = constant_expression .

    }               reduce using rule 74 (enumerator -> identifier = constant_expression .)
    ,               reduce using rule 74 (enumerator -> identifier = constant_expression .)


state 379

    (67) enum_specifier -> ENUM identifier { enumerator_list } .

    TYPEDEF         reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    EXTERN          reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    STATIC          reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    AUTO            reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    REGISTER        reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    CONST           reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    VOLATILE        reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    RESTRICT        reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    ;               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    *               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    (               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    ID              reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    [               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    ,               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    =               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    )               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)
    :               reduce using rule 67 (enum_specifier -> ENUM identifier { enumerator_list } .)


state 380

    (69) enum_specifier -> ENUM identifier { enumerator_list , . }
    (72) enumerator_list -> enumerator_list , . enumerator
    (73) enumerator -> . identifier
    (74) enumerator -> . identifier = constant_expression
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    }               shift and go to state 483
    (               shift and go to state 69
    ID              shift and go to state 42

    identifier                     shift and go to state 115
    enumerator                     shift and go to state 377

state 381

    (270) postfix_expression_v -> identifier ( ) .

    [               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    .               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    PTR             reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    =               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    AO_MUL          reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    AO_DIV          reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    AO_MOD          reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    AO_PLUS         reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    AO_SUB          reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    AO_SL           reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    AO_SR           reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    AO_AND          reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    AO_XOR          reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    AO_OR           reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    *               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    /               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    %               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    +               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    -               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    SHIFT_LEFT      reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    SHIFT_RIGHT     reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    <               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    >               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    LE              reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    GE              reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    EQUAL           reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    NE              reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    &               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    ^               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    |               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    AND             reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    ?               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    OR              reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    ;               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    ,               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    )               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    }               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)
    :               reduce using rule 270 (postfix_expression_v -> identifier ( ) .)


state 382

    (271) postfix_expression_v -> identifier ( argument_expression_list . )
    (350) argument_expression_list -> argument_expression_list . , assignment_expression

    )               shift and go to state 484
    ,               shift and go to state 485


state 383

    (349) argument_expression_list -> assignment_expression .

    )               reduce using rule 349 (argument_expression_list -> assignment_expression .)
    ,               reduce using rule 349 (argument_expression_list -> assignment_expression .)


state 384

    (207) expression_variable -> expression_variable , assignment_expression .

    ;               reduce using rule 207 (expression_variable -> expression_variable , assignment_expression .)
    ,               reduce using rule 207 (expression_variable -> expression_variable , assignment_expression .)
    )               reduce using rule 207 (expression_variable -> expression_variable , assignment_expression .)
    :               reduce using rule 207 (expression_variable -> expression_variable , assignment_expression .)


state 385

    (284) selection_statement -> IF ( expression_variable . ) statement ELSE statement
    (285) selection_statement -> IF ( expression_variable . ) statement
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 486
    ,               shift and go to state 243


state 386

    (277) postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .

    INC             reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    DEC             reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    [               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    .               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    PTR             reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    =               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_MUL          reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_DIV          reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_MOD          reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_PLUS         reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_SUB          reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_SL           reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_SR           reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_AND          reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_XOR          reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AO_OR           reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    *               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    /               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    %               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    +               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    -               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    SHIFT_LEFT      reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    SHIFT_RIGHT     reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    <               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    >               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    LE              reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    GE              reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    EQUAL           reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    NE              reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    &               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    ^               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    |               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    AND             reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    ?               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    OR              reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    ;               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    ,               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    )               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    }               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)
    :               reduce using rule 277 (postfix_expression_v_no_func -> ( postfix_expression_v_no_func ) .)


state 387

    (253) cast_expression_v -> ( type_name ) . cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    cast_expression_v              shift and go to state 487
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 388

    (283) primary_expression_v -> ( expression_variable ) .

    *               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    /               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    %               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    +               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    -               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    SHIFT_LEFT      reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    SHIFT_RIGHT     reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    <               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    >               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    LE              reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    GE              reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    EQUAL           reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    NE              reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    &               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    ^               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    |               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    AND             reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    ?               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    OR              reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    ;               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    ,               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    )               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    =               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    AO_MUL          reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    AO_DIV          reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    AO_MOD          reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    AO_PLUS         reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    AO_SUB          reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    AO_SL           reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    AO_SR           reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    AO_AND          reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    AO_XOR          reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    AO_OR           reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    }               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)
    :               reduce using rule 283 (primary_expression_v -> ( expression_variable ) .)


state 389

    (151) type_name -> specifier_qualifier_list brace_pointer .

    )               reduce using rule 151 (type_name -> specifier_qualifier_list brace_pointer .)


state 390

    (152) brace_pointer -> * .
    (153) brace_pointer -> * . type_qualifier_list
    (155) brace_pointer -> * . brace_pointer
    (156) brace_pointer -> * . type_qualifier_list brace_pointer
    (100) type_qualifier_list -> . type_qualifier
    (101) type_qualifier_list -> . type_qualifier_list type_qualifier
    (152) brace_pointer -> . *
    (153) brace_pointer -> . * type_qualifier_list
    (154) brace_pointer -> . ( brace_pointer )
    (155) brace_pointer -> . * brace_pointer
    (156) brace_pointer -> . * type_qualifier_list brace_pointer
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    )               reduce using rule 152 (brace_pointer -> * .)
    *               shift and go to state 390
    (               shift and go to state 391
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    type_qualifier_list            shift and go to state 488
    brace_pointer                  shift and go to state 489
    type_qualifier                 shift and go to state 81

state 391

    (154) brace_pointer -> ( . brace_pointer )
    (152) brace_pointer -> . *
    (153) brace_pointer -> . * type_qualifier_list
    (154) brace_pointer -> . ( brace_pointer )
    (155) brace_pointer -> . * brace_pointer
    (156) brace_pointer -> . * type_qualifier_list brace_pointer

    *               shift and go to state 390
    (               shift and go to state 391

    brace_pointer                  shift and go to state 490

state 392

    (286) selection_statement -> SWITCH ( expression_variable . ) statement_switch
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 491
    ,               shift and go to state 243


state 393

    (317) iteration_statement -> WHILE ( expression_variable . ) statement_while
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 492
    ,               shift and go to state 243


state 394

    (318) iteration_statement -> DO statement_while WHILE . ( expression_variable ) ;

    (               shift and go to state 493


state 395

    (305) compound_statement_while -> { } .

    WHILE           reduce using rule 305 (compound_statement_while -> { } .)
    }               reduce using rule 305 (compound_statement_while -> { } .)
    {               reduce using rule 305 (compound_statement_while -> { } .)
    ;               reduce using rule 305 (compound_statement_while -> { } .)
    IF              reduce using rule 305 (compound_statement_while -> { } .)
    SWITCH          reduce using rule 305 (compound_statement_while -> { } .)
    DO              reduce using rule 305 (compound_statement_while -> { } .)
    FOR             reduce using rule 305 (compound_statement_while -> { } .)
    GOTO            reduce using rule 305 (compound_statement_while -> { } .)
    CONTINUE        reduce using rule 305 (compound_statement_while -> { } .)
    BREAK           reduce using rule 305 (compound_statement_while -> { } .)
    RETURN          reduce using rule 305 (compound_statement_while -> { } .)
    TYPEDEF         reduce using rule 305 (compound_statement_while -> { } .)
    EXTERN          reduce using rule 305 (compound_statement_while -> { } .)
    STATIC          reduce using rule 305 (compound_statement_while -> { } .)
    AUTO            reduce using rule 305 (compound_statement_while -> { } .)
    REGISTER        reduce using rule 305 (compound_statement_while -> { } .)
    VOID            reduce using rule 305 (compound_statement_while -> { } .)
    CHAR            reduce using rule 305 (compound_statement_while -> { } .)
    SHORT           reduce using rule 305 (compound_statement_while -> { } .)
    INT             reduce using rule 305 (compound_statement_while -> { } .)
    LONG            reduce using rule 305 (compound_statement_while -> { } .)
    FLOAT           reduce using rule 305 (compound_statement_while -> { } .)
    DOUBLE          reduce using rule 305 (compound_statement_while -> { } .)
    SIGNED          reduce using rule 305 (compound_statement_while -> { } .)
    UNSIGNED        reduce using rule 305 (compound_statement_while -> { } .)
    BOOL            reduce using rule 305 (compound_statement_while -> { } .)
    CONST           reduce using rule 305 (compound_statement_while -> { } .)
    VOLATILE        reduce using rule 305 (compound_statement_while -> { } .)
    RESTRICT        reduce using rule 305 (compound_statement_while -> { } .)
    (               reduce using rule 305 (compound_statement_while -> { } .)
    ID              reduce using rule 305 (compound_statement_while -> { } .)
    ENUM            reduce using rule 305 (compound_statement_while -> { } .)
    STRUCT          reduce using rule 305 (compound_statement_while -> { } .)
    UNION           reduce using rule 305 (compound_statement_while -> { } .)
    INC             reduce using rule 305 (compound_statement_while -> { } .)
    DEC             reduce using rule 305 (compound_statement_while -> { } .)
    SIZEOF          reduce using rule 305 (compound_statement_while -> { } .)
    &               reduce using rule 305 (compound_statement_while -> { } .)
    *               reduce using rule 305 (compound_statement_while -> { } .)
    +               reduce using rule 305 (compound_statement_while -> { } .)
    -               reduce using rule 305 (compound_statement_while -> { } .)
    ~               reduce using rule 305 (compound_statement_while -> { } .)
    !               reduce using rule 305 (compound_statement_while -> { } .)
    CONSTANCE       reduce using rule 305 (compound_statement_while -> { } .)
    STRING_LITERAL  reduce using rule 305 (compound_statement_while -> { } .)
    ELSE            reduce using rule 305 (compound_statement_while -> { } .)
    CASE            reduce using rule 305 (compound_statement_while -> { } .)
    DEFAULT         reduce using rule 305 (compound_statement_while -> { } .)


state 396

    (306) compound_statement_while -> { block_item_list_while . }
    (308) block_item_list_while -> block_item_list_while . block_item_while
    (309) block_item_while -> . declaration
    (310) block_item_while -> . statement_while
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (311) statement_while -> . labeled_statement
    (312) statement_while -> . compound_statement_while
    (313) statement_while -> . expression_statement
    (314) statement_while -> . selection_statement_while
    (315) statement_while -> . iteration_statement
    (316) statement_while -> . jump_statement_while
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (203) labeled_statement -> . identifier :
    (305) compound_statement_while -> . { }
    (306) compound_statement_while -> . { block_item_list_while }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 494
    {               shift and go to state 259
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    (               shift and go to state 134
    ID              shift and go to state 42
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    block_item_while               shift and go to state 495
    declaration                    shift and go to state 398
    statement_while                shift and go to state 399
    declaration_specifiers         shift and go to state 123
    labeled_statement              shift and go to state 253
    compound_statement_while       shift and go to state 254
    expression_statement           shift and go to state 255
    selection_statement_while      shift and go to state 256
    iteration_statement            shift and go to state 257
    jump_statement_while           shift and go to state 258
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    assignment_expression          shift and go to state 141
    struct_or_union                shift and go to state 29
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 397

    (307) block_item_list_while -> block_item_while .

    }               reduce using rule 307 (block_item_list_while -> block_item_while .)
    {               reduce using rule 307 (block_item_list_while -> block_item_while .)
    ;               reduce using rule 307 (block_item_list_while -> block_item_while .)
    IF              reduce using rule 307 (block_item_list_while -> block_item_while .)
    SWITCH          reduce using rule 307 (block_item_list_while -> block_item_while .)
    WHILE           reduce using rule 307 (block_item_list_while -> block_item_while .)
    DO              reduce using rule 307 (block_item_list_while -> block_item_while .)
    FOR             reduce using rule 307 (block_item_list_while -> block_item_while .)
    GOTO            reduce using rule 307 (block_item_list_while -> block_item_while .)
    CONTINUE        reduce using rule 307 (block_item_list_while -> block_item_while .)
    BREAK           reduce using rule 307 (block_item_list_while -> block_item_while .)
    RETURN          reduce using rule 307 (block_item_list_while -> block_item_while .)
    TYPEDEF         reduce using rule 307 (block_item_list_while -> block_item_while .)
    EXTERN          reduce using rule 307 (block_item_list_while -> block_item_while .)
    STATIC          reduce using rule 307 (block_item_list_while -> block_item_while .)
    AUTO            reduce using rule 307 (block_item_list_while -> block_item_while .)
    REGISTER        reduce using rule 307 (block_item_list_while -> block_item_while .)
    VOID            reduce using rule 307 (block_item_list_while -> block_item_while .)
    CHAR            reduce using rule 307 (block_item_list_while -> block_item_while .)
    SHORT           reduce using rule 307 (block_item_list_while -> block_item_while .)
    INT             reduce using rule 307 (block_item_list_while -> block_item_while .)
    LONG            reduce using rule 307 (block_item_list_while -> block_item_while .)
    FLOAT           reduce using rule 307 (block_item_list_while -> block_item_while .)
    DOUBLE          reduce using rule 307 (block_item_list_while -> block_item_while .)
    SIGNED          reduce using rule 307 (block_item_list_while -> block_item_while .)
    UNSIGNED        reduce using rule 307 (block_item_list_while -> block_item_while .)
    BOOL            reduce using rule 307 (block_item_list_while -> block_item_while .)
    CONST           reduce using rule 307 (block_item_list_while -> block_item_while .)
    VOLATILE        reduce using rule 307 (block_item_list_while -> block_item_while .)
    RESTRICT        reduce using rule 307 (block_item_list_while -> block_item_while .)
    (               reduce using rule 307 (block_item_list_while -> block_item_while .)
    ID              reduce using rule 307 (block_item_list_while -> block_item_while .)
    ENUM            reduce using rule 307 (block_item_list_while -> block_item_while .)
    STRUCT          reduce using rule 307 (block_item_list_while -> block_item_while .)
    UNION           reduce using rule 307 (block_item_list_while -> block_item_while .)
    INC             reduce using rule 307 (block_item_list_while -> block_item_while .)
    DEC             reduce using rule 307 (block_item_list_while -> block_item_while .)
    SIZEOF          reduce using rule 307 (block_item_list_while -> block_item_while .)
    &               reduce using rule 307 (block_item_list_while -> block_item_while .)
    *               reduce using rule 307 (block_item_list_while -> block_item_while .)
    +               reduce using rule 307 (block_item_list_while -> block_item_while .)
    -               reduce using rule 307 (block_item_list_while -> block_item_while .)
    ~               reduce using rule 307 (block_item_list_while -> block_item_while .)
    !               reduce using rule 307 (block_item_list_while -> block_item_while .)
    CONSTANCE       reduce using rule 307 (block_item_list_while -> block_item_while .)
    STRING_LITERAL  reduce using rule 307 (block_item_list_while -> block_item_while .)


state 398

    (309) block_item_while -> declaration .

    }               reduce using rule 309 (block_item_while -> declaration .)
    {               reduce using rule 309 (block_item_while -> declaration .)
    ;               reduce using rule 309 (block_item_while -> declaration .)
    IF              reduce using rule 309 (block_item_while -> declaration .)
    SWITCH          reduce using rule 309 (block_item_while -> declaration .)
    WHILE           reduce using rule 309 (block_item_while -> declaration .)
    DO              reduce using rule 309 (block_item_while -> declaration .)
    FOR             reduce using rule 309 (block_item_while -> declaration .)
    GOTO            reduce using rule 309 (block_item_while -> declaration .)
    CONTINUE        reduce using rule 309 (block_item_while -> declaration .)
    BREAK           reduce using rule 309 (block_item_while -> declaration .)
    RETURN          reduce using rule 309 (block_item_while -> declaration .)
    TYPEDEF         reduce using rule 309 (block_item_while -> declaration .)
    EXTERN          reduce using rule 309 (block_item_while -> declaration .)
    STATIC          reduce using rule 309 (block_item_while -> declaration .)
    AUTO            reduce using rule 309 (block_item_while -> declaration .)
    REGISTER        reduce using rule 309 (block_item_while -> declaration .)
    VOID            reduce using rule 309 (block_item_while -> declaration .)
    CHAR            reduce using rule 309 (block_item_while -> declaration .)
    SHORT           reduce using rule 309 (block_item_while -> declaration .)
    INT             reduce using rule 309 (block_item_while -> declaration .)
    LONG            reduce using rule 309 (block_item_while -> declaration .)
    FLOAT           reduce using rule 309 (block_item_while -> declaration .)
    DOUBLE          reduce using rule 309 (block_item_while -> declaration .)
    SIGNED          reduce using rule 309 (block_item_while -> declaration .)
    UNSIGNED        reduce using rule 309 (block_item_while -> declaration .)
    BOOL            reduce using rule 309 (block_item_while -> declaration .)
    CONST           reduce using rule 309 (block_item_while -> declaration .)
    VOLATILE        reduce using rule 309 (block_item_while -> declaration .)
    RESTRICT        reduce using rule 309 (block_item_while -> declaration .)
    (               reduce using rule 309 (block_item_while -> declaration .)
    ID              reduce using rule 309 (block_item_while -> declaration .)
    ENUM            reduce using rule 309 (block_item_while -> declaration .)
    STRUCT          reduce using rule 309 (block_item_while -> declaration .)
    UNION           reduce using rule 309 (block_item_while -> declaration .)
    INC             reduce using rule 309 (block_item_while -> declaration .)
    DEC             reduce using rule 309 (block_item_while -> declaration .)
    SIZEOF          reduce using rule 309 (block_item_while -> declaration .)
    &               reduce using rule 309 (block_item_while -> declaration .)
    *               reduce using rule 309 (block_item_while -> declaration .)
    +               reduce using rule 309 (block_item_while -> declaration .)
    -               reduce using rule 309 (block_item_while -> declaration .)
    ~               reduce using rule 309 (block_item_while -> declaration .)
    !               reduce using rule 309 (block_item_while -> declaration .)
    CONSTANCE       reduce using rule 309 (block_item_while -> declaration .)
    STRING_LITERAL  reduce using rule 309 (block_item_while -> declaration .)


state 399

    (310) block_item_while -> statement_while .

    }               reduce using rule 310 (block_item_while -> statement_while .)
    {               reduce using rule 310 (block_item_while -> statement_while .)
    ;               reduce using rule 310 (block_item_while -> statement_while .)
    IF              reduce using rule 310 (block_item_while -> statement_while .)
    SWITCH          reduce using rule 310 (block_item_while -> statement_while .)
    WHILE           reduce using rule 310 (block_item_while -> statement_while .)
    DO              reduce using rule 310 (block_item_while -> statement_while .)
    FOR             reduce using rule 310 (block_item_while -> statement_while .)
    GOTO            reduce using rule 310 (block_item_while -> statement_while .)
    CONTINUE        reduce using rule 310 (block_item_while -> statement_while .)
    BREAK           reduce using rule 310 (block_item_while -> statement_while .)
    RETURN          reduce using rule 310 (block_item_while -> statement_while .)
    TYPEDEF         reduce using rule 310 (block_item_while -> statement_while .)
    EXTERN          reduce using rule 310 (block_item_while -> statement_while .)
    STATIC          reduce using rule 310 (block_item_while -> statement_while .)
    AUTO            reduce using rule 310 (block_item_while -> statement_while .)
    REGISTER        reduce using rule 310 (block_item_while -> statement_while .)
    VOID            reduce using rule 310 (block_item_while -> statement_while .)
    CHAR            reduce using rule 310 (block_item_while -> statement_while .)
    SHORT           reduce using rule 310 (block_item_while -> statement_while .)
    INT             reduce using rule 310 (block_item_while -> statement_while .)
    LONG            reduce using rule 310 (block_item_while -> statement_while .)
    FLOAT           reduce using rule 310 (block_item_while -> statement_while .)
    DOUBLE          reduce using rule 310 (block_item_while -> statement_while .)
    SIGNED          reduce using rule 310 (block_item_while -> statement_while .)
    UNSIGNED        reduce using rule 310 (block_item_while -> statement_while .)
    BOOL            reduce using rule 310 (block_item_while -> statement_while .)
    CONST           reduce using rule 310 (block_item_while -> statement_while .)
    VOLATILE        reduce using rule 310 (block_item_while -> statement_while .)
    RESTRICT        reduce using rule 310 (block_item_while -> statement_while .)
    (               reduce using rule 310 (block_item_while -> statement_while .)
    ID              reduce using rule 310 (block_item_while -> statement_while .)
    ENUM            reduce using rule 310 (block_item_while -> statement_while .)
    STRUCT          reduce using rule 310 (block_item_while -> statement_while .)
    UNION           reduce using rule 310 (block_item_while -> statement_while .)
    INC             reduce using rule 310 (block_item_while -> statement_while .)
    DEC             reduce using rule 310 (block_item_while -> statement_while .)
    SIZEOF          reduce using rule 310 (block_item_while -> statement_while .)
    &               reduce using rule 310 (block_item_while -> statement_while .)
    *               reduce using rule 310 (block_item_while -> statement_while .)
    +               reduce using rule 310 (block_item_while -> statement_while .)
    -               reduce using rule 310 (block_item_while -> statement_while .)
    ~               reduce using rule 310 (block_item_while -> statement_while .)
    !               reduce using rule 310 (block_item_while -> statement_while .)
    CONSTANCE       reduce using rule 310 (block_item_while -> statement_while .)
    STRING_LITERAL  reduce using rule 310 (block_item_while -> statement_while .)


state 400

    (287) selection_statement_while -> IF ( . expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> IF ( . expression_variable ) statement_while
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 496
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 401

    (289) selection_statement_while -> SWITCH ( . expression_variable ) statement_while_switch
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 497
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 402

    (344) jump_statement_while -> GOTO ID . ;

    ;               shift and go to state 498


state 403

    (345) jump_statement_while -> CONTINUE ; .

    WHILE           reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    }               reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    {               reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    ;               reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    IF              reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    SWITCH          reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    DO              reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    FOR             reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    GOTO            reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    CONTINUE        reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    BREAK           reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    RETURN          reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    TYPEDEF         reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    EXTERN          reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    STATIC          reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    AUTO            reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    REGISTER        reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    VOID            reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    CHAR            reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    SHORT           reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    INT             reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    LONG            reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    FLOAT           reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    DOUBLE          reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    SIGNED          reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    UNSIGNED        reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    BOOL            reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    CONST           reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    VOLATILE        reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    RESTRICT        reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    (               reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    ID              reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    ENUM            reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    STRUCT          reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    UNION           reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    INC             reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    DEC             reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    SIZEOF          reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    &               reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    *               reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    +               reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    -               reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    ~               reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    !               reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    CONSTANCE       reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    ELSE            reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    CASE            reduce using rule 345 (jump_statement_while -> CONTINUE ; .)
    DEFAULT         reduce using rule 345 (jump_statement_while -> CONTINUE ; .)


state 404

    (346) jump_statement_while -> BREAK ; .

    WHILE           reduce using rule 346 (jump_statement_while -> BREAK ; .)
    }               reduce using rule 346 (jump_statement_while -> BREAK ; .)
    {               reduce using rule 346 (jump_statement_while -> BREAK ; .)
    ;               reduce using rule 346 (jump_statement_while -> BREAK ; .)
    IF              reduce using rule 346 (jump_statement_while -> BREAK ; .)
    SWITCH          reduce using rule 346 (jump_statement_while -> BREAK ; .)
    DO              reduce using rule 346 (jump_statement_while -> BREAK ; .)
    FOR             reduce using rule 346 (jump_statement_while -> BREAK ; .)
    GOTO            reduce using rule 346 (jump_statement_while -> BREAK ; .)
    CONTINUE        reduce using rule 346 (jump_statement_while -> BREAK ; .)
    BREAK           reduce using rule 346 (jump_statement_while -> BREAK ; .)
    RETURN          reduce using rule 346 (jump_statement_while -> BREAK ; .)
    TYPEDEF         reduce using rule 346 (jump_statement_while -> BREAK ; .)
    EXTERN          reduce using rule 346 (jump_statement_while -> BREAK ; .)
    STATIC          reduce using rule 346 (jump_statement_while -> BREAK ; .)
    AUTO            reduce using rule 346 (jump_statement_while -> BREAK ; .)
    REGISTER        reduce using rule 346 (jump_statement_while -> BREAK ; .)
    VOID            reduce using rule 346 (jump_statement_while -> BREAK ; .)
    CHAR            reduce using rule 346 (jump_statement_while -> BREAK ; .)
    SHORT           reduce using rule 346 (jump_statement_while -> BREAK ; .)
    INT             reduce using rule 346 (jump_statement_while -> BREAK ; .)
    LONG            reduce using rule 346 (jump_statement_while -> BREAK ; .)
    FLOAT           reduce using rule 346 (jump_statement_while -> BREAK ; .)
    DOUBLE          reduce using rule 346 (jump_statement_while -> BREAK ; .)
    SIGNED          reduce using rule 346 (jump_statement_while -> BREAK ; .)
    UNSIGNED        reduce using rule 346 (jump_statement_while -> BREAK ; .)
    BOOL            reduce using rule 346 (jump_statement_while -> BREAK ; .)
    CONST           reduce using rule 346 (jump_statement_while -> BREAK ; .)
    VOLATILE        reduce using rule 346 (jump_statement_while -> BREAK ; .)
    RESTRICT        reduce using rule 346 (jump_statement_while -> BREAK ; .)
    (               reduce using rule 346 (jump_statement_while -> BREAK ; .)
    ID              reduce using rule 346 (jump_statement_while -> BREAK ; .)
    ENUM            reduce using rule 346 (jump_statement_while -> BREAK ; .)
    STRUCT          reduce using rule 346 (jump_statement_while -> BREAK ; .)
    UNION           reduce using rule 346 (jump_statement_while -> BREAK ; .)
    INC             reduce using rule 346 (jump_statement_while -> BREAK ; .)
    DEC             reduce using rule 346 (jump_statement_while -> BREAK ; .)
    SIZEOF          reduce using rule 346 (jump_statement_while -> BREAK ; .)
    &               reduce using rule 346 (jump_statement_while -> BREAK ; .)
    *               reduce using rule 346 (jump_statement_while -> BREAK ; .)
    +               reduce using rule 346 (jump_statement_while -> BREAK ; .)
    -               reduce using rule 346 (jump_statement_while -> BREAK ; .)
    ~               reduce using rule 346 (jump_statement_while -> BREAK ; .)
    !               reduce using rule 346 (jump_statement_while -> BREAK ; .)
    CONSTANCE       reduce using rule 346 (jump_statement_while -> BREAK ; .)
    STRING_LITERAL  reduce using rule 346 (jump_statement_while -> BREAK ; .)
    ELSE            reduce using rule 346 (jump_statement_while -> BREAK ; .)
    CASE            reduce using rule 346 (jump_statement_while -> BREAK ; .)
    DEFAULT         reduce using rule 346 (jump_statement_while -> BREAK ; .)


state 405

    (347) jump_statement_while -> RETURN ; .

    WHILE           reduce using rule 347 (jump_statement_while -> RETURN ; .)
    }               reduce using rule 347 (jump_statement_while -> RETURN ; .)
    {               reduce using rule 347 (jump_statement_while -> RETURN ; .)
    ;               reduce using rule 347 (jump_statement_while -> RETURN ; .)
    IF              reduce using rule 347 (jump_statement_while -> RETURN ; .)
    SWITCH          reduce using rule 347 (jump_statement_while -> RETURN ; .)
    DO              reduce using rule 347 (jump_statement_while -> RETURN ; .)
    FOR             reduce using rule 347 (jump_statement_while -> RETURN ; .)
    GOTO            reduce using rule 347 (jump_statement_while -> RETURN ; .)
    CONTINUE        reduce using rule 347 (jump_statement_while -> RETURN ; .)
    BREAK           reduce using rule 347 (jump_statement_while -> RETURN ; .)
    RETURN          reduce using rule 347 (jump_statement_while -> RETURN ; .)
    TYPEDEF         reduce using rule 347 (jump_statement_while -> RETURN ; .)
    EXTERN          reduce using rule 347 (jump_statement_while -> RETURN ; .)
    STATIC          reduce using rule 347 (jump_statement_while -> RETURN ; .)
    AUTO            reduce using rule 347 (jump_statement_while -> RETURN ; .)
    REGISTER        reduce using rule 347 (jump_statement_while -> RETURN ; .)
    VOID            reduce using rule 347 (jump_statement_while -> RETURN ; .)
    CHAR            reduce using rule 347 (jump_statement_while -> RETURN ; .)
    SHORT           reduce using rule 347 (jump_statement_while -> RETURN ; .)
    INT             reduce using rule 347 (jump_statement_while -> RETURN ; .)
    LONG            reduce using rule 347 (jump_statement_while -> RETURN ; .)
    FLOAT           reduce using rule 347 (jump_statement_while -> RETURN ; .)
    DOUBLE          reduce using rule 347 (jump_statement_while -> RETURN ; .)
    SIGNED          reduce using rule 347 (jump_statement_while -> RETURN ; .)
    UNSIGNED        reduce using rule 347 (jump_statement_while -> RETURN ; .)
    BOOL            reduce using rule 347 (jump_statement_while -> RETURN ; .)
    CONST           reduce using rule 347 (jump_statement_while -> RETURN ; .)
    VOLATILE        reduce using rule 347 (jump_statement_while -> RETURN ; .)
    RESTRICT        reduce using rule 347 (jump_statement_while -> RETURN ; .)
    (               reduce using rule 347 (jump_statement_while -> RETURN ; .)
    ID              reduce using rule 347 (jump_statement_while -> RETURN ; .)
    ENUM            reduce using rule 347 (jump_statement_while -> RETURN ; .)
    STRUCT          reduce using rule 347 (jump_statement_while -> RETURN ; .)
    UNION           reduce using rule 347 (jump_statement_while -> RETURN ; .)
    INC             reduce using rule 347 (jump_statement_while -> RETURN ; .)
    DEC             reduce using rule 347 (jump_statement_while -> RETURN ; .)
    SIZEOF          reduce using rule 347 (jump_statement_while -> RETURN ; .)
    &               reduce using rule 347 (jump_statement_while -> RETURN ; .)
    *               reduce using rule 347 (jump_statement_while -> RETURN ; .)
    +               reduce using rule 347 (jump_statement_while -> RETURN ; .)
    -               reduce using rule 347 (jump_statement_while -> RETURN ; .)
    ~               reduce using rule 347 (jump_statement_while -> RETURN ; .)
    !               reduce using rule 347 (jump_statement_while -> RETURN ; .)
    CONSTANCE       reduce using rule 347 (jump_statement_while -> RETURN ; .)
    STRING_LITERAL  reduce using rule 347 (jump_statement_while -> RETURN ; .)
    ELSE            reduce using rule 347 (jump_statement_while -> RETURN ; .)
    CASE            reduce using rule 347 (jump_statement_while -> RETURN ; .)
    DEFAULT         reduce using rule 347 (jump_statement_while -> RETURN ; .)


state 406

    (348) jump_statement_while -> RETURN expression_variable . ;
    (207) expression_variable -> expression_variable . , assignment_expression

    ;               shift and go to state 499
    ,               shift and go to state 243


state 407

    (319) iteration_statement -> FOR ( expression_statement . expression_statement ) statement_while
    (320) iteration_statement -> FOR ( expression_statement . expression_statement expression_variable ) statement_while
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ;               shift and go to state 124
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 500
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 408

    (321) iteration_statement -> FOR ( declaration . expression_statement ) statement_while
    (322) iteration_statement -> FOR ( declaration . expression_statement expression_variable ) statement_while
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ;               shift and go to state 124
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 501
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 409

    (341) jump_statement -> GOTO ID ; .

    }               reduce using rule 341 (jump_statement -> GOTO ID ; .)
    {               reduce using rule 341 (jump_statement -> GOTO ID ; .)
    ;               reduce using rule 341 (jump_statement -> GOTO ID ; .)
    IF              reduce using rule 341 (jump_statement -> GOTO ID ; .)
    SWITCH          reduce using rule 341 (jump_statement -> GOTO ID ; .)
    WHILE           reduce using rule 341 (jump_statement -> GOTO ID ; .)
    DO              reduce using rule 341 (jump_statement -> GOTO ID ; .)
    FOR             reduce using rule 341 (jump_statement -> GOTO ID ; .)
    GOTO            reduce using rule 341 (jump_statement -> GOTO ID ; .)
    RETURN          reduce using rule 341 (jump_statement -> GOTO ID ; .)
    TYPEDEF         reduce using rule 341 (jump_statement -> GOTO ID ; .)
    EXTERN          reduce using rule 341 (jump_statement -> GOTO ID ; .)
    STATIC          reduce using rule 341 (jump_statement -> GOTO ID ; .)
    AUTO            reduce using rule 341 (jump_statement -> GOTO ID ; .)
    REGISTER        reduce using rule 341 (jump_statement -> GOTO ID ; .)
    VOID            reduce using rule 341 (jump_statement -> GOTO ID ; .)
    CHAR            reduce using rule 341 (jump_statement -> GOTO ID ; .)
    SHORT           reduce using rule 341 (jump_statement -> GOTO ID ; .)
    INT             reduce using rule 341 (jump_statement -> GOTO ID ; .)
    LONG            reduce using rule 341 (jump_statement -> GOTO ID ; .)
    FLOAT           reduce using rule 341 (jump_statement -> GOTO ID ; .)
    DOUBLE          reduce using rule 341 (jump_statement -> GOTO ID ; .)
    SIGNED          reduce using rule 341 (jump_statement -> GOTO ID ; .)
    UNSIGNED        reduce using rule 341 (jump_statement -> GOTO ID ; .)
    BOOL            reduce using rule 341 (jump_statement -> GOTO ID ; .)
    CONST           reduce using rule 341 (jump_statement -> GOTO ID ; .)
    VOLATILE        reduce using rule 341 (jump_statement -> GOTO ID ; .)
    RESTRICT        reduce using rule 341 (jump_statement -> GOTO ID ; .)
    (               reduce using rule 341 (jump_statement -> GOTO ID ; .)
    ID              reduce using rule 341 (jump_statement -> GOTO ID ; .)
    ENUM            reduce using rule 341 (jump_statement -> GOTO ID ; .)
    STRUCT          reduce using rule 341 (jump_statement -> GOTO ID ; .)
    UNION           reduce using rule 341 (jump_statement -> GOTO ID ; .)
    INC             reduce using rule 341 (jump_statement -> GOTO ID ; .)
    DEC             reduce using rule 341 (jump_statement -> GOTO ID ; .)
    SIZEOF          reduce using rule 341 (jump_statement -> GOTO ID ; .)
    &               reduce using rule 341 (jump_statement -> GOTO ID ; .)
    *               reduce using rule 341 (jump_statement -> GOTO ID ; .)
    +               reduce using rule 341 (jump_statement -> GOTO ID ; .)
    -               reduce using rule 341 (jump_statement -> GOTO ID ; .)
    ~               reduce using rule 341 (jump_statement -> GOTO ID ; .)
    !               reduce using rule 341 (jump_statement -> GOTO ID ; .)
    CONSTANCE       reduce using rule 341 (jump_statement -> GOTO ID ; .)
    STRING_LITERAL  reduce using rule 341 (jump_statement -> GOTO ID ; .)
    ELSE            reduce using rule 341 (jump_statement -> GOTO ID ; .)
    CASE            reduce using rule 341 (jump_statement -> GOTO ID ; .)
    DEFAULT         reduce using rule 341 (jump_statement -> GOTO ID ; .)
    CONTINUE        reduce using rule 341 (jump_statement -> GOTO ID ; .)
    BREAK           reduce using rule 341 (jump_statement -> GOTO ID ; .)


state 410

    (343) jump_statement -> RETURN expression_variable ; .

    }               reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    {               reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    ;               reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    IF              reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    SWITCH          reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    WHILE           reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    DO              reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    FOR             reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    GOTO            reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    RETURN          reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    TYPEDEF         reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    EXTERN          reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    STATIC          reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    AUTO            reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    REGISTER        reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    VOID            reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    CHAR            reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    SHORT           reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    INT             reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    LONG            reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    FLOAT           reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    DOUBLE          reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    SIGNED          reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    UNSIGNED        reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    BOOL            reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    CONST           reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    VOLATILE        reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    RESTRICT        reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    (               reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    ID              reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    ENUM            reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    STRUCT          reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    UNION           reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    INC             reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    DEC             reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    SIZEOF          reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    &               reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    *               reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    +               reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    -               reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    ~               reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    !               reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    CONSTANCE       reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    STRING_LITERAL  reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    ELSE            reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    CASE            reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    DEFAULT         reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    CONTINUE        reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)
    BREAK           reduce using rule 343 (jump_statement -> RETURN expression_variable ; .)


state 411

    (209) assignment_expression -> unary_expression_v assignment_operator assignment_expression .

    ;               reduce using rule 209 (assignment_expression -> unary_expression_v assignment_operator assignment_expression .)
    ,               reduce using rule 209 (assignment_expression -> unary_expression_v assignment_operator assignment_expression .)
    )               reduce using rule 209 (assignment_expression -> unary_expression_v assignment_operator assignment_expression .)
    }               reduce using rule 209 (assignment_expression -> unary_expression_v assignment_operator assignment_expression .)
    :               reduce using rule 209 (assignment_expression -> unary_expression_v assignment_operator assignment_expression .)


state 412

    (222) conditional_expression_v -> logical_or_expression_v ? expression_variable . : conditional_expression_v
    (207) expression_variable -> expression_variable . , assignment_expression

    :               shift and go to state 502
    ,               shift and go to state 243


state 413

    (224) logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .
    (226) logical_and_expression_v -> logical_and_expression_v . AND inclusive_or_expression_v

    ?               reduce using rule 224 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    OR              reduce using rule 224 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    ;               reduce using rule 224 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    ,               reduce using rule 224 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    )               reduce using rule 224 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    }               reduce using rule 224 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    :               reduce using rule 224 (logical_or_expression_v -> logical_or_expression_v OR logical_and_expression_v .)
    AND             shift and go to state 297


state 414

    (269) postfix_expression_v -> postfix_expression_v [ expression . ]
    (169) expression -> expression . , constant_expression

    ]               shift and go to state 503
    ,               shift and go to state 462


state 415

    (272) postfix_expression_v -> postfix_expression_v . ID .

    [               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    .               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    PTR             reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    =               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_MUL          reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_DIV          reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_MOD          reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_PLUS         reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_SUB          reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_SL           reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_SR           reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_AND          reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_XOR          reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    AO_OR           reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    *               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    /               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    %               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    +               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    -               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    SHIFT_LEFT      reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    SHIFT_RIGHT     reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    <               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    >               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    LE              reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    GE              reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    EQUAL           reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    NE              reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    &               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    ^               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    |               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    AND             reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    ?               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    OR              reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    ;               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    ,               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    )               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    }               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)
    :               reduce using rule 272 (postfix_expression_v -> postfix_expression_v . ID .)


state 416

    (273) postfix_expression_v -> postfix_expression_v PTR ID .

    [               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    .               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    PTR             reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    =               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_MUL          reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_DIV          reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_MOD          reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_PLUS         reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_SUB          reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_SL           reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_SR           reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_AND          reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_XOR          reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AO_OR           reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    *               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    /               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    %               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    +               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    -               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    SHIFT_LEFT      reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    SHIFT_RIGHT     reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    <               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    >               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    LE              reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    GE              reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    EQUAL           reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    NE              reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    &               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    ^               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    |               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    AND             reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    ?               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    OR              reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    ;               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    ,               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    )               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    }               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)
    :               reduce using rule 273 (postfix_expression_v -> postfix_expression_v PTR ID .)


state 417

    (277) postfix_expression_v_no_func -> ( postfix_expression_v_no_func . )
    (278) postfix_expression_v_no_func -> postfix_expression_v_no_func . [ expression ]
    (279) postfix_expression_v_no_func -> postfix_expression_v_no_func . . ID
    (280) postfix_expression_v_no_func -> postfix_expression_v_no_func . PTR ID

    )               shift and go to state 386
    [               shift and go to state 300
    .               shift and go to state 301
    PTR             shift and go to state 302


state 418

    (183) identifier -> ( identifier . )
    (276) postfix_expression_v_no_func -> identifier .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 182
    [               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    .               reduce using rule 276 (postfix_expression_v_no_func -> identifier .)
    PTR             reduce using rule 276 (postfix_expression_v_no_func -> identifier .)

  ! )               [ reduce using rule 276 (postfix_expression_v_no_func -> identifier .) ]


state 419

    (256) unary_expression_v_constance -> SIZEOF ( type_name . )

    )               shift and go to state 504


state 420

    (226) logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .
    (228) inclusive_or_expression_v -> inclusive_or_expression_v . | exclusive_or_expression_v

    AND             reduce using rule 226 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    ?               reduce using rule 226 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    OR              reduce using rule 226 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    ;               reduce using rule 226 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    ,               reduce using rule 226 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    )               reduce using rule 226 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    }               reduce using rule 226 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    :               reduce using rule 226 (logical_and_expression_v -> logical_and_expression_v AND inclusive_or_expression_v .)
    |               shift and go to state 303


state 421

    (278) postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression . ]
    (169) expression -> expression . , constant_expression

    ]               shift and go to state 505
    ,               shift and go to state 462


state 422

    (279) postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .

    INC             reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    DEC             reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    [               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    .               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    PTR             reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    =               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_MUL          reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_DIV          reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_MOD          reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_PLUS         reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_SUB          reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_SL           reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_SR           reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_AND          reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_XOR          reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AO_OR           reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    *               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    /               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    %               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    +               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    -               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    SHIFT_LEFT      reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    SHIFT_RIGHT     reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    <               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    >               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    LE              reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    GE              reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    EQUAL           reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    NE              reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    &               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    ^               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    |               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    AND             reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    ?               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    OR              reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    ;               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    ,               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    )               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    }               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)
    :               reduce using rule 279 (postfix_expression_v_no_func -> postfix_expression_v_no_func . ID .)


state 423

    (280) postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .

    INC             reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    DEC             reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    [               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    .               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    PTR             reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    =               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_MUL          reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_DIV          reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_MOD          reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_PLUS         reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_SUB          reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_SL           reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_SR           reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_AND          reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_XOR          reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AO_OR           reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    *               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    /               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    %               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    +               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    -               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    SHIFT_LEFT      reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    SHIFT_RIGHT     reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    <               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    >               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    LE              reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    GE              reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    EQUAL           reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    NE              reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    &               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    ^               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    |               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    AND             reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    ?               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    OR              reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    ;               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    ,               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    )               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    }               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)
    :               reduce using rule 280 (postfix_expression_v_no_func -> postfix_expression_v_no_func PTR ID .)


state 424

    (228) inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .
    (230) exclusive_or_expression_v -> exclusive_or_expression_v . ^ and_expression_v

    |               reduce using rule 228 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    AND             reduce using rule 228 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    ?               reduce using rule 228 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    OR              reduce using rule 228 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    ;               reduce using rule 228 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    ,               reduce using rule 228 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    )               reduce using rule 228 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    }               reduce using rule 228 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    :               reduce using rule 228 (inclusive_or_expression_v -> inclusive_or_expression_v | exclusive_or_expression_v .)
    ^               shift and go to state 304


state 425

    (230) exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .
    (232) and_expression_v -> and_expression_v . & equality_expression_v

    ^               reduce using rule 230 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    |               reduce using rule 230 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    AND             reduce using rule 230 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    ?               reduce using rule 230 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    OR              reduce using rule 230 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    ;               reduce using rule 230 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    ,               reduce using rule 230 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    )               reduce using rule 230 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    }               reduce using rule 230 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    :               reduce using rule 230 (exclusive_or_expression_v -> exclusive_or_expression_v ^ and_expression_v .)
    &               shift and go to state 305


state 426

    (232) and_expression_v -> and_expression_v & equality_expression_v .
    (234) equality_expression_v -> equality_expression_v . EQUAL relational_expression_v
    (235) equality_expression_v -> equality_expression_v . NE relational_expression_v

    &               reduce using rule 232 (and_expression_v -> and_expression_v & equality_expression_v .)
    ^               reduce using rule 232 (and_expression_v -> and_expression_v & equality_expression_v .)
    |               reduce using rule 232 (and_expression_v -> and_expression_v & equality_expression_v .)
    AND             reduce using rule 232 (and_expression_v -> and_expression_v & equality_expression_v .)
    ?               reduce using rule 232 (and_expression_v -> and_expression_v & equality_expression_v .)
    OR              reduce using rule 232 (and_expression_v -> and_expression_v & equality_expression_v .)
    ;               reduce using rule 232 (and_expression_v -> and_expression_v & equality_expression_v .)
    ,               reduce using rule 232 (and_expression_v -> and_expression_v & equality_expression_v .)
    )               reduce using rule 232 (and_expression_v -> and_expression_v & equality_expression_v .)
    }               reduce using rule 232 (and_expression_v -> and_expression_v & equality_expression_v .)
    :               reduce using rule 232 (and_expression_v -> and_expression_v & equality_expression_v .)
    EQUAL           shift and go to state 306
    NE              shift and go to state 307


state 427

    (234) equality_expression_v -> equality_expression_v EQUAL relational_expression_v .
    (237) relational_expression_v -> relational_expression_v . < shift_expression_v
    (238) relational_expression_v -> relational_expression_v . > shift_expression_v
    (239) relational_expression_v -> relational_expression_v . LE shift_expression_v
    (240) relational_expression_v -> relational_expression_v . GE shift_expression_v

    EQUAL           reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    NE              reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    &               reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    ^               reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    |               reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    AND             reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    ?               reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    OR              reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    ;               reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    ,               reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    )               reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    }               reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    :               reduce using rule 234 (equality_expression_v -> equality_expression_v EQUAL relational_expression_v .)
    <               shift and go to state 308
    >               shift and go to state 309
    LE              shift and go to state 310
    GE              shift and go to state 311


state 428

    (235) equality_expression_v -> equality_expression_v NE relational_expression_v .
    (237) relational_expression_v -> relational_expression_v . < shift_expression_v
    (238) relational_expression_v -> relational_expression_v . > shift_expression_v
    (239) relational_expression_v -> relational_expression_v . LE shift_expression_v
    (240) relational_expression_v -> relational_expression_v . GE shift_expression_v

    EQUAL           reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    NE              reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    &               reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    ^               reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    |               reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    AND             reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    ?               reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    OR              reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    ;               reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    ,               reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    )               reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    }               reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    :               reduce using rule 235 (equality_expression_v -> equality_expression_v NE relational_expression_v .)
    <               shift and go to state 308
    >               shift and go to state 309
    LE              shift and go to state 310
    GE              shift and go to state 311


state 429

    (237) relational_expression_v -> relational_expression_v < shift_expression_v .
    (242) shift_expression_v -> shift_expression_v . SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> shift_expression_v . SHIFT_RIGHT additive_expression_v

    <               reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    >               reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    LE              reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    GE              reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    EQUAL           reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    NE              reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    &               reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    ^               reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    |               reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    AND             reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    ?               reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    OR              reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    ;               reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    ,               reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    )               reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    }               reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    :               reduce using rule 237 (relational_expression_v -> relational_expression_v < shift_expression_v .)
    SHIFT_LEFT      shift and go to state 312
    SHIFT_RIGHT     shift and go to state 313


state 430

    (238) relational_expression_v -> relational_expression_v > shift_expression_v .
    (242) shift_expression_v -> shift_expression_v . SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> shift_expression_v . SHIFT_RIGHT additive_expression_v

    <               reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    >               reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    LE              reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    GE              reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    EQUAL           reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    NE              reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    &               reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    ^               reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    |               reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    AND             reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    ?               reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    OR              reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    ;               reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    ,               reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    )               reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    }               reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    :               reduce using rule 238 (relational_expression_v -> relational_expression_v > shift_expression_v .)
    SHIFT_LEFT      shift and go to state 312
    SHIFT_RIGHT     shift and go to state 313


state 431

    (239) relational_expression_v -> relational_expression_v LE shift_expression_v .
    (242) shift_expression_v -> shift_expression_v . SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> shift_expression_v . SHIFT_RIGHT additive_expression_v

    <               reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    >               reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    LE              reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    GE              reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    EQUAL           reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    NE              reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    &               reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    ^               reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    |               reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    AND             reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    ?               reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    OR              reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    ;               reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    ,               reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    )               reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    }               reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    :               reduce using rule 239 (relational_expression_v -> relational_expression_v LE shift_expression_v .)
    SHIFT_LEFT      shift and go to state 312
    SHIFT_RIGHT     shift and go to state 313


state 432

    (240) relational_expression_v -> relational_expression_v GE shift_expression_v .
    (242) shift_expression_v -> shift_expression_v . SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> shift_expression_v . SHIFT_RIGHT additive_expression_v

    <               reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    >               reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    LE              reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    GE              reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    EQUAL           reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    NE              reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    &               reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    ^               reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    |               reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    AND             reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    ?               reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    OR              reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    ;               reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    ,               reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    )               reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    }               reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    :               reduce using rule 240 (relational_expression_v -> relational_expression_v GE shift_expression_v .)
    SHIFT_LEFT      shift and go to state 312
    SHIFT_RIGHT     shift and go to state 313


state 433

    (242) shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .
    (245) additive_expression_v -> additive_expression_v . + multiplicative_expression_v
    (246) additive_expression_v -> additive_expression_v . - multiplicative_expression_v

    SHIFT_LEFT      reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    SHIFT_RIGHT     reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    <               reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    >               reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    LE              reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    GE              reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    EQUAL           reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    NE              reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    &               reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    ^               reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    |               reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    AND             reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    ?               reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    OR              reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    ;               reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    ,               reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    )               reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    }               reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    :               reduce using rule 242 (shift_expression_v -> shift_expression_v SHIFT_LEFT additive_expression_v .)
    +               shift and go to state 314
    -               shift and go to state 315


state 434

    (243) shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .
    (245) additive_expression_v -> additive_expression_v . + multiplicative_expression_v
    (246) additive_expression_v -> additive_expression_v . - multiplicative_expression_v

    SHIFT_LEFT      reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    SHIFT_RIGHT     reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    <               reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    >               reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    LE              reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    GE              reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    EQUAL           reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    NE              reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    &               reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    ^               reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    |               reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    AND             reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    ?               reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    OR              reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    ;               reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    ,               reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    )               reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    }               reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    :               reduce using rule 243 (shift_expression_v -> shift_expression_v SHIFT_RIGHT additive_expression_v .)
    +               shift and go to state 314
    -               shift and go to state 315


state 435

    (245) additive_expression_v -> additive_expression_v + multiplicative_expression_v .
    (248) multiplicative_expression_v -> multiplicative_expression_v . * cast_expression_v
    (249) multiplicative_expression_v -> multiplicative_expression_v . / cast_expression_v
    (250) multiplicative_expression_v -> multiplicative_expression_v . % cast_expression_v

    +               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    -               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    SHIFT_LEFT      reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    SHIFT_RIGHT     reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    <               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    >               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    LE              reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    GE              reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    EQUAL           reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    NE              reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    &               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    ^               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    |               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    AND             reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    ?               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    OR              reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    ;               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    ,               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    )               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    }               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    :               reduce using rule 245 (additive_expression_v -> additive_expression_v + multiplicative_expression_v .)
    *               shift and go to state 316
    /               shift and go to state 317
    %               shift and go to state 318


state 436

    (246) additive_expression_v -> additive_expression_v - multiplicative_expression_v .
    (248) multiplicative_expression_v -> multiplicative_expression_v . * cast_expression_v
    (249) multiplicative_expression_v -> multiplicative_expression_v . / cast_expression_v
    (250) multiplicative_expression_v -> multiplicative_expression_v . % cast_expression_v

    +               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    -               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    SHIFT_LEFT      reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    SHIFT_RIGHT     reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    <               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    >               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    LE              reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    GE              reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    EQUAL           reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    NE              reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    &               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    ^               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    |               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    AND             reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    ?               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    OR              reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    ;               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    ,               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    )               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    }               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    :               reduce using rule 246 (additive_expression_v -> additive_expression_v - multiplicative_expression_v .)
    *               shift and go to state 316
    /               shift and go to state 317
    %               shift and go to state 318


state 437

    (248) multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .

    *               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    /               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    %               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    +               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    -               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    SHIFT_LEFT      reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    SHIFT_RIGHT     reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    <               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    >               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    LE              reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    GE              reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    EQUAL           reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    NE              reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    &               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    ^               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    |               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    AND             reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    ?               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    OR              reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    ;               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    ,               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    )               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    }               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)
    :               reduce using rule 248 (multiplicative_expression_v -> multiplicative_expression_v * cast_expression_v .)


state 438

    (249) multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .

    *               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    /               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    %               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    +               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    -               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    SHIFT_LEFT      reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    SHIFT_RIGHT     reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    <               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    >               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    LE              reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    GE              reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    EQUAL           reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    NE              reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    &               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    ^               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    |               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    AND             reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    ?               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    OR              reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    ;               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    ,               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    )               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    }               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)
    :               reduce using rule 249 (multiplicative_expression_v -> multiplicative_expression_v / cast_expression_v .)


state 439

    (250) multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .

    *               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    /               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    %               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    +               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    -               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    SHIFT_LEFT      reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    SHIFT_RIGHT     reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    <               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    >               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    LE              reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    GE              reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    EQUAL           reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    NE              reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    &               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    ^               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    |               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    AND             reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    ?               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    OR              reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    ;               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    ,               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    )               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    }               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)
    :               reduce using rule 250 (multiplicative_expression_v -> multiplicative_expression_v % cast_expression_v .)


state 440

    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (180) direct_function_declarator -> ( . pointer direct_function_declarator )
    (181) direct_function_declarator -> ( . direct_function_declarator )
    (103) direct_declarator -> ( . declarator )
    (183) identifier -> ( . identifier )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator

    *               shift and go to state 38
    (               shift and go to state 319
    ID              shift and go to state 42

    pointer                        shift and go to state 320
    direct_declarator_forlist      shift and go to state 87
    direct_function_declarator     shift and go to state 84
    declarator                     shift and go to state 86
    identifier                     shift and go to state 321
    direct_declarator              shift and go to state 44

state 441

    (119) conditional_expression -> logical_or_expression ? expression . : conditional_expression
    (169) expression -> expression . , constant_expression

    :               shift and go to state 506
    ,               shift and go to state 462


state 442

    (121) logical_or_expression -> logical_or_expression OR logical_and_expression .
    (123) logical_and_expression -> logical_and_expression . AND inclusive_or_expression

    ?               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    OR              reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ]               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    )               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ,               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    ;               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    }               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    :               reduce using rule 121 (logical_or_expression -> logical_or_expression OR logical_and_expression .)
    AND             shift and go to state 328


state 443

    (123) logical_and_expression -> logical_and_expression AND inclusive_or_expression .
    (125) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND             reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    ?               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    OR              reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    ]               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    )               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    ,               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    ;               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    }               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    :               reduce using rule 123 (logical_and_expression -> logical_and_expression AND inclusive_or_expression .)
    |               shift and go to state 329


state 444

    (125) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (127) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AND             reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ?               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    OR              reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ]               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ;               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    }               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 125 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 330


state 445

    (127) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (129) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AND             reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ?               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    OR              reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ]               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ;               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    }               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 127 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 331


state 446

    (129) and_expression -> and_expression & equality_expression .
    (131) equality_expression -> equality_expression . EQUAL relational_expression
    (132) equality_expression -> equality_expression . NE relational_expression

    &               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    AND             reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    ?               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    OR              reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    }               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 129 (and_expression -> and_expression & equality_expression .)
    EQUAL           shift and go to state 332
    NE              shift and go to state 333


state 447

    (131) equality_expression -> equality_expression EQUAL relational_expression .
    (134) relational_expression -> relational_expression . < shift_expression
    (135) relational_expression -> relational_expression . > shift_expression
    (136) relational_expression -> relational_expression . LE shift_expression
    (137) relational_expression -> relational_expression . GE shift_expression

    EQUAL           reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    NE              reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    &               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    ^               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    |               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    AND             reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    ?               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    OR              reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    ]               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    )               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    ,               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    ;               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    }               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    :               reduce using rule 131 (equality_expression -> equality_expression EQUAL relational_expression .)
    <               shift and go to state 334
    >               shift and go to state 335
    LE              shift and go to state 336
    GE              shift and go to state 337


state 448

    (132) equality_expression -> equality_expression NE relational_expression .
    (134) relational_expression -> relational_expression . < shift_expression
    (135) relational_expression -> relational_expression . > shift_expression
    (136) relational_expression -> relational_expression . LE shift_expression
    (137) relational_expression -> relational_expression . GE shift_expression

    EQUAL           reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    NE              reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    &               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    ^               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    |               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    AND             reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    ?               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    OR              reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    ]               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    )               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    ,               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    ;               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    }               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    :               reduce using rule 132 (equality_expression -> equality_expression NE relational_expression .)
    <               shift and go to state 334
    >               shift and go to state 335
    LE              shift and go to state 336
    GE              shift and go to state 337


state 449

    (134) relational_expression -> relational_expression < shift_expression .
    (139) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (140) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    <               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    >               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    LE              reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    GE              reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    EQUAL           reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    NE              reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    &               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    ^               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    |               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    AND             reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    ?               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    OR              reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    ]               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    )               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    ,               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    ;               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    }               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    :               reduce using rule 134 (relational_expression -> relational_expression < shift_expression .)
    SHIFT_LEFT      shift and go to state 338
    SHIFT_RIGHT     shift and go to state 339


state 450

    (135) relational_expression -> relational_expression > shift_expression .
    (139) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (140) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    <               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    >               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    LE              reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    GE              reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    EQUAL           reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    NE              reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    &               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    ^               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    |               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    AND             reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    ?               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    OR              reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    ]               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    )               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    ,               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    ;               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    }               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    :               reduce using rule 135 (relational_expression -> relational_expression > shift_expression .)
    SHIFT_LEFT      shift and go to state 338
    SHIFT_RIGHT     shift and go to state 339


state 451

    (136) relational_expression -> relational_expression LE shift_expression .
    (139) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (140) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    <               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    >               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    LE              reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    GE              reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    EQUAL           reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    NE              reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    &               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    ^               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    |               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    AND             reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    ?               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    OR              reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    ]               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    )               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    ,               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    ;               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    }               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    :               reduce using rule 136 (relational_expression -> relational_expression LE shift_expression .)
    SHIFT_LEFT      shift and go to state 338
    SHIFT_RIGHT     shift and go to state 339


state 452

    (137) relational_expression -> relational_expression GE shift_expression .
    (139) shift_expression -> shift_expression . SHIFT_LEFT additive_expression
    (140) shift_expression -> shift_expression . SHIFT_RIGHT additive_expression

    <               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    >               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    LE              reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    GE              reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    EQUAL           reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    NE              reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    &               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    ^               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    |               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    AND             reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    ?               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    OR              reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    ]               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    )               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    ,               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    ;               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    }               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    :               reduce using rule 137 (relational_expression -> relational_expression GE shift_expression .)
    SHIFT_LEFT      shift and go to state 338
    SHIFT_RIGHT     shift and go to state 339


state 453

    (139) shift_expression -> shift_expression SHIFT_LEFT additive_expression .
    (142) additive_expression -> additive_expression . + multiplicative_expression
    (143) additive_expression -> additive_expression . - multiplicative_expression

    SHIFT_LEFT      reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    SHIFT_RIGHT     reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    <               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    >               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    LE              reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    GE              reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    EQUAL           reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    NE              reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    &               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    ^               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    |               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    AND             reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    ?               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    OR              reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    ]               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    )               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    ,               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    ;               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    }               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    :               reduce using rule 139 (shift_expression -> shift_expression SHIFT_LEFT additive_expression .)
    +               shift and go to state 340
    -               shift and go to state 341


state 454

    (140) shift_expression -> shift_expression SHIFT_RIGHT additive_expression .
    (142) additive_expression -> additive_expression . + multiplicative_expression
    (143) additive_expression -> additive_expression . - multiplicative_expression

    SHIFT_LEFT      reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    SHIFT_RIGHT     reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    <               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    >               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    LE              reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    GE              reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    EQUAL           reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    NE              reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    &               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    ^               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    |               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    AND             reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    ?               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    OR              reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    ]               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    )               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    ,               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    ;               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    }               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    :               reduce using rule 140 (shift_expression -> shift_expression SHIFT_RIGHT additive_expression .)
    +               shift and go to state 340
    -               shift and go to state 341


state 455

    (142) additive_expression -> additive_expression + multiplicative_expression .
    (145) multiplicative_expression -> multiplicative_expression . * cast_expression
    (146) multiplicative_expression -> multiplicative_expression . / cast_expression
    (147) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    SHIFT_LEFT      reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    SHIFT_RIGHT     reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    LE              reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    GE              reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    EQUAL           reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    NE              reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    AND             reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    ?               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    OR              reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    }               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 142 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 342
    /               shift and go to state 343
    %               shift and go to state 344


state 456

    (143) additive_expression -> additive_expression - multiplicative_expression .
    (145) multiplicative_expression -> multiplicative_expression . * cast_expression
    (146) multiplicative_expression -> multiplicative_expression . / cast_expression
    (147) multiplicative_expression -> multiplicative_expression . % cast_expression

    +               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    SHIFT_LEFT      reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    SHIFT_RIGHT     reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    LE              reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    GE              reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    EQUAL           reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    NE              reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    AND             reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    ?               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    OR              reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    }               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 143 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 342
    /               shift and go to state 343
    %               shift and go to state 344


state 457

    (145) multiplicative_expression -> multiplicative_expression * cast_expression .

    *               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    /               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    %               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    +               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    -               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SHIFT_LEFT      reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    SHIFT_RIGHT     reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    <               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    >               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    LE              reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    GE              reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    EQUAL           reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    NE              reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    &               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ^               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    |               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    AND             reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ?               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    OR              reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ]               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    )               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ,               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    ;               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    }               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)
    :               reduce using rule 145 (multiplicative_expression -> multiplicative_expression * cast_expression .)


state 458

    (146) multiplicative_expression -> multiplicative_expression / cast_expression .

    *               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    /               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    %               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    +               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    -               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SHIFT_LEFT      reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    SHIFT_RIGHT     reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    <               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    >               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    LE              reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    GE              reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    EQUAL           reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    NE              reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    &               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ^               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    |               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    AND             reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ?               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    OR              reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ]               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    )               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ,               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    ;               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    }               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)
    :               reduce using rule 146 (multiplicative_expression -> multiplicative_expression / cast_expression .)


state 459

    (147) multiplicative_expression -> multiplicative_expression % cast_expression .

    *               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    /               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    %               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    +               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    -               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SHIFT_LEFT      reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    SHIFT_RIGHT     reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    <               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    >               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    LE              reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    GE              reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    EQUAL           reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    NE              reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    &               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ^               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    |               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    AND             reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ?               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    OR              reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ]               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    )               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ,               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    ;               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    }               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)
    :               reduce using rule 147 (multiplicative_expression -> multiplicative_expression % cast_expression .)


state 460

    (149) cast_expression -> ( type_name ) . cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    cast_expression                shift and go to state 507
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 461

    (167) primary_expression -> ( expression ) .

    *               reduce using rule 167 (primary_expression -> ( expression ) .)
    /               reduce using rule 167 (primary_expression -> ( expression ) .)
    %               reduce using rule 167 (primary_expression -> ( expression ) .)
    +               reduce using rule 167 (primary_expression -> ( expression ) .)
    -               reduce using rule 167 (primary_expression -> ( expression ) .)
    SHIFT_LEFT      reduce using rule 167 (primary_expression -> ( expression ) .)
    SHIFT_RIGHT     reduce using rule 167 (primary_expression -> ( expression ) .)
    <               reduce using rule 167 (primary_expression -> ( expression ) .)
    >               reduce using rule 167 (primary_expression -> ( expression ) .)
    LE              reduce using rule 167 (primary_expression -> ( expression ) .)
    GE              reduce using rule 167 (primary_expression -> ( expression ) .)
    EQUAL           reduce using rule 167 (primary_expression -> ( expression ) .)
    NE              reduce using rule 167 (primary_expression -> ( expression ) .)
    &               reduce using rule 167 (primary_expression -> ( expression ) .)
    ^               reduce using rule 167 (primary_expression -> ( expression ) .)
    |               reduce using rule 167 (primary_expression -> ( expression ) .)
    AND             reduce using rule 167 (primary_expression -> ( expression ) .)
    ?               reduce using rule 167 (primary_expression -> ( expression ) .)
    OR              reduce using rule 167 (primary_expression -> ( expression ) .)
    ]               reduce using rule 167 (primary_expression -> ( expression ) .)
    )               reduce using rule 167 (primary_expression -> ( expression ) .)
    ,               reduce using rule 167 (primary_expression -> ( expression ) .)
    ;               reduce using rule 167 (primary_expression -> ( expression ) .)
    }               reduce using rule 167 (primary_expression -> ( expression ) .)
    :               reduce using rule 167 (primary_expression -> ( expression ) .)


state 462

    (169) expression -> expression , . constant_expression
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    constant_expression            shift and go to state 508
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 463

    (160) unary_expression -> SIZEOF ( type_name . )

    )               shift and go to state 509


state 464

    (113) parameter_list -> parameter_declaration , parameter_list .

    )               reduce using rule 113 (parameter_list -> parameter_declaration , parameter_list .)


state 465

    (188) parameter_list_definition -> parameter_declaration = constant_expression . , parameter_list_definition
    (189) parameter_list_definition -> parameter_declaration = constant_expression .

    ,               shift and go to state 510
    )               reduce using rule 189 (parameter_list_definition -> parameter_declaration = constant_expression .)


state 466

    (172) abstract_declarator -> pointer direct_abstract_declarator .
    (176) direct_abstract_declarator -> direct_abstract_declarator . [ constant_expression ]

    ,               reduce using rule 172 (abstract_declarator -> pointer direct_abstract_declarator .)
    =               reduce using rule 172 (abstract_declarator -> pointer direct_abstract_declarator .)
    )               reduce using rule 172 (abstract_declarator -> pointer direct_abstract_declarator .)
    [               shift and go to state 467


state 467

    (176) direct_abstract_declarator -> direct_abstract_declarator [ . constant_expression ]
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    constant_expression            shift and go to state 511
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 468

    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (180) direct_function_declarator -> ( . pointer direct_function_declarator )
    (181) direct_function_declarator -> ( . direct_function_declarator )
    (185) parameter_type_list_definition -> ( . )
    (186) parameter_type_list_definition -> ( . parameter_type_list_definition )
    (187) parameter_type_list_definition -> ( . parameter_list )
    (183) identifier -> ( . identifier )
    (103) direct_declarator -> ( . declarator )
    (173) direct_abstract_declarator -> ( . abstract_declarator )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (185) parameter_type_list_definition -> . ( )
    (186) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (187) parameter_type_list_definition -> . ( parameter_list )
    (111) parameter_list -> . parameter_list_definition
    (112) parameter_list -> . parameter_declaration
    (113) parameter_list -> . parameter_declaration , parameter_list
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (170) abstract_declarator -> . pointer
    (171) abstract_declarator -> . direct_abstract_declarator
    (172) abstract_declarator -> . pointer direct_abstract_declarator
    (188) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (189) parameter_list_definition -> . parameter_declaration = constant_expression
    (190) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (173) direct_abstract_declarator -> . ( abstract_declarator )
    (174) direct_abstract_declarator -> . [ ]
    (175) direct_abstract_declarator -> . [ constant_expression ]
    (176) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (177) direct_abstract_declarator -> . parameter_type_list_definition
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    )               shift and go to state 210
    *               shift and go to state 38
    (               shift and go to state 468
    ID              shift and go to state 42
    ELLIPSIS        shift and go to state 215
    [               shift and go to state 360
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    pointer                        shift and go to state 470
    direct_declarator_forlist      shift and go to state 87
    direct_function_declarator     shift and go to state 84
    parameter_type_list_definition shift and go to state 471
    parameter_list                 shift and go to state 212
    identifier                     shift and go to state 321
    declarator                     shift and go to state 86
    abstract_declarator            shift and go to state 469
    parameter_list_definition      shift and go to state 213
    parameter_declaration          shift and go to state 214
    direct_declarator              shift and go to state 44
    direct_abstract_declarator     shift and go to state 358
    declaration_specifiers         shift and go to state 216
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 469

    (173) direct_abstract_declarator -> ( abstract_declarator . )

    )               shift and go to state 512


state 470

    (106) direct_declarator_forlist -> ( pointer . direct_declarator_forlist )
    (180) direct_function_declarator -> ( pointer . direct_function_declarator )
    (94) declarator -> pointer . direct_declarator
    (170) abstract_declarator -> pointer .
    (172) abstract_declarator -> pointer . direct_abstract_declarator
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (173) direct_abstract_declarator -> . ( abstract_declarator )
    (174) direct_abstract_declarator -> . [ ]
    (175) direct_abstract_declarator -> . [ constant_expression ]
    (176) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (177) direct_abstract_declarator -> . parameter_type_list_definition
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (185) parameter_type_list_definition -> . ( )
    (186) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (187) parameter_type_list_definition -> . ( parameter_list )

    )               reduce using rule 170 (abstract_declarator -> pointer .)
    (               shift and go to state 513
    [               shift and go to state 360
    ID              shift and go to state 42

    direct_declarator_forlist      shift and go to state 180
    direct_function_declarator     shift and go to state 179
    direct_declarator              shift and go to state 73
    direct_abstract_declarator     shift and go to state 466
    identifier                     shift and go to state 175
    parameter_type_list_definition shift and go to state 361

state 471

    (186) parameter_type_list_definition -> ( parameter_type_list_definition . )
    (177) direct_abstract_declarator -> parameter_type_list_definition .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 351
    [               reduce using rule 177 (direct_abstract_declarator -> parameter_type_list_definition .)

  ! )               [ reduce using rule 177 (direct_abstract_declarator -> parameter_type_list_definition .) ]


state 472

    (174) direct_abstract_declarator -> [ ] .

    [               reduce using rule 174 (direct_abstract_declarator -> [ ] .)
    ,               reduce using rule 174 (direct_abstract_declarator -> [ ] .)
    =               reduce using rule 174 (direct_abstract_declarator -> [ ] .)
    )               reduce using rule 174 (direct_abstract_declarator -> [ ] .)


state 473

    (175) direct_abstract_declarator -> [ constant_expression . ]

    ]               shift and go to state 514


state 474

    (356) initializer -> { initializer_list } .

    ;               reduce using rule 356 (initializer -> { initializer_list } .)
    ,               reduce using rule 356 (initializer -> { initializer_list } .)
    }               reduce using rule 356 (initializer -> { initializer_list } .)


state 475

    (357) initializer -> { initializer_list , . }
    (353) initializer_list -> initializer_list , . initializer
    (354) initializer_list -> initializer_list , . designation initializer
    (355) initializer -> . assignment_expression
    (356) initializer -> . { initializer_list }
    (357) initializer -> . { initializer_list , }
    (358) designation -> . designator_list =
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (359) designator_list -> . designator
    (360) designator_list -> . designator_list designator
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (361) designator -> . [ constant_expression ]
    (362) designator -> . . ID
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 515
    {               shift and go to state 219
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    [               shift and go to state 367
    .               shift and go to state 368
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    initializer                    shift and go to state 516
    designation                    shift and go to state 517
    assignment_expression          shift and go to state 218
    designator_list                shift and go to state 365
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    designator                     shift and go to state 366
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 476

    (352) initializer_list -> designation initializer .

    }               reduce using rule 352 (initializer_list -> designation initializer .)
    ,               reduce using rule 352 (initializer_list -> designation initializer .)


state 477

    (358) designation -> designator_list = .

    {               reduce using rule 358 (designation -> designator_list = .)
    INC             reduce using rule 358 (designation -> designator_list = .)
    DEC             reduce using rule 358 (designation -> designator_list = .)
    SIZEOF          reduce using rule 358 (designation -> designator_list = .)
    &               reduce using rule 358 (designation -> designator_list = .)
    *               reduce using rule 358 (designation -> designator_list = .)
    +               reduce using rule 358 (designation -> designator_list = .)
    -               reduce using rule 358 (designation -> designator_list = .)
    ~               reduce using rule 358 (designation -> designator_list = .)
    !               reduce using rule 358 (designation -> designator_list = .)
    (               reduce using rule 358 (designation -> designator_list = .)
    ID              reduce using rule 358 (designation -> designator_list = .)
    CONSTANCE       reduce using rule 358 (designation -> designator_list = .)
    STRING_LITERAL  reduce using rule 358 (designation -> designator_list = .)


state 478

    (360) designator_list -> designator_list designator .

    =               reduce using rule 360 (designator_list -> designator_list designator .)
    [               reduce using rule 360 (designator_list -> designator_list designator .)
    .               reduce using rule 360 (designator_list -> designator_list designator .)


state 479

    (361) designator -> [ constant_expression . ]

    ]               shift and go to state 518


state 480

    (362) designator -> . ID .

    =               reduce using rule 362 (designator -> . ID .)
    [               reduce using rule 362 (designator -> . ID .)
    .               reduce using rule 362 (designator -> . ID .)


state 481

    (90) struct_declarator_list -> struct_declarator_list , struct_declarator .

    ;               reduce using rule 90 (struct_declarator_list -> struct_declarator_list , struct_declarator .)
    ,               reduce using rule 90 (struct_declarator_list -> struct_declarator_list , struct_declarator .)


state 482

    (93) struct_declarator -> declarator : constant_expression .

    ;               reduce using rule 93 (struct_declarator -> declarator : constant_expression .)
    ,               reduce using rule 93 (struct_declarator -> declarator : constant_expression .)


state 483

    (69) enum_specifier -> ENUM identifier { enumerator_list , } .

    TYPEDEF         reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    EXTERN          reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    STATIC          reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    AUTO            reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    REGISTER        reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    CONST           reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    VOLATILE        reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    RESTRICT        reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    ;               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    *               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    (               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    ID              reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    [               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    ,               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    =               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    )               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)
    :               reduce using rule 69 (enum_specifier -> ENUM identifier { enumerator_list , } .)


state 484

    (271) postfix_expression_v -> identifier ( argument_expression_list ) .

    [               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    .               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    PTR             reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    =               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_MUL          reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_DIV          reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_MOD          reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_PLUS         reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_SUB          reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_SL           reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_SR           reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_AND          reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_XOR          reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AO_OR           reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    *               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    /               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    %               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    +               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    -               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    SHIFT_LEFT      reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    SHIFT_RIGHT     reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    <               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    >               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    LE              reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    GE              reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    EQUAL           reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    NE              reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    &               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    ^               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    |               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    AND             reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    ?               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    OR              reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    ;               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    ,               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    )               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    }               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)
    :               reduce using rule 271 (postfix_expression_v -> identifier ( argument_expression_list ) .)


state 485

    (350) argument_expression_list -> argument_expression_list , . assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    assignment_expression          shift and go to state 519
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 486

    (284) selection_statement -> IF ( expression_variable ) . statement ELSE statement
    (285) selection_statement -> IF ( expression_variable ) . statement
    (197) statement -> . labeled_statement
    (198) statement -> . compound_statement
    (199) statement -> . expression_statement
    (200) statement -> . selection_statement
    (201) statement -> . iteration_statement
    (202) statement -> . jump_statement
    (203) labeled_statement -> . identifier :
    (191) compound_statement -> . { }
    (192) compound_statement -> . { block_item_list }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (284) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (285) selection_statement -> . IF ( expression_variable ) statement
    (286) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (341) jump_statement -> . GOTO ID ;
    (342) jump_statement -> . RETURN ;
    (343) jump_statement -> . RETURN expression_variable ;
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    RETURN          shift and go to state 140
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 132
    statement                      shift and go to state 520
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 487

    (253) cast_expression_v -> ( type_name ) cast_expression_v .

    *               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    /               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    %               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    +               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    -               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    SHIFT_LEFT      reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    SHIFT_RIGHT     reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    <               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    >               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    LE              reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    GE              reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    EQUAL           reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    NE              reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    &               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    ^               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    |               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    AND             reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    ?               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    OR              reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    ;               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    ,               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    )               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    =               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    AO_MUL          reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    AO_DIV          reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    AO_MOD          reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    AO_PLUS         reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    AO_SUB          reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    AO_SL           reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    AO_SR           reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    AO_AND          reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    AO_XOR          reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    AO_OR           reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    }               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)
    :               reduce using rule 253 (cast_expression_v -> ( type_name ) cast_expression_v .)


state 488

    (153) brace_pointer -> * type_qualifier_list .
    (156) brace_pointer -> * type_qualifier_list . brace_pointer
    (101) type_qualifier_list -> type_qualifier_list . type_qualifier
    (152) brace_pointer -> . *
    (153) brace_pointer -> . * type_qualifier_list
    (154) brace_pointer -> . ( brace_pointer )
    (155) brace_pointer -> . * brace_pointer
    (156) brace_pointer -> . * type_qualifier_list brace_pointer
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT

    )               reduce using rule 153 (brace_pointer -> * type_qualifier_list .)
    *               shift and go to state 390
    (               shift and go to state 391
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28

    brace_pointer                  shift and go to state 521
    type_qualifier                 shift and go to state 177

state 489

    (155) brace_pointer -> * brace_pointer .

    )               reduce using rule 155 (brace_pointer -> * brace_pointer .)


state 490

    (154) brace_pointer -> ( brace_pointer . )

    )               shift and go to state 522


state 491

    (286) selection_statement -> SWITCH ( expression_variable ) . statement_switch
    (296) statement_switch -> . labeled_statement_switch
    (297) statement_switch -> . compound_statement_switch
    (298) statement_switch -> . expression_statement
    (299) statement_switch -> . selection_statement
    (300) statement_switch -> . iteration_statement_switch
    (301) statement_switch -> . jump_statement
    (302) labeled_statement_switch -> . ID :
    (303) labeled_statement_switch -> . CASE constant_expression : statement
    (304) labeled_statement_switch -> . DEFAULT : statement
    (290) compound_statement_switch -> . { }
    (291) compound_statement_switch -> . { block_item_list_switch }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (284) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (285) selection_statement -> . IF ( expression_variable ) statement
    (286) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (323) iteration_statement_switch -> . WHILE ( expression_variable ) statement_while_switch
    (324) iteration_statement_switch -> . DO statement_while_switch WHILE ( expression_variable ) ;
    (325) iteration_statement_switch -> . FOR ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> . FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> . FOR ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> . FOR ( declaration expression_statement expression_variable ) statement_while_switch
    (341) jump_statement -> . GOTO ID ;
    (342) jump_statement -> . RETURN ;
    (343) jump_statement -> . RETURN expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ID              shift and go to state 530
    CASE            shift and go to state 531
    DEFAULT         shift and go to state 532
    {               shift and go to state 533
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 534
    DO              shift and go to state 535
    FOR             shift and go to state 536
    GOTO            shift and go to state 139
    RETURN          shift and go to state 140
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 132
    statement_switch               shift and go to state 523
    labeled_statement_switch       shift and go to state 524
    compound_statement_switch      shift and go to state 525
    expression_statement           shift and go to state 526
    selection_statement            shift and go to state 527
    iteration_statement_switch     shift and go to state 528
    jump_statement                 shift and go to state 529
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 492

    (317) iteration_statement -> WHILE ( expression_variable ) . statement_while
    (311) statement_while -> . labeled_statement
    (312) statement_while -> . compound_statement_while
    (313) statement_while -> . expression_statement
    (314) statement_while -> . selection_statement_while
    (315) statement_while -> . iteration_statement
    (316) statement_while -> . jump_statement_while
    (203) labeled_statement -> . identifier :
    (305) compound_statement_while -> . { }
    (306) compound_statement_while -> . { block_item_list_while }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 259
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 132
    statement_while                shift and go to state 537
    labeled_statement              shift and go to state 253
    compound_statement_while       shift and go to state 254
    expression_statement           shift and go to state 255
    selection_statement_while      shift and go to state 256
    iteration_statement            shift and go to state 257
    jump_statement_while           shift and go to state 258
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 493

    (318) iteration_statement -> DO statement_while WHILE ( . expression_variable ) ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 538
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 494

    (306) compound_statement_while -> { block_item_list_while } .

    WHILE           reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    }               reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    {               reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    ;               reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    IF              reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    SWITCH          reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    DO              reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    FOR             reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    GOTO            reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    CONTINUE        reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    BREAK           reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    RETURN          reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    TYPEDEF         reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    EXTERN          reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    STATIC          reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    AUTO            reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    REGISTER        reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    VOID            reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    CHAR            reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    SHORT           reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    INT             reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    LONG            reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    FLOAT           reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    DOUBLE          reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    SIGNED          reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    UNSIGNED        reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    BOOL            reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    CONST           reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    VOLATILE        reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    RESTRICT        reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    (               reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    ID              reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    ENUM            reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    STRUCT          reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    UNION           reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    INC             reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    DEC             reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    SIZEOF          reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    &               reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    *               reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    +               reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    -               reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    ~               reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    !               reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    CONSTANCE       reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    STRING_LITERAL  reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    ELSE            reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    CASE            reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)
    DEFAULT         reduce using rule 306 (compound_statement_while -> { block_item_list_while } .)


state 495

    (308) block_item_list_while -> block_item_list_while block_item_while .

    }               reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    {               reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    ;               reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    IF              reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    SWITCH          reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    WHILE           reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    DO              reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    FOR             reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    GOTO            reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    CONTINUE        reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    BREAK           reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    RETURN          reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    TYPEDEF         reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    EXTERN          reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    STATIC          reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    AUTO            reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    REGISTER        reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    VOID            reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    CHAR            reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    SHORT           reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    INT             reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    LONG            reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    FLOAT           reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    DOUBLE          reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    SIGNED          reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    UNSIGNED        reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    BOOL            reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    CONST           reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    VOLATILE        reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    RESTRICT        reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    (               reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    ID              reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    ENUM            reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    STRUCT          reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    UNION           reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    INC             reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    DEC             reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    SIZEOF          reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    &               reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    *               reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    +               reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    -               reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    ~               reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    !               reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    CONSTANCE       reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)
    STRING_LITERAL  reduce using rule 308 (block_item_list_while -> block_item_list_while block_item_while .)


state 496

    (287) selection_statement_while -> IF ( expression_variable . ) statement_while ELSE statement_while
    (288) selection_statement_while -> IF ( expression_variable . ) statement_while
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 539
    ,               shift and go to state 243


state 497

    (289) selection_statement_while -> SWITCH ( expression_variable . ) statement_while_switch
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 540
    ,               shift and go to state 243


state 498

    (344) jump_statement_while -> GOTO ID ; .

    WHILE           reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    }               reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    {               reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    ;               reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    IF              reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    SWITCH          reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    DO              reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    FOR             reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    GOTO            reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    CONTINUE        reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    BREAK           reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    RETURN          reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    TYPEDEF         reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    EXTERN          reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    STATIC          reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    AUTO            reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    REGISTER        reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    VOID            reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    CHAR            reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    SHORT           reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    INT             reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    LONG            reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    FLOAT           reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    DOUBLE          reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    SIGNED          reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    UNSIGNED        reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    BOOL            reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    CONST           reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    VOLATILE        reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    RESTRICT        reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    (               reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    ID              reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    ENUM            reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    STRUCT          reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    UNION           reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    INC             reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    DEC             reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    SIZEOF          reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    &               reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    *               reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    +               reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    -               reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    ~               reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    !               reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    CONSTANCE       reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    STRING_LITERAL  reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    ELSE            reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    CASE            reduce using rule 344 (jump_statement_while -> GOTO ID ; .)
    DEFAULT         reduce using rule 344 (jump_statement_while -> GOTO ID ; .)


state 499

    (348) jump_statement_while -> RETURN expression_variable ; .

    WHILE           reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    }               reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    {               reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    ;               reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    IF              reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    SWITCH          reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    DO              reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    FOR             reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    GOTO            reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    CONTINUE        reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    BREAK           reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    RETURN          reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    TYPEDEF         reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    EXTERN          reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    STATIC          reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    AUTO            reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    REGISTER        reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    VOID            reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    CHAR            reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    SHORT           reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    INT             reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    LONG            reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    FLOAT           reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    DOUBLE          reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    SIGNED          reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    UNSIGNED        reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    BOOL            reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    CONST           reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    VOLATILE        reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    RESTRICT        reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    (               reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    ID              reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    ENUM            reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    STRUCT          reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    UNION           reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    INC             reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    DEC             reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    SIZEOF          reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    &               reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    *               reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    +               reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    -               reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    ~               reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    !               reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    CONSTANCE       reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    STRING_LITERAL  reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    ELSE            reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    CASE            reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)
    DEFAULT         reduce using rule 348 (jump_statement_while -> RETURN expression_variable ; .)


state 500

    (319) iteration_statement -> FOR ( expression_statement expression_statement . ) statement_while
    (320) iteration_statement -> FOR ( expression_statement expression_statement . expression_variable ) statement_while
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    )               shift and go to state 541
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 542
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 501

    (321) iteration_statement -> FOR ( declaration expression_statement . ) statement_while
    (322) iteration_statement -> FOR ( declaration expression_statement . expression_variable ) statement_while
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    )               shift and go to state 543
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 544
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 502

    (222) conditional_expression_v -> logical_or_expression_v ? expression_variable : . conditional_expression_v
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID

    (               shift and go to state 293
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170
    ID              shift and go to state 42

    logical_or_expression_v        shift and go to state 144
    conditional_expression_v       shift and go to state 545
    logical_and_expression_v       shift and go to state 151
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    cast_expression_v              shift and go to state 149
    unary_expression_v             shift and go to state 292
    unary_expression_v_constance   shift and go to state 167
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    primary_expression_v           shift and go to state 168
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220

state 503

    (269) postfix_expression_v -> postfix_expression_v [ expression ] .

    [               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    .               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    PTR             reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    =               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_MUL          reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_DIV          reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_MOD          reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_PLUS         reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_SUB          reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_SL           reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_SR           reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_AND          reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_XOR          reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AO_OR           reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    *               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    /               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    %               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    +               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    -               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    SHIFT_LEFT      reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    SHIFT_RIGHT     reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    <               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    >               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    LE              reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    GE              reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    EQUAL           reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    NE              reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    &               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    ^               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    |               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    AND             reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    ?               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    OR              reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    ;               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    ,               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    )               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    }               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)
    :               reduce using rule 269 (postfix_expression_v -> postfix_expression_v [ expression ] .)


state 504

    (256) unary_expression_v_constance -> SIZEOF ( type_name ) .

    *               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    /               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    %               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    +               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    -               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    SHIFT_LEFT      reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    SHIFT_RIGHT     reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    <               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    >               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    LE              reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    GE              reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    EQUAL           reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    NE              reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    &               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    ^               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    |               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    AND             reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    ?               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    OR              reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    ;               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    ,               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    )               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    =               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    AO_MUL          reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    AO_DIV          reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    AO_MOD          reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    AO_PLUS         reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    AO_SUB          reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    AO_SL           reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    AO_SR           reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    AO_AND          reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    AO_XOR          reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    AO_OR           reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    }               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)
    :               reduce using rule 256 (unary_expression_v_constance -> SIZEOF ( type_name ) .)


state 505

    (278) postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .

    INC             reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    DEC             reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    [               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    .               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    PTR             reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    =               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_MUL          reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_DIV          reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_MOD          reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_PLUS         reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_SUB          reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_SL           reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_SR           reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_AND          reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_XOR          reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AO_OR           reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    *               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    /               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    %               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    +               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    -               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    SHIFT_LEFT      reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    SHIFT_RIGHT     reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    <               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    >               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    LE              reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    GE              reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    EQUAL           reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    NE              reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    &               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    ^               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    |               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    AND             reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    ?               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    OR              reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    ;               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    ,               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    )               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    }               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)
    :               reduce using rule 278 (postfix_expression_v_no_func -> postfix_expression_v_no_func [ expression ] .)


state 506

    (119) conditional_expression -> logical_or_expression ? expression : . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    logical_or_expression          shift and go to state 188
    conditional_expression         shift and go to state 546
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 507

    (149) cast_expression -> ( type_name ) cast_expression .

    *               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    /               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    %               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    +               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    -               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    SHIFT_LEFT      reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    SHIFT_RIGHT     reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    <               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    >               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    LE              reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    GE              reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    EQUAL           reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    NE              reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    &               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    ^               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    |               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    AND             reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    ?               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    OR              reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    ]               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    )               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    ,               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    ;               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    }               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)
    :               reduce using rule 149 (cast_expression -> ( type_name ) cast_expression .)


state 508

    (169) expression -> expression , constant_expression .

    )               reduce using rule 169 (expression -> expression , constant_expression .)
    ,               reduce using rule 169 (expression -> expression , constant_expression .)
    ]               reduce using rule 169 (expression -> expression , constant_expression .)
    :               reduce using rule 169 (expression -> expression , constant_expression .)


state 509

    (160) unary_expression -> SIZEOF ( type_name ) .

    *               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    /               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    %               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    +               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    -               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    SHIFT_LEFT      reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    SHIFT_RIGHT     reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    <               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    >               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    LE              reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    GE              reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    EQUAL           reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    NE              reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    &               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    ^               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    |               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    AND             reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    ?               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    OR              reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    ]               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    )               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    ,               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    ;               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    }               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)
    :               reduce using rule 160 (unary_expression -> SIZEOF ( type_name ) .)


state 510

    (188) parameter_list_definition -> parameter_declaration = constant_expression , . parameter_list_definition
    (188) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (189) parameter_list_definition -> . parameter_declaration = constant_expression
    (190) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    ELLIPSIS        shift and go to state 215
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    parameter_declaration          shift and go to state 547
    parameter_list_definition      shift and go to state 548
    declaration_specifiers         shift and go to state 216
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 511

    (176) direct_abstract_declarator -> direct_abstract_declarator [ constant_expression . ]

    ]               shift and go to state 549


state 512

    (173) direct_abstract_declarator -> ( abstract_declarator ) .

    [               reduce using rule 173 (direct_abstract_declarator -> ( abstract_declarator ) .)
    ,               reduce using rule 173 (direct_abstract_declarator -> ( abstract_declarator ) .)
    =               reduce using rule 173 (direct_abstract_declarator -> ( abstract_declarator ) .)
    )               reduce using rule 173 (direct_abstract_declarator -> ( abstract_declarator ) .)


state 513

    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (180) direct_function_declarator -> ( . pointer direct_function_declarator )
    (181) direct_function_declarator -> ( . direct_function_declarator )
    (103) direct_declarator -> ( . declarator )
    (173) direct_abstract_declarator -> ( . abstract_declarator )
    (183) identifier -> ( . identifier )
    (185) parameter_type_list_definition -> ( . )
    (186) parameter_type_list_definition -> ( . parameter_type_list_definition )
    (187) parameter_type_list_definition -> ( . parameter_list )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (170) abstract_declarator -> . pointer
    (171) abstract_declarator -> . direct_abstract_declarator
    (172) abstract_declarator -> . pointer direct_abstract_declarator
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (185) parameter_type_list_definition -> . ( )
    (186) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (187) parameter_type_list_definition -> . ( parameter_list )
    (111) parameter_list -> . parameter_list_definition
    (112) parameter_list -> . parameter_declaration
    (113) parameter_list -> . parameter_declaration , parameter_list
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (173) direct_abstract_declarator -> . ( abstract_declarator )
    (174) direct_abstract_declarator -> . [ ]
    (175) direct_abstract_declarator -> . [ constant_expression ]
    (176) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (177) direct_abstract_declarator -> . parameter_type_list_definition
    (188) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (189) parameter_list_definition -> . parameter_declaration = constant_expression
    (190) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    )               shift and go to state 210
    *               shift and go to state 38
    (               shift and go to state 550
    ID              shift and go to state 42
    [               shift and go to state 360
    ELLIPSIS        shift and go to state 215
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    pointer                        shift and go to state 470
    direct_declarator_forlist      shift and go to state 87
    direct_function_declarator     shift and go to state 84
    declarator                     shift and go to state 86
    abstract_declarator            shift and go to state 469
    identifier                     shift and go to state 321
    parameter_type_list_definition shift and go to state 471
    parameter_list                 shift and go to state 212
    direct_declarator              shift and go to state 44
    direct_abstract_declarator     shift and go to state 358
    parameter_list_definition      shift and go to state 213
    parameter_declaration          shift and go to state 214
    declaration_specifiers         shift and go to state 216
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 514

    (175) direct_abstract_declarator -> [ constant_expression ] .

    [               reduce using rule 175 (direct_abstract_declarator -> [ constant_expression ] .)
    ,               reduce using rule 175 (direct_abstract_declarator -> [ constant_expression ] .)
    =               reduce using rule 175 (direct_abstract_declarator -> [ constant_expression ] .)
    )               reduce using rule 175 (direct_abstract_declarator -> [ constant_expression ] .)


state 515

    (357) initializer -> { initializer_list , } .

    ;               reduce using rule 357 (initializer -> { initializer_list , } .)
    ,               reduce using rule 357 (initializer -> { initializer_list , } .)
    }               reduce using rule 357 (initializer -> { initializer_list , } .)


state 516

    (353) initializer_list -> initializer_list , initializer .

    }               reduce using rule 353 (initializer_list -> initializer_list , initializer .)
    ,               reduce using rule 353 (initializer_list -> initializer_list , initializer .)


state 517

    (354) initializer_list -> initializer_list , designation . initializer
    (355) initializer -> . assignment_expression
    (356) initializer -> . { initializer_list }
    (357) initializer -> . { initializer_list , }
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 219
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    initializer                    shift and go to state 551
    assignment_expression          shift and go to state 218
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 518

    (361) designator -> [ constant_expression ] .

    =               reduce using rule 361 (designator -> [ constant_expression ] .)
    [               reduce using rule 361 (designator -> [ constant_expression ] .)
    .               reduce using rule 361 (designator -> [ constant_expression ] .)


state 519

    (350) argument_expression_list -> argument_expression_list , assignment_expression .

    )               reduce using rule 350 (argument_expression_list -> argument_expression_list , assignment_expression .)
    ,               reduce using rule 350 (argument_expression_list -> argument_expression_list , assignment_expression .)


state 520

    (284) selection_statement -> IF ( expression_variable ) statement . ELSE statement
    (285) selection_statement -> IF ( expression_variable ) statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 552
    }               reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    {               reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    ;               reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    IF              reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    SWITCH          reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    WHILE           reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    DO              reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    FOR             reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    GOTO            reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    RETURN          reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    TYPEDEF         reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    EXTERN          reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    STATIC          reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    AUTO            reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    REGISTER        reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    VOID            reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    CHAR            reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    SHORT           reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    INT             reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    LONG            reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    FLOAT           reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    DOUBLE          reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    SIGNED          reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    UNSIGNED        reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    BOOL            reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    CONST           reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    VOLATILE        reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    RESTRICT        reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    (               reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    ID              reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    ENUM            reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    STRUCT          reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    UNION           reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    INC             reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    DEC             reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    SIZEOF          reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    &               reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    *               reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    +               reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    -               reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    ~               reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    !               reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    CONSTANCE       reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    STRING_LITERAL  reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    CASE            reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    DEFAULT         reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    CONTINUE        reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)
    BREAK           reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .)

  ! ELSE            [ reduce using rule 285 (selection_statement -> IF ( expression_variable ) statement .) ]


state 521

    (156) brace_pointer -> * type_qualifier_list brace_pointer .

    )               reduce using rule 156 (brace_pointer -> * type_qualifier_list brace_pointer .)


state 522

    (154) brace_pointer -> ( brace_pointer ) .

    )               reduce using rule 154 (brace_pointer -> ( brace_pointer ) .)


state 523

    (286) selection_statement -> SWITCH ( expression_variable ) statement_switch .

    }               reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    {               reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    ;               reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    IF              reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    SWITCH          reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    WHILE           reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    DO              reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    FOR             reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    GOTO            reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    RETURN          reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    TYPEDEF         reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    EXTERN          reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    STATIC          reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    AUTO            reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    REGISTER        reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    VOID            reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    CHAR            reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    SHORT           reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    INT             reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    LONG            reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    FLOAT           reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    DOUBLE          reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    SIGNED          reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    UNSIGNED        reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    BOOL            reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    CONST           reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    VOLATILE        reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    RESTRICT        reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    (               reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    ID              reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    ENUM            reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    STRUCT          reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    UNION           reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    INC             reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    DEC             reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    SIZEOF          reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    &               reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    *               reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    +               reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    -               reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    ~               reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    !               reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    CONSTANCE       reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    STRING_LITERAL  reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    ELSE            reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    CASE            reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    DEFAULT         reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    CONTINUE        reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)
    BREAK           reduce using rule 286 (selection_statement -> SWITCH ( expression_variable ) statement_switch .)


state 524

    (296) statement_switch -> labeled_statement_switch .

    ELSE            reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    }               reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    {               reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    ;               reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    IF              reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    SWITCH          reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    WHILE           reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    DO              reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    FOR             reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    GOTO            reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    RETURN          reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    TYPEDEF         reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    EXTERN          reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    STATIC          reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    AUTO            reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    REGISTER        reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    VOID            reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    CHAR            reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    SHORT           reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    INT             reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    LONG            reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    FLOAT           reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    DOUBLE          reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    SIGNED          reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    UNSIGNED        reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    BOOL            reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    CONST           reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    VOLATILE        reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    RESTRICT        reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    (               reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    ID              reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    ENUM            reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    STRUCT          reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    UNION           reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    INC             reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    DEC             reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    SIZEOF          reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    &               reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    *               reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    +               reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    -               reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    ~               reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    !               reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    CONSTANCE       reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    STRING_LITERAL  reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    CASE            reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    DEFAULT         reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    CONTINUE        reduce using rule 296 (statement_switch -> labeled_statement_switch .)
    BREAK           reduce using rule 296 (statement_switch -> labeled_statement_switch .)


state 525

    (297) statement_switch -> compound_statement_switch .

    ELSE            reduce using rule 297 (statement_switch -> compound_statement_switch .)
    }               reduce using rule 297 (statement_switch -> compound_statement_switch .)
    {               reduce using rule 297 (statement_switch -> compound_statement_switch .)
    ;               reduce using rule 297 (statement_switch -> compound_statement_switch .)
    IF              reduce using rule 297 (statement_switch -> compound_statement_switch .)
    SWITCH          reduce using rule 297 (statement_switch -> compound_statement_switch .)
    WHILE           reduce using rule 297 (statement_switch -> compound_statement_switch .)
    DO              reduce using rule 297 (statement_switch -> compound_statement_switch .)
    FOR             reduce using rule 297 (statement_switch -> compound_statement_switch .)
    GOTO            reduce using rule 297 (statement_switch -> compound_statement_switch .)
    RETURN          reduce using rule 297 (statement_switch -> compound_statement_switch .)
    TYPEDEF         reduce using rule 297 (statement_switch -> compound_statement_switch .)
    EXTERN          reduce using rule 297 (statement_switch -> compound_statement_switch .)
    STATIC          reduce using rule 297 (statement_switch -> compound_statement_switch .)
    AUTO            reduce using rule 297 (statement_switch -> compound_statement_switch .)
    REGISTER        reduce using rule 297 (statement_switch -> compound_statement_switch .)
    VOID            reduce using rule 297 (statement_switch -> compound_statement_switch .)
    CHAR            reduce using rule 297 (statement_switch -> compound_statement_switch .)
    SHORT           reduce using rule 297 (statement_switch -> compound_statement_switch .)
    INT             reduce using rule 297 (statement_switch -> compound_statement_switch .)
    LONG            reduce using rule 297 (statement_switch -> compound_statement_switch .)
    FLOAT           reduce using rule 297 (statement_switch -> compound_statement_switch .)
    DOUBLE          reduce using rule 297 (statement_switch -> compound_statement_switch .)
    SIGNED          reduce using rule 297 (statement_switch -> compound_statement_switch .)
    UNSIGNED        reduce using rule 297 (statement_switch -> compound_statement_switch .)
    BOOL            reduce using rule 297 (statement_switch -> compound_statement_switch .)
    CONST           reduce using rule 297 (statement_switch -> compound_statement_switch .)
    VOLATILE        reduce using rule 297 (statement_switch -> compound_statement_switch .)
    RESTRICT        reduce using rule 297 (statement_switch -> compound_statement_switch .)
    (               reduce using rule 297 (statement_switch -> compound_statement_switch .)
    ID              reduce using rule 297 (statement_switch -> compound_statement_switch .)
    ENUM            reduce using rule 297 (statement_switch -> compound_statement_switch .)
    STRUCT          reduce using rule 297 (statement_switch -> compound_statement_switch .)
    UNION           reduce using rule 297 (statement_switch -> compound_statement_switch .)
    INC             reduce using rule 297 (statement_switch -> compound_statement_switch .)
    DEC             reduce using rule 297 (statement_switch -> compound_statement_switch .)
    SIZEOF          reduce using rule 297 (statement_switch -> compound_statement_switch .)
    &               reduce using rule 297 (statement_switch -> compound_statement_switch .)
    *               reduce using rule 297 (statement_switch -> compound_statement_switch .)
    +               reduce using rule 297 (statement_switch -> compound_statement_switch .)
    -               reduce using rule 297 (statement_switch -> compound_statement_switch .)
    ~               reduce using rule 297 (statement_switch -> compound_statement_switch .)
    !               reduce using rule 297 (statement_switch -> compound_statement_switch .)
    CONSTANCE       reduce using rule 297 (statement_switch -> compound_statement_switch .)
    STRING_LITERAL  reduce using rule 297 (statement_switch -> compound_statement_switch .)
    CASE            reduce using rule 297 (statement_switch -> compound_statement_switch .)
    DEFAULT         reduce using rule 297 (statement_switch -> compound_statement_switch .)
    CONTINUE        reduce using rule 297 (statement_switch -> compound_statement_switch .)
    BREAK           reduce using rule 297 (statement_switch -> compound_statement_switch .)


state 526

    (298) statement_switch -> expression_statement .

    ELSE            reduce using rule 298 (statement_switch -> expression_statement .)
    }               reduce using rule 298 (statement_switch -> expression_statement .)
    {               reduce using rule 298 (statement_switch -> expression_statement .)
    ;               reduce using rule 298 (statement_switch -> expression_statement .)
    IF              reduce using rule 298 (statement_switch -> expression_statement .)
    SWITCH          reduce using rule 298 (statement_switch -> expression_statement .)
    WHILE           reduce using rule 298 (statement_switch -> expression_statement .)
    DO              reduce using rule 298 (statement_switch -> expression_statement .)
    FOR             reduce using rule 298 (statement_switch -> expression_statement .)
    GOTO            reduce using rule 298 (statement_switch -> expression_statement .)
    RETURN          reduce using rule 298 (statement_switch -> expression_statement .)
    TYPEDEF         reduce using rule 298 (statement_switch -> expression_statement .)
    EXTERN          reduce using rule 298 (statement_switch -> expression_statement .)
    STATIC          reduce using rule 298 (statement_switch -> expression_statement .)
    AUTO            reduce using rule 298 (statement_switch -> expression_statement .)
    REGISTER        reduce using rule 298 (statement_switch -> expression_statement .)
    VOID            reduce using rule 298 (statement_switch -> expression_statement .)
    CHAR            reduce using rule 298 (statement_switch -> expression_statement .)
    SHORT           reduce using rule 298 (statement_switch -> expression_statement .)
    INT             reduce using rule 298 (statement_switch -> expression_statement .)
    LONG            reduce using rule 298 (statement_switch -> expression_statement .)
    FLOAT           reduce using rule 298 (statement_switch -> expression_statement .)
    DOUBLE          reduce using rule 298 (statement_switch -> expression_statement .)
    SIGNED          reduce using rule 298 (statement_switch -> expression_statement .)
    UNSIGNED        reduce using rule 298 (statement_switch -> expression_statement .)
    BOOL            reduce using rule 298 (statement_switch -> expression_statement .)
    CONST           reduce using rule 298 (statement_switch -> expression_statement .)
    VOLATILE        reduce using rule 298 (statement_switch -> expression_statement .)
    RESTRICT        reduce using rule 298 (statement_switch -> expression_statement .)
    (               reduce using rule 298 (statement_switch -> expression_statement .)
    ID              reduce using rule 298 (statement_switch -> expression_statement .)
    ENUM            reduce using rule 298 (statement_switch -> expression_statement .)
    STRUCT          reduce using rule 298 (statement_switch -> expression_statement .)
    UNION           reduce using rule 298 (statement_switch -> expression_statement .)
    INC             reduce using rule 298 (statement_switch -> expression_statement .)
    DEC             reduce using rule 298 (statement_switch -> expression_statement .)
    SIZEOF          reduce using rule 298 (statement_switch -> expression_statement .)
    &               reduce using rule 298 (statement_switch -> expression_statement .)
    *               reduce using rule 298 (statement_switch -> expression_statement .)
    +               reduce using rule 298 (statement_switch -> expression_statement .)
    -               reduce using rule 298 (statement_switch -> expression_statement .)
    ~               reduce using rule 298 (statement_switch -> expression_statement .)
    !               reduce using rule 298 (statement_switch -> expression_statement .)
    CONSTANCE       reduce using rule 298 (statement_switch -> expression_statement .)
    STRING_LITERAL  reduce using rule 298 (statement_switch -> expression_statement .)
    CASE            reduce using rule 298 (statement_switch -> expression_statement .)
    DEFAULT         reduce using rule 298 (statement_switch -> expression_statement .)
    CONTINUE        reduce using rule 298 (statement_switch -> expression_statement .)
    BREAK           reduce using rule 298 (statement_switch -> expression_statement .)


state 527

    (299) statement_switch -> selection_statement .

    ELSE            reduce using rule 299 (statement_switch -> selection_statement .)
    }               reduce using rule 299 (statement_switch -> selection_statement .)
    {               reduce using rule 299 (statement_switch -> selection_statement .)
    ;               reduce using rule 299 (statement_switch -> selection_statement .)
    IF              reduce using rule 299 (statement_switch -> selection_statement .)
    SWITCH          reduce using rule 299 (statement_switch -> selection_statement .)
    WHILE           reduce using rule 299 (statement_switch -> selection_statement .)
    DO              reduce using rule 299 (statement_switch -> selection_statement .)
    FOR             reduce using rule 299 (statement_switch -> selection_statement .)
    GOTO            reduce using rule 299 (statement_switch -> selection_statement .)
    RETURN          reduce using rule 299 (statement_switch -> selection_statement .)
    TYPEDEF         reduce using rule 299 (statement_switch -> selection_statement .)
    EXTERN          reduce using rule 299 (statement_switch -> selection_statement .)
    STATIC          reduce using rule 299 (statement_switch -> selection_statement .)
    AUTO            reduce using rule 299 (statement_switch -> selection_statement .)
    REGISTER        reduce using rule 299 (statement_switch -> selection_statement .)
    VOID            reduce using rule 299 (statement_switch -> selection_statement .)
    CHAR            reduce using rule 299 (statement_switch -> selection_statement .)
    SHORT           reduce using rule 299 (statement_switch -> selection_statement .)
    INT             reduce using rule 299 (statement_switch -> selection_statement .)
    LONG            reduce using rule 299 (statement_switch -> selection_statement .)
    FLOAT           reduce using rule 299 (statement_switch -> selection_statement .)
    DOUBLE          reduce using rule 299 (statement_switch -> selection_statement .)
    SIGNED          reduce using rule 299 (statement_switch -> selection_statement .)
    UNSIGNED        reduce using rule 299 (statement_switch -> selection_statement .)
    BOOL            reduce using rule 299 (statement_switch -> selection_statement .)
    CONST           reduce using rule 299 (statement_switch -> selection_statement .)
    VOLATILE        reduce using rule 299 (statement_switch -> selection_statement .)
    RESTRICT        reduce using rule 299 (statement_switch -> selection_statement .)
    (               reduce using rule 299 (statement_switch -> selection_statement .)
    ID              reduce using rule 299 (statement_switch -> selection_statement .)
    ENUM            reduce using rule 299 (statement_switch -> selection_statement .)
    STRUCT          reduce using rule 299 (statement_switch -> selection_statement .)
    UNION           reduce using rule 299 (statement_switch -> selection_statement .)
    INC             reduce using rule 299 (statement_switch -> selection_statement .)
    DEC             reduce using rule 299 (statement_switch -> selection_statement .)
    SIZEOF          reduce using rule 299 (statement_switch -> selection_statement .)
    &               reduce using rule 299 (statement_switch -> selection_statement .)
    *               reduce using rule 299 (statement_switch -> selection_statement .)
    +               reduce using rule 299 (statement_switch -> selection_statement .)
    -               reduce using rule 299 (statement_switch -> selection_statement .)
    ~               reduce using rule 299 (statement_switch -> selection_statement .)
    !               reduce using rule 299 (statement_switch -> selection_statement .)
    CONSTANCE       reduce using rule 299 (statement_switch -> selection_statement .)
    STRING_LITERAL  reduce using rule 299 (statement_switch -> selection_statement .)
    CASE            reduce using rule 299 (statement_switch -> selection_statement .)
    DEFAULT         reduce using rule 299 (statement_switch -> selection_statement .)
    CONTINUE        reduce using rule 299 (statement_switch -> selection_statement .)
    BREAK           reduce using rule 299 (statement_switch -> selection_statement .)


state 528

    (300) statement_switch -> iteration_statement_switch .

    ELSE            reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    }               reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    {               reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    ;               reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    IF              reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    SWITCH          reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    WHILE           reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    DO              reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    FOR             reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    GOTO            reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    RETURN          reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    TYPEDEF         reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    EXTERN          reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    STATIC          reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    AUTO            reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    REGISTER        reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    VOID            reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    CHAR            reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    SHORT           reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    INT             reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    LONG            reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    FLOAT           reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    DOUBLE          reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    SIGNED          reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    UNSIGNED        reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    BOOL            reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    CONST           reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    VOLATILE        reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    RESTRICT        reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    (               reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    ID              reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    ENUM            reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    STRUCT          reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    UNION           reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    INC             reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    DEC             reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    SIZEOF          reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    &               reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    *               reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    +               reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    -               reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    ~               reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    !               reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    CONSTANCE       reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    STRING_LITERAL  reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    CASE            reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    DEFAULT         reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    CONTINUE        reduce using rule 300 (statement_switch -> iteration_statement_switch .)
    BREAK           reduce using rule 300 (statement_switch -> iteration_statement_switch .)


state 529

    (301) statement_switch -> jump_statement .

    ELSE            reduce using rule 301 (statement_switch -> jump_statement .)
    }               reduce using rule 301 (statement_switch -> jump_statement .)
    {               reduce using rule 301 (statement_switch -> jump_statement .)
    ;               reduce using rule 301 (statement_switch -> jump_statement .)
    IF              reduce using rule 301 (statement_switch -> jump_statement .)
    SWITCH          reduce using rule 301 (statement_switch -> jump_statement .)
    WHILE           reduce using rule 301 (statement_switch -> jump_statement .)
    DO              reduce using rule 301 (statement_switch -> jump_statement .)
    FOR             reduce using rule 301 (statement_switch -> jump_statement .)
    GOTO            reduce using rule 301 (statement_switch -> jump_statement .)
    RETURN          reduce using rule 301 (statement_switch -> jump_statement .)
    TYPEDEF         reduce using rule 301 (statement_switch -> jump_statement .)
    EXTERN          reduce using rule 301 (statement_switch -> jump_statement .)
    STATIC          reduce using rule 301 (statement_switch -> jump_statement .)
    AUTO            reduce using rule 301 (statement_switch -> jump_statement .)
    REGISTER        reduce using rule 301 (statement_switch -> jump_statement .)
    VOID            reduce using rule 301 (statement_switch -> jump_statement .)
    CHAR            reduce using rule 301 (statement_switch -> jump_statement .)
    SHORT           reduce using rule 301 (statement_switch -> jump_statement .)
    INT             reduce using rule 301 (statement_switch -> jump_statement .)
    LONG            reduce using rule 301 (statement_switch -> jump_statement .)
    FLOAT           reduce using rule 301 (statement_switch -> jump_statement .)
    DOUBLE          reduce using rule 301 (statement_switch -> jump_statement .)
    SIGNED          reduce using rule 301 (statement_switch -> jump_statement .)
    UNSIGNED        reduce using rule 301 (statement_switch -> jump_statement .)
    BOOL            reduce using rule 301 (statement_switch -> jump_statement .)
    CONST           reduce using rule 301 (statement_switch -> jump_statement .)
    VOLATILE        reduce using rule 301 (statement_switch -> jump_statement .)
    RESTRICT        reduce using rule 301 (statement_switch -> jump_statement .)
    (               reduce using rule 301 (statement_switch -> jump_statement .)
    ID              reduce using rule 301 (statement_switch -> jump_statement .)
    ENUM            reduce using rule 301 (statement_switch -> jump_statement .)
    STRUCT          reduce using rule 301 (statement_switch -> jump_statement .)
    UNION           reduce using rule 301 (statement_switch -> jump_statement .)
    INC             reduce using rule 301 (statement_switch -> jump_statement .)
    DEC             reduce using rule 301 (statement_switch -> jump_statement .)
    SIZEOF          reduce using rule 301 (statement_switch -> jump_statement .)
    &               reduce using rule 301 (statement_switch -> jump_statement .)
    *               reduce using rule 301 (statement_switch -> jump_statement .)
    +               reduce using rule 301 (statement_switch -> jump_statement .)
    -               reduce using rule 301 (statement_switch -> jump_statement .)
    ~               reduce using rule 301 (statement_switch -> jump_statement .)
    !               reduce using rule 301 (statement_switch -> jump_statement .)
    CONSTANCE       reduce using rule 301 (statement_switch -> jump_statement .)
    STRING_LITERAL  reduce using rule 301 (statement_switch -> jump_statement .)
    CASE            reduce using rule 301 (statement_switch -> jump_statement .)
    DEFAULT         reduce using rule 301 (statement_switch -> jump_statement .)
    CONTINUE        reduce using rule 301 (statement_switch -> jump_statement .)
    BREAK           reduce using rule 301 (statement_switch -> jump_statement .)


state 530

    (302) labeled_statement_switch -> ID . :
    (184) identifier -> ID .

    :               shift and go to state 553
    (               reduce using rule 184 (identifier -> ID .)
    INC             reduce using rule 184 (identifier -> ID .)
    DEC             reduce using rule 184 (identifier -> ID .)
    [               reduce using rule 184 (identifier -> ID .)
    .               reduce using rule 184 (identifier -> ID .)
    PTR             reduce using rule 184 (identifier -> ID .)
    =               reduce using rule 184 (identifier -> ID .)
    AO_MUL          reduce using rule 184 (identifier -> ID .)
    AO_DIV          reduce using rule 184 (identifier -> ID .)
    AO_MOD          reduce using rule 184 (identifier -> ID .)
    AO_PLUS         reduce using rule 184 (identifier -> ID .)
    AO_SUB          reduce using rule 184 (identifier -> ID .)
    AO_SL           reduce using rule 184 (identifier -> ID .)
    AO_SR           reduce using rule 184 (identifier -> ID .)
    AO_AND          reduce using rule 184 (identifier -> ID .)
    AO_XOR          reduce using rule 184 (identifier -> ID .)
    AO_OR           reduce using rule 184 (identifier -> ID .)
    *               reduce using rule 184 (identifier -> ID .)
    /               reduce using rule 184 (identifier -> ID .)
    %               reduce using rule 184 (identifier -> ID .)
    +               reduce using rule 184 (identifier -> ID .)
    -               reduce using rule 184 (identifier -> ID .)
    SHIFT_LEFT      reduce using rule 184 (identifier -> ID .)
    SHIFT_RIGHT     reduce using rule 184 (identifier -> ID .)
    <               reduce using rule 184 (identifier -> ID .)
    >               reduce using rule 184 (identifier -> ID .)
    LE              reduce using rule 184 (identifier -> ID .)
    GE              reduce using rule 184 (identifier -> ID .)
    EQUAL           reduce using rule 184 (identifier -> ID .)
    NE              reduce using rule 184 (identifier -> ID .)
    &               reduce using rule 184 (identifier -> ID .)
    ^               reduce using rule 184 (identifier -> ID .)
    |               reduce using rule 184 (identifier -> ID .)
    AND             reduce using rule 184 (identifier -> ID .)
    ?               reduce using rule 184 (identifier -> ID .)
    OR              reduce using rule 184 (identifier -> ID .)
    ;               reduce using rule 184 (identifier -> ID .)
    ,               reduce using rule 184 (identifier -> ID .)


state 531

    (303) labeled_statement_switch -> CASE . constant_expression : statement
    (117) constant_expression -> . conditional_expression
    (118) conditional_expression -> . logical_or_expression
    (119) conditional_expression -> . logical_or_expression ? expression : conditional_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR logical_and_expression
    (122) logical_and_expression -> . inclusive_or_expression
    (123) logical_and_expression -> . logical_and_expression AND inclusive_or_expression
    (124) inclusive_or_expression -> . exclusive_or_expression
    (125) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (126) exclusive_or_expression -> . and_expression
    (127) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (128) and_expression -> . equality_expression
    (129) and_expression -> . and_expression & equality_expression
    (130) equality_expression -> . relational_expression
    (131) equality_expression -> . equality_expression EQUAL relational_expression
    (132) equality_expression -> . equality_expression NE relational_expression
    (133) relational_expression -> . shift_expression
    (134) relational_expression -> . relational_expression < shift_expression
    (135) relational_expression -> . relational_expression > shift_expression
    (136) relational_expression -> . relational_expression LE shift_expression
    (137) relational_expression -> . relational_expression GE shift_expression
    (138) shift_expression -> . additive_expression
    (139) shift_expression -> . shift_expression SHIFT_LEFT additive_expression
    (140) shift_expression -> . shift_expression SHIFT_RIGHT additive_expression
    (141) additive_expression -> . multiplicative_expression
    (142) additive_expression -> . additive_expression + multiplicative_expression
    (143) additive_expression -> . additive_expression - multiplicative_expression
    (144) multiplicative_expression -> . cast_expression
    (145) multiplicative_expression -> . multiplicative_expression * cast_expression
    (146) multiplicative_expression -> . multiplicative_expression / cast_expression
    (147) multiplicative_expression -> . multiplicative_expression % cast_expression
    (148) cast_expression -> . unary_expression
    (149) cast_expression -> . ( type_name ) cast_expression
    (157) unary_expression -> . primary_expression
    (158) unary_expression -> . unary_operator cast_expression
    (159) unary_expression -> . SIZEOF unary_expression
    (160) unary_expression -> . SIZEOF ( type_name )
    (165) primary_expression -> . CONSTANCE
    (166) primary_expression -> . STRING_LITERAL
    (167) primary_expression -> . ( expression )
    (161) unary_operator -> . +
    (162) unary_operator -> . -
    (163) unary_operator -> . ~
    (164) unary_operator -> . !

    (               shift and go to state 202
    SIZEOF          shift and go to state 205
    CONSTANCE       shift and go to state 206
    STRING_LITERAL  shift and go to state 207
    +               shift and go to state 198
    -               shift and go to state 199
    ~               shift and go to state 208
    !               shift and go to state 209

    constant_expression            shift and go to state 554
    conditional_expression         shift and go to state 187
    logical_or_expression          shift and go to state 188
    logical_and_expression         shift and go to state 189
    inclusive_or_expression        shift and go to state 190
    exclusive_or_expression        shift and go to state 191
    and_expression                 shift and go to state 192
    equality_expression            shift and go to state 193
    relational_expression          shift and go to state 194
    shift_expression               shift and go to state 195
    additive_expression            shift and go to state 196
    multiplicative_expression      shift and go to state 197
    cast_expression                shift and go to state 200
    unary_expression               shift and go to state 201
    primary_expression             shift and go to state 203
    unary_operator                 shift and go to state 204

state 532

    (304) labeled_statement_switch -> DEFAULT . : statement

    :               shift and go to state 555


state 533

    (290) compound_statement_switch -> { . }
    (291) compound_statement_switch -> { . block_item_list_switch }
    (292) block_item_list_switch -> . block_item_switch
    (293) block_item_list_switch -> . block_item_list_switch block_item_switch
    (294) block_item_switch -> . declaration
    (295) block_item_switch -> . statement_switch
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (296) statement_switch -> . labeled_statement_switch
    (297) statement_switch -> . compound_statement_switch
    (298) statement_switch -> . expression_statement
    (299) statement_switch -> . selection_statement
    (300) statement_switch -> . iteration_statement_switch
    (301) statement_switch -> . jump_statement
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (302) labeled_statement_switch -> . ID :
    (303) labeled_statement_switch -> . CASE constant_expression : statement
    (304) labeled_statement_switch -> . DEFAULT : statement
    (290) compound_statement_switch -> . { }
    (291) compound_statement_switch -> . { block_item_list_switch }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (284) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (285) selection_statement -> . IF ( expression_variable ) statement
    (286) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (323) iteration_statement_switch -> . WHILE ( expression_variable ) statement_while_switch
    (324) iteration_statement_switch -> . DO statement_while_switch WHILE ( expression_variable ) ;
    (325) iteration_statement_switch -> . FOR ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> . FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> . FOR ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> . FOR ( declaration expression_statement expression_variable ) statement_while_switch
    (341) jump_statement -> . GOTO ID ;
    (342) jump_statement -> . RETURN ;
    (343) jump_statement -> . RETURN expression_variable ;
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 556
    ID              shift and go to state 530
    CASE            shift and go to state 531
    DEFAULT         shift and go to state 532
    {               shift and go to state 533
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 534
    DO              shift and go to state 535
    FOR             shift and go to state 536
    GOTO            shift and go to state 139
    RETURN          shift and go to state 140
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    block_item_list_switch         shift and go to state 557
    block_item_switch              shift and go to state 558
    declaration                    shift and go to state 559
    statement_switch               shift and go to state 560
    declaration_specifiers         shift and go to state 123
    labeled_statement_switch       shift and go to state 524
    compound_statement_switch      shift and go to state 525
    expression_statement           shift and go to state 526
    selection_statement            shift and go to state 527
    iteration_statement_switch     shift and go to state 528
    jump_statement                 shift and go to state 529
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    expression_variable            shift and go to state 132
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    assignment_expression          shift and go to state 141
    struct_or_union                shift and go to state 29
    identifier                     shift and go to state 220
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 534

    (323) iteration_statement_switch -> WHILE . ( expression_variable ) statement_while_switch

    (               shift and go to state 561


state 535

    (324) iteration_statement_switch -> DO . statement_while_switch WHILE ( expression_variable ) ;
    (335) statement_while_switch -> . labeled_statement_switch
    (336) statement_while_switch -> . compound_statement_while_switch
    (337) statement_while_switch -> . expression_statement
    (338) statement_while_switch -> . selection_statement_while
    (339) statement_while_switch -> . iteration_statement_switch
    (340) statement_while_switch -> . jump_statement_while
    (302) labeled_statement_switch -> . ID :
    (303) labeled_statement_switch -> . CASE constant_expression : statement
    (304) labeled_statement_switch -> . DEFAULT : statement
    (329) compound_statement_while_switch -> . { }
    (330) compound_statement_while_switch -> . { block_item_list_while_switch }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (323) iteration_statement_switch -> . WHILE ( expression_variable ) statement_while_switch
    (324) iteration_statement_switch -> . DO statement_while_switch WHILE ( expression_variable ) ;
    (325) iteration_statement_switch -> . FOR ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> . FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> . FOR ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> . FOR ( declaration expression_statement expression_variable ) statement_while_switch
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ID              shift and go to state 530
    CASE            shift and go to state 531
    DEFAULT         shift and go to state 532
    {               shift and go to state 569
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 534
    DO              shift and go to state 535
    FOR             shift and go to state 536
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    statement_while_switch         shift and go to state 562
    expression_variable            shift and go to state 132
    labeled_statement_switch       shift and go to state 563
    compound_statement_while_switch shift and go to state 564
    expression_statement           shift and go to state 565
    selection_statement_while      shift and go to state 566
    iteration_statement_switch     shift and go to state 567
    jump_statement_while           shift and go to state 568
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 536

    (325) iteration_statement_switch -> FOR . ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> FOR . ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> FOR . ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> FOR . ( declaration expression_statement expression_variable ) statement_while_switch

    (               shift and go to state 570


state 537

    (317) iteration_statement -> WHILE ( expression_variable ) statement_while .

    }               reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    {               reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    ;               reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    IF              reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    SWITCH          reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    WHILE           reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    DO              reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    FOR             reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    GOTO            reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    RETURN          reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    TYPEDEF         reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    EXTERN          reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    STATIC          reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    AUTO            reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    REGISTER        reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    VOID            reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    CHAR            reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    SHORT           reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    INT             reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    LONG            reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    FLOAT           reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    DOUBLE          reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    SIGNED          reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    UNSIGNED        reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    BOOL            reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    CONST           reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    VOLATILE        reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    RESTRICT        reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    (               reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    ID              reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    ENUM            reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    STRUCT          reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    UNION           reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    INC             reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    DEC             reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    SIZEOF          reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    &               reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    *               reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    +               reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    -               reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    ~               reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    !               reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    CONSTANCE       reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    STRING_LITERAL  reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    CONTINUE        reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    BREAK           reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    ELSE            reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    CASE            reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)
    DEFAULT         reduce using rule 317 (iteration_statement -> WHILE ( expression_variable ) statement_while .)


state 538

    (318) iteration_statement -> DO statement_while WHILE ( expression_variable . ) ;
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 571
    ,               shift and go to state 243


state 539

    (287) selection_statement_while -> IF ( expression_variable ) . statement_while ELSE statement_while
    (288) selection_statement_while -> IF ( expression_variable ) . statement_while
    (311) statement_while -> . labeled_statement
    (312) statement_while -> . compound_statement_while
    (313) statement_while -> . expression_statement
    (314) statement_while -> . selection_statement_while
    (315) statement_while -> . iteration_statement
    (316) statement_while -> . jump_statement_while
    (203) labeled_statement -> . identifier :
    (305) compound_statement_while -> . { }
    (306) compound_statement_while -> . { block_item_list_while }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 259
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 132
    statement_while                shift and go to state 572
    labeled_statement              shift and go to state 253
    compound_statement_while       shift and go to state 254
    expression_statement           shift and go to state 255
    selection_statement_while      shift and go to state 256
    iteration_statement            shift and go to state 257
    jump_statement_while           shift and go to state 258
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 540

    (289) selection_statement_while -> SWITCH ( expression_variable ) . statement_while_switch
    (335) statement_while_switch -> . labeled_statement_switch
    (336) statement_while_switch -> . compound_statement_while_switch
    (337) statement_while_switch -> . expression_statement
    (338) statement_while_switch -> . selection_statement_while
    (339) statement_while_switch -> . iteration_statement_switch
    (340) statement_while_switch -> . jump_statement_while
    (302) labeled_statement_switch -> . ID :
    (303) labeled_statement_switch -> . CASE constant_expression : statement
    (304) labeled_statement_switch -> . DEFAULT : statement
    (329) compound_statement_while_switch -> . { }
    (330) compound_statement_while_switch -> . { block_item_list_while_switch }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (323) iteration_statement_switch -> . WHILE ( expression_variable ) statement_while_switch
    (324) iteration_statement_switch -> . DO statement_while_switch WHILE ( expression_variable ) ;
    (325) iteration_statement_switch -> . FOR ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> . FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> . FOR ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> . FOR ( declaration expression_statement expression_variable ) statement_while_switch
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ID              shift and go to state 530
    CASE            shift and go to state 531
    DEFAULT         shift and go to state 532
    {               shift and go to state 569
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 534
    DO              shift and go to state 535
    FOR             shift and go to state 536
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 132
    statement_while_switch         shift and go to state 573
    labeled_statement_switch       shift and go to state 563
    compound_statement_while_switch shift and go to state 564
    expression_statement           shift and go to state 565
    selection_statement_while      shift and go to state 566
    iteration_statement_switch     shift and go to state 567
    jump_statement_while           shift and go to state 568
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 541

    (319) iteration_statement -> FOR ( expression_statement expression_statement ) . statement_while
    (311) statement_while -> . labeled_statement
    (312) statement_while -> . compound_statement_while
    (313) statement_while -> . expression_statement
    (314) statement_while -> . selection_statement_while
    (315) statement_while -> . iteration_statement
    (316) statement_while -> . jump_statement_while
    (203) labeled_statement -> . identifier :
    (305) compound_statement_while -> . { }
    (306) compound_statement_while -> . { block_item_list_while }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 259
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 255
    statement_while                shift and go to state 574
    labeled_statement              shift and go to state 253
    compound_statement_while       shift and go to state 254
    selection_statement_while      shift and go to state 256
    iteration_statement            shift and go to state 257
    jump_statement_while           shift and go to state 258
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 542

    (320) iteration_statement -> FOR ( expression_statement expression_statement expression_variable . ) statement_while
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 575
    ,               shift and go to state 243


state 543

    (321) iteration_statement -> FOR ( declaration expression_statement ) . statement_while
    (311) statement_while -> . labeled_statement
    (312) statement_while -> . compound_statement_while
    (313) statement_while -> . expression_statement
    (314) statement_while -> . selection_statement_while
    (315) statement_while -> . iteration_statement
    (316) statement_while -> . jump_statement_while
    (203) labeled_statement -> . identifier :
    (305) compound_statement_while -> . { }
    (306) compound_statement_while -> . { block_item_list_while }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 259
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 255
    statement_while                shift and go to state 576
    labeled_statement              shift and go to state 253
    compound_statement_while       shift and go to state 254
    selection_statement_while      shift and go to state 256
    iteration_statement            shift and go to state 257
    jump_statement_while           shift and go to state 258
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 544

    (322) iteration_statement -> FOR ( declaration expression_statement expression_variable . ) statement_while
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 577
    ,               shift and go to state 243


state 545

    (222) conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v .

    ;               reduce using rule 222 (conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v .)
    ,               reduce using rule 222 (conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v .)
    )               reduce using rule 222 (conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v .)
    }               reduce using rule 222 (conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v .)
    :               reduce using rule 222 (conditional_expression_v -> logical_or_expression_v ? expression_variable : conditional_expression_v .)


state 546

    (119) conditional_expression -> logical_or_expression ? expression : conditional_expression .

    ]               reduce using rule 119 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    )               reduce using rule 119 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ,               reduce using rule 119 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    ;               reduce using rule 119 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    }               reduce using rule 119 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)
    :               reduce using rule 119 (conditional_expression -> logical_or_expression ? expression : conditional_expression .)


state 547

    (188) parameter_list_definition -> parameter_declaration . = constant_expression , parameter_list_definition
    (189) parameter_list_definition -> parameter_declaration . = constant_expression

    =               shift and go to state 354


state 548

    (188) parameter_list_definition -> parameter_declaration = constant_expression , parameter_list_definition .

    )               reduce using rule 188 (parameter_list_definition -> parameter_declaration = constant_expression , parameter_list_definition .)


state 549

    (176) direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .

    [               reduce using rule 176 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    ,               reduce using rule 176 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    =               reduce using rule 176 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)
    )               reduce using rule 176 (direct_abstract_declarator -> direct_abstract_declarator [ constant_expression ] .)


state 550

    (106) direct_declarator_forlist -> ( . pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> ( . direct_declarator_forlist )
    (180) direct_function_declarator -> ( . pointer direct_function_declarator )
    (181) direct_function_declarator -> ( . direct_function_declarator )
    (183) identifier -> ( . identifier )
    (185) parameter_type_list_definition -> ( . )
    (186) parameter_type_list_definition -> ( . parameter_type_list_definition )
    (187) parameter_type_list_definition -> ( . parameter_list )
    (103) direct_declarator -> ( . declarator )
    (173) direct_abstract_declarator -> ( . abstract_declarator )
    (96) pointer -> . *
    (97) pointer -> . * type_qualifier_list
    (98) pointer -> . * pointer
    (99) pointer -> . * type_qualifier_list pointer
    (105) direct_declarator_forlist -> . identifier
    (106) direct_declarator_forlist -> . ( pointer direct_declarator_forlist )
    (107) direct_declarator_forlist -> . ( direct_declarator_forlist )
    (108) direct_declarator_forlist -> . direct_declarator_forlist [ constant_expression ]
    (109) direct_declarator_forlist -> . identifier [ constant_expression ]
    (110) direct_declarator_forlist -> . identifier [ ]
    (180) direct_function_declarator -> . ( pointer direct_function_declarator )
    (181) direct_function_declarator -> . ( direct_function_declarator )
    (182) direct_function_declarator -> . identifier parameter_type_list_definition
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (185) parameter_type_list_definition -> . ( )
    (186) parameter_type_list_definition -> . ( parameter_type_list_definition )
    (187) parameter_type_list_definition -> . ( parameter_list )
    (111) parameter_list -> . parameter_list_definition
    (112) parameter_list -> . parameter_declaration
    (113) parameter_list -> . parameter_declaration , parameter_list
    (94) declarator -> . pointer direct_declarator
    (95) declarator -> . direct_declarator
    (170) abstract_declarator -> . pointer
    (171) abstract_declarator -> . direct_abstract_declarator
    (172) abstract_declarator -> . pointer direct_abstract_declarator
    (188) parameter_list_definition -> . parameter_declaration = constant_expression , parameter_list_definition
    (189) parameter_list_definition -> . parameter_declaration = constant_expression
    (190) parameter_list_definition -> . ELLIPSIS
    (114) parameter_declaration -> . declaration_specifiers declarator
    (115) parameter_declaration -> . declaration_specifiers abstract_declarator
    (116) parameter_declaration -> . declaration_specifiers
    (102) direct_declarator -> . direct_declarator_forlist
    (103) direct_declarator -> . ( declarator )
    (104) direct_declarator -> . direct_function_declarator
    (173) direct_abstract_declarator -> . ( abstract_declarator )
    (174) direct_abstract_declarator -> . [ ]
    (175) direct_abstract_declarator -> . [ constant_expression ]
    (176) direct_abstract_declarator -> . direct_abstract_declarator [ constant_expression ]
    (177) direct_abstract_declarator -> . parameter_type_list_definition
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION

    )               shift and go to state 210
    *               shift and go to state 38
    (               shift and go to state 550
    ID              shift and go to state 42
    ELLIPSIS        shift and go to state 215
    [               shift and go to state 360
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32

    pointer                        shift and go to state 470
    direct_declarator_forlist      shift and go to state 87
    direct_function_declarator     shift and go to state 84
    identifier                     shift and go to state 321
    parameter_type_list_definition shift and go to state 471
    parameter_list                 shift and go to state 212
    declarator                     shift and go to state 86
    abstract_declarator            shift and go to state 469
    parameter_list_definition      shift and go to state 213
    parameter_declaration          shift and go to state 214
    direct_declarator              shift and go to state 44
    direct_abstract_declarator     shift and go to state 358
    declaration_specifiers         shift and go to state 216
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    struct_or_union                shift and go to state 29

state 551

    (354) initializer_list -> initializer_list , designation initializer .

    }               reduce using rule 354 (initializer_list -> initializer_list , designation initializer .)
    ,               reduce using rule 354 (initializer_list -> initializer_list , designation initializer .)


state 552

    (284) selection_statement -> IF ( expression_variable ) statement ELSE . statement
    (197) statement -> . labeled_statement
    (198) statement -> . compound_statement
    (199) statement -> . expression_statement
    (200) statement -> . selection_statement
    (201) statement -> . iteration_statement
    (202) statement -> . jump_statement
    (203) labeled_statement -> . identifier :
    (191) compound_statement -> . { }
    (192) compound_statement -> . { block_item_list }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (284) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (285) selection_statement -> . IF ( expression_variable ) statement
    (286) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (341) jump_statement -> . GOTO ID ;
    (342) jump_statement -> . RETURN ;
    (343) jump_statement -> . RETURN expression_variable ;
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    RETURN          shift and go to state 140
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 132
    statement                      shift and go to state 578
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 553

    (302) labeled_statement_switch -> ID : .

    ELSE            reduce using rule 302 (labeled_statement_switch -> ID : .)
    }               reduce using rule 302 (labeled_statement_switch -> ID : .)
    {               reduce using rule 302 (labeled_statement_switch -> ID : .)
    ;               reduce using rule 302 (labeled_statement_switch -> ID : .)
    IF              reduce using rule 302 (labeled_statement_switch -> ID : .)
    SWITCH          reduce using rule 302 (labeled_statement_switch -> ID : .)
    WHILE           reduce using rule 302 (labeled_statement_switch -> ID : .)
    DO              reduce using rule 302 (labeled_statement_switch -> ID : .)
    FOR             reduce using rule 302 (labeled_statement_switch -> ID : .)
    GOTO            reduce using rule 302 (labeled_statement_switch -> ID : .)
    RETURN          reduce using rule 302 (labeled_statement_switch -> ID : .)
    TYPEDEF         reduce using rule 302 (labeled_statement_switch -> ID : .)
    EXTERN          reduce using rule 302 (labeled_statement_switch -> ID : .)
    STATIC          reduce using rule 302 (labeled_statement_switch -> ID : .)
    AUTO            reduce using rule 302 (labeled_statement_switch -> ID : .)
    REGISTER        reduce using rule 302 (labeled_statement_switch -> ID : .)
    VOID            reduce using rule 302 (labeled_statement_switch -> ID : .)
    CHAR            reduce using rule 302 (labeled_statement_switch -> ID : .)
    SHORT           reduce using rule 302 (labeled_statement_switch -> ID : .)
    INT             reduce using rule 302 (labeled_statement_switch -> ID : .)
    LONG            reduce using rule 302 (labeled_statement_switch -> ID : .)
    FLOAT           reduce using rule 302 (labeled_statement_switch -> ID : .)
    DOUBLE          reduce using rule 302 (labeled_statement_switch -> ID : .)
    SIGNED          reduce using rule 302 (labeled_statement_switch -> ID : .)
    UNSIGNED        reduce using rule 302 (labeled_statement_switch -> ID : .)
    BOOL            reduce using rule 302 (labeled_statement_switch -> ID : .)
    CONST           reduce using rule 302 (labeled_statement_switch -> ID : .)
    VOLATILE        reduce using rule 302 (labeled_statement_switch -> ID : .)
    RESTRICT        reduce using rule 302 (labeled_statement_switch -> ID : .)
    (               reduce using rule 302 (labeled_statement_switch -> ID : .)
    ID              reduce using rule 302 (labeled_statement_switch -> ID : .)
    ENUM            reduce using rule 302 (labeled_statement_switch -> ID : .)
    STRUCT          reduce using rule 302 (labeled_statement_switch -> ID : .)
    UNION           reduce using rule 302 (labeled_statement_switch -> ID : .)
    INC             reduce using rule 302 (labeled_statement_switch -> ID : .)
    DEC             reduce using rule 302 (labeled_statement_switch -> ID : .)
    SIZEOF          reduce using rule 302 (labeled_statement_switch -> ID : .)
    &               reduce using rule 302 (labeled_statement_switch -> ID : .)
    *               reduce using rule 302 (labeled_statement_switch -> ID : .)
    +               reduce using rule 302 (labeled_statement_switch -> ID : .)
    -               reduce using rule 302 (labeled_statement_switch -> ID : .)
    ~               reduce using rule 302 (labeled_statement_switch -> ID : .)
    !               reduce using rule 302 (labeled_statement_switch -> ID : .)
    CONSTANCE       reduce using rule 302 (labeled_statement_switch -> ID : .)
    STRING_LITERAL  reduce using rule 302 (labeled_statement_switch -> ID : .)
    CASE            reduce using rule 302 (labeled_statement_switch -> ID : .)
    DEFAULT         reduce using rule 302 (labeled_statement_switch -> ID : .)
    CONTINUE        reduce using rule 302 (labeled_statement_switch -> ID : .)
    BREAK           reduce using rule 302 (labeled_statement_switch -> ID : .)


state 554

    (303) labeled_statement_switch -> CASE constant_expression . : statement

    :               shift and go to state 579


state 555

    (304) labeled_statement_switch -> DEFAULT : . statement
    (197) statement -> . labeled_statement
    (198) statement -> . compound_statement
    (199) statement -> . expression_statement
    (200) statement -> . selection_statement
    (201) statement -> . iteration_statement
    (202) statement -> . jump_statement
    (203) labeled_statement -> . identifier :
    (191) compound_statement -> . { }
    (192) compound_statement -> . { block_item_list }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (284) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (285) selection_statement -> . IF ( expression_variable ) statement
    (286) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (341) jump_statement -> . GOTO ID ;
    (342) jump_statement -> . RETURN ;
    (343) jump_statement -> . RETURN expression_variable ;
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    RETURN          shift and go to state 140
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    statement                      shift and go to state 580
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 556

    (290) compound_statement_switch -> { } .

    ELSE            reduce using rule 290 (compound_statement_switch -> { } .)
    }               reduce using rule 290 (compound_statement_switch -> { } .)
    {               reduce using rule 290 (compound_statement_switch -> { } .)
    ;               reduce using rule 290 (compound_statement_switch -> { } .)
    IF              reduce using rule 290 (compound_statement_switch -> { } .)
    SWITCH          reduce using rule 290 (compound_statement_switch -> { } .)
    WHILE           reduce using rule 290 (compound_statement_switch -> { } .)
    DO              reduce using rule 290 (compound_statement_switch -> { } .)
    FOR             reduce using rule 290 (compound_statement_switch -> { } .)
    GOTO            reduce using rule 290 (compound_statement_switch -> { } .)
    RETURN          reduce using rule 290 (compound_statement_switch -> { } .)
    TYPEDEF         reduce using rule 290 (compound_statement_switch -> { } .)
    EXTERN          reduce using rule 290 (compound_statement_switch -> { } .)
    STATIC          reduce using rule 290 (compound_statement_switch -> { } .)
    AUTO            reduce using rule 290 (compound_statement_switch -> { } .)
    REGISTER        reduce using rule 290 (compound_statement_switch -> { } .)
    VOID            reduce using rule 290 (compound_statement_switch -> { } .)
    CHAR            reduce using rule 290 (compound_statement_switch -> { } .)
    SHORT           reduce using rule 290 (compound_statement_switch -> { } .)
    INT             reduce using rule 290 (compound_statement_switch -> { } .)
    LONG            reduce using rule 290 (compound_statement_switch -> { } .)
    FLOAT           reduce using rule 290 (compound_statement_switch -> { } .)
    DOUBLE          reduce using rule 290 (compound_statement_switch -> { } .)
    SIGNED          reduce using rule 290 (compound_statement_switch -> { } .)
    UNSIGNED        reduce using rule 290 (compound_statement_switch -> { } .)
    BOOL            reduce using rule 290 (compound_statement_switch -> { } .)
    CONST           reduce using rule 290 (compound_statement_switch -> { } .)
    VOLATILE        reduce using rule 290 (compound_statement_switch -> { } .)
    RESTRICT        reduce using rule 290 (compound_statement_switch -> { } .)
    (               reduce using rule 290 (compound_statement_switch -> { } .)
    ID              reduce using rule 290 (compound_statement_switch -> { } .)
    ENUM            reduce using rule 290 (compound_statement_switch -> { } .)
    STRUCT          reduce using rule 290 (compound_statement_switch -> { } .)
    UNION           reduce using rule 290 (compound_statement_switch -> { } .)
    INC             reduce using rule 290 (compound_statement_switch -> { } .)
    DEC             reduce using rule 290 (compound_statement_switch -> { } .)
    SIZEOF          reduce using rule 290 (compound_statement_switch -> { } .)
    &               reduce using rule 290 (compound_statement_switch -> { } .)
    *               reduce using rule 290 (compound_statement_switch -> { } .)
    +               reduce using rule 290 (compound_statement_switch -> { } .)
    -               reduce using rule 290 (compound_statement_switch -> { } .)
    ~               reduce using rule 290 (compound_statement_switch -> { } .)
    !               reduce using rule 290 (compound_statement_switch -> { } .)
    CONSTANCE       reduce using rule 290 (compound_statement_switch -> { } .)
    STRING_LITERAL  reduce using rule 290 (compound_statement_switch -> { } .)
    CASE            reduce using rule 290 (compound_statement_switch -> { } .)
    DEFAULT         reduce using rule 290 (compound_statement_switch -> { } .)
    CONTINUE        reduce using rule 290 (compound_statement_switch -> { } .)
    BREAK           reduce using rule 290 (compound_statement_switch -> { } .)


state 557

    (291) compound_statement_switch -> { block_item_list_switch . }
    (293) block_item_list_switch -> block_item_list_switch . block_item_switch
    (294) block_item_switch -> . declaration
    (295) block_item_switch -> . statement_switch
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (296) statement_switch -> . labeled_statement_switch
    (297) statement_switch -> . compound_statement_switch
    (298) statement_switch -> . expression_statement
    (299) statement_switch -> . selection_statement
    (300) statement_switch -> . iteration_statement_switch
    (301) statement_switch -> . jump_statement
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (302) labeled_statement_switch -> . ID :
    (303) labeled_statement_switch -> . CASE constant_expression : statement
    (304) labeled_statement_switch -> . DEFAULT : statement
    (290) compound_statement_switch -> . { }
    (291) compound_statement_switch -> . { block_item_list_switch }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (284) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (285) selection_statement -> . IF ( expression_variable ) statement
    (286) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (323) iteration_statement_switch -> . WHILE ( expression_variable ) statement_while_switch
    (324) iteration_statement_switch -> . DO statement_while_switch WHILE ( expression_variable ) ;
    (325) iteration_statement_switch -> . FOR ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> . FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> . FOR ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> . FOR ( declaration expression_statement expression_variable ) statement_while_switch
    (341) jump_statement -> . GOTO ID ;
    (342) jump_statement -> . RETURN ;
    (343) jump_statement -> . RETURN expression_variable ;
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 581
    ID              shift and go to state 530
    CASE            shift and go to state 531
    DEFAULT         shift and go to state 532
    {               shift and go to state 533
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 534
    DO              shift and go to state 535
    FOR             shift and go to state 536
    GOTO            shift and go to state 139
    RETURN          shift and go to state 140
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    block_item_switch              shift and go to state 582
    declaration                    shift and go to state 559
    statement_switch               shift and go to state 560
    declaration_specifiers         shift and go to state 123
    labeled_statement_switch       shift and go to state 524
    compound_statement_switch      shift and go to state 525
    expression_statement           shift and go to state 526
    selection_statement            shift and go to state 527
    iteration_statement_switch     shift and go to state 528
    jump_statement                 shift and go to state 529
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    expression_variable            shift and go to state 132
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    assignment_expression          shift and go to state 141
    struct_or_union                shift and go to state 29
    identifier                     shift and go to state 220
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 558

    (292) block_item_list_switch -> block_item_switch .

    }               reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    ID              reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    CASE            reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    DEFAULT         reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    {               reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    ;               reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    IF              reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    SWITCH          reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    WHILE           reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    DO              reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    FOR             reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    GOTO            reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    RETURN          reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    TYPEDEF         reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    EXTERN          reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    STATIC          reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    AUTO            reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    REGISTER        reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    VOID            reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    CHAR            reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    SHORT           reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    INT             reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    LONG            reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    FLOAT           reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    DOUBLE          reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    SIGNED          reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    UNSIGNED        reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    BOOL            reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    CONST           reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    VOLATILE        reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    RESTRICT        reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    ENUM            reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    STRUCT          reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    UNION           reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    INC             reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    DEC             reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    SIZEOF          reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    &               reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    *               reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    +               reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    -               reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    ~               reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    !               reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    (               reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    CONSTANCE       reduce using rule 292 (block_item_list_switch -> block_item_switch .)
    STRING_LITERAL  reduce using rule 292 (block_item_list_switch -> block_item_switch .)


state 559

    (294) block_item_switch -> declaration .

    }               reduce using rule 294 (block_item_switch -> declaration .)
    ID              reduce using rule 294 (block_item_switch -> declaration .)
    CASE            reduce using rule 294 (block_item_switch -> declaration .)
    DEFAULT         reduce using rule 294 (block_item_switch -> declaration .)
    {               reduce using rule 294 (block_item_switch -> declaration .)
    ;               reduce using rule 294 (block_item_switch -> declaration .)
    IF              reduce using rule 294 (block_item_switch -> declaration .)
    SWITCH          reduce using rule 294 (block_item_switch -> declaration .)
    WHILE           reduce using rule 294 (block_item_switch -> declaration .)
    DO              reduce using rule 294 (block_item_switch -> declaration .)
    FOR             reduce using rule 294 (block_item_switch -> declaration .)
    GOTO            reduce using rule 294 (block_item_switch -> declaration .)
    RETURN          reduce using rule 294 (block_item_switch -> declaration .)
    TYPEDEF         reduce using rule 294 (block_item_switch -> declaration .)
    EXTERN          reduce using rule 294 (block_item_switch -> declaration .)
    STATIC          reduce using rule 294 (block_item_switch -> declaration .)
    AUTO            reduce using rule 294 (block_item_switch -> declaration .)
    REGISTER        reduce using rule 294 (block_item_switch -> declaration .)
    VOID            reduce using rule 294 (block_item_switch -> declaration .)
    CHAR            reduce using rule 294 (block_item_switch -> declaration .)
    SHORT           reduce using rule 294 (block_item_switch -> declaration .)
    INT             reduce using rule 294 (block_item_switch -> declaration .)
    LONG            reduce using rule 294 (block_item_switch -> declaration .)
    FLOAT           reduce using rule 294 (block_item_switch -> declaration .)
    DOUBLE          reduce using rule 294 (block_item_switch -> declaration .)
    SIGNED          reduce using rule 294 (block_item_switch -> declaration .)
    UNSIGNED        reduce using rule 294 (block_item_switch -> declaration .)
    BOOL            reduce using rule 294 (block_item_switch -> declaration .)
    CONST           reduce using rule 294 (block_item_switch -> declaration .)
    VOLATILE        reduce using rule 294 (block_item_switch -> declaration .)
    RESTRICT        reduce using rule 294 (block_item_switch -> declaration .)
    ENUM            reduce using rule 294 (block_item_switch -> declaration .)
    STRUCT          reduce using rule 294 (block_item_switch -> declaration .)
    UNION           reduce using rule 294 (block_item_switch -> declaration .)
    INC             reduce using rule 294 (block_item_switch -> declaration .)
    DEC             reduce using rule 294 (block_item_switch -> declaration .)
    SIZEOF          reduce using rule 294 (block_item_switch -> declaration .)
    &               reduce using rule 294 (block_item_switch -> declaration .)
    *               reduce using rule 294 (block_item_switch -> declaration .)
    +               reduce using rule 294 (block_item_switch -> declaration .)
    -               reduce using rule 294 (block_item_switch -> declaration .)
    ~               reduce using rule 294 (block_item_switch -> declaration .)
    !               reduce using rule 294 (block_item_switch -> declaration .)
    (               reduce using rule 294 (block_item_switch -> declaration .)
    CONSTANCE       reduce using rule 294 (block_item_switch -> declaration .)
    STRING_LITERAL  reduce using rule 294 (block_item_switch -> declaration .)


state 560

    (295) block_item_switch -> statement_switch .

    }               reduce using rule 295 (block_item_switch -> statement_switch .)
    ID              reduce using rule 295 (block_item_switch -> statement_switch .)
    CASE            reduce using rule 295 (block_item_switch -> statement_switch .)
    DEFAULT         reduce using rule 295 (block_item_switch -> statement_switch .)
    {               reduce using rule 295 (block_item_switch -> statement_switch .)
    ;               reduce using rule 295 (block_item_switch -> statement_switch .)
    IF              reduce using rule 295 (block_item_switch -> statement_switch .)
    SWITCH          reduce using rule 295 (block_item_switch -> statement_switch .)
    WHILE           reduce using rule 295 (block_item_switch -> statement_switch .)
    DO              reduce using rule 295 (block_item_switch -> statement_switch .)
    FOR             reduce using rule 295 (block_item_switch -> statement_switch .)
    GOTO            reduce using rule 295 (block_item_switch -> statement_switch .)
    RETURN          reduce using rule 295 (block_item_switch -> statement_switch .)
    TYPEDEF         reduce using rule 295 (block_item_switch -> statement_switch .)
    EXTERN          reduce using rule 295 (block_item_switch -> statement_switch .)
    STATIC          reduce using rule 295 (block_item_switch -> statement_switch .)
    AUTO            reduce using rule 295 (block_item_switch -> statement_switch .)
    REGISTER        reduce using rule 295 (block_item_switch -> statement_switch .)
    VOID            reduce using rule 295 (block_item_switch -> statement_switch .)
    CHAR            reduce using rule 295 (block_item_switch -> statement_switch .)
    SHORT           reduce using rule 295 (block_item_switch -> statement_switch .)
    INT             reduce using rule 295 (block_item_switch -> statement_switch .)
    LONG            reduce using rule 295 (block_item_switch -> statement_switch .)
    FLOAT           reduce using rule 295 (block_item_switch -> statement_switch .)
    DOUBLE          reduce using rule 295 (block_item_switch -> statement_switch .)
    SIGNED          reduce using rule 295 (block_item_switch -> statement_switch .)
    UNSIGNED        reduce using rule 295 (block_item_switch -> statement_switch .)
    BOOL            reduce using rule 295 (block_item_switch -> statement_switch .)
    CONST           reduce using rule 295 (block_item_switch -> statement_switch .)
    VOLATILE        reduce using rule 295 (block_item_switch -> statement_switch .)
    RESTRICT        reduce using rule 295 (block_item_switch -> statement_switch .)
    ENUM            reduce using rule 295 (block_item_switch -> statement_switch .)
    STRUCT          reduce using rule 295 (block_item_switch -> statement_switch .)
    UNION           reduce using rule 295 (block_item_switch -> statement_switch .)
    INC             reduce using rule 295 (block_item_switch -> statement_switch .)
    DEC             reduce using rule 295 (block_item_switch -> statement_switch .)
    SIZEOF          reduce using rule 295 (block_item_switch -> statement_switch .)
    &               reduce using rule 295 (block_item_switch -> statement_switch .)
    *               reduce using rule 295 (block_item_switch -> statement_switch .)
    +               reduce using rule 295 (block_item_switch -> statement_switch .)
    -               reduce using rule 295 (block_item_switch -> statement_switch .)
    ~               reduce using rule 295 (block_item_switch -> statement_switch .)
    !               reduce using rule 295 (block_item_switch -> statement_switch .)
    (               reduce using rule 295 (block_item_switch -> statement_switch .)
    CONSTANCE       reduce using rule 295 (block_item_switch -> statement_switch .)
    STRING_LITERAL  reduce using rule 295 (block_item_switch -> statement_switch .)


state 561

    (323) iteration_statement_switch -> WHILE ( . expression_variable ) statement_while_switch
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 583
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 562

    (324) iteration_statement_switch -> DO statement_while_switch . WHILE ( expression_variable ) ;

    WHILE           shift and go to state 584


state 563

    (335) statement_while_switch -> labeled_statement_switch .

    WHILE           reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    ELSE            reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    }               reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    {               reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    ;               reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    IF              reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    SWITCH          reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    DO              reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    FOR             reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    GOTO            reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    RETURN          reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    TYPEDEF         reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    EXTERN          reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    STATIC          reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    AUTO            reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    REGISTER        reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    VOID            reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    CHAR            reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    SHORT           reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    INT             reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    LONG            reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    FLOAT           reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    DOUBLE          reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    SIGNED          reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    UNSIGNED        reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    BOOL            reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    CONST           reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    VOLATILE        reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    RESTRICT        reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    (               reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    ID              reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    ENUM            reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    STRUCT          reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    UNION           reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    INC             reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    DEC             reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    SIZEOF          reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    &               reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    *               reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    +               reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    -               reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    ~               reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    !               reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    CONSTANCE       reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    STRING_LITERAL  reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    CASE            reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    DEFAULT         reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    CONTINUE        reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)
    BREAK           reduce using rule 335 (statement_while_switch -> labeled_statement_switch .)


state 564

    (336) statement_while_switch -> compound_statement_while_switch .

    WHILE           reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    ELSE            reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    }               reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    {               reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    ;               reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    IF              reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    SWITCH          reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    DO              reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    FOR             reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    GOTO            reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    RETURN          reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    TYPEDEF         reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    EXTERN          reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    STATIC          reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    AUTO            reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    REGISTER        reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    VOID            reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    CHAR            reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    SHORT           reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    INT             reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    LONG            reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    FLOAT           reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    DOUBLE          reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    SIGNED          reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    UNSIGNED        reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    BOOL            reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    CONST           reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    VOLATILE        reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    RESTRICT        reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    (               reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    ID              reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    ENUM            reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    STRUCT          reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    UNION           reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    INC             reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    DEC             reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    SIZEOF          reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    &               reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    *               reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    +               reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    -               reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    ~               reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    !               reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    CONSTANCE       reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    STRING_LITERAL  reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    CASE            reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    DEFAULT         reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    CONTINUE        reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)
    BREAK           reduce using rule 336 (statement_while_switch -> compound_statement_while_switch .)


state 565

    (337) statement_while_switch -> expression_statement .

    WHILE           reduce using rule 337 (statement_while_switch -> expression_statement .)
    ELSE            reduce using rule 337 (statement_while_switch -> expression_statement .)
    }               reduce using rule 337 (statement_while_switch -> expression_statement .)
    {               reduce using rule 337 (statement_while_switch -> expression_statement .)
    ;               reduce using rule 337 (statement_while_switch -> expression_statement .)
    IF              reduce using rule 337 (statement_while_switch -> expression_statement .)
    SWITCH          reduce using rule 337 (statement_while_switch -> expression_statement .)
    DO              reduce using rule 337 (statement_while_switch -> expression_statement .)
    FOR             reduce using rule 337 (statement_while_switch -> expression_statement .)
    GOTO            reduce using rule 337 (statement_while_switch -> expression_statement .)
    RETURN          reduce using rule 337 (statement_while_switch -> expression_statement .)
    TYPEDEF         reduce using rule 337 (statement_while_switch -> expression_statement .)
    EXTERN          reduce using rule 337 (statement_while_switch -> expression_statement .)
    STATIC          reduce using rule 337 (statement_while_switch -> expression_statement .)
    AUTO            reduce using rule 337 (statement_while_switch -> expression_statement .)
    REGISTER        reduce using rule 337 (statement_while_switch -> expression_statement .)
    VOID            reduce using rule 337 (statement_while_switch -> expression_statement .)
    CHAR            reduce using rule 337 (statement_while_switch -> expression_statement .)
    SHORT           reduce using rule 337 (statement_while_switch -> expression_statement .)
    INT             reduce using rule 337 (statement_while_switch -> expression_statement .)
    LONG            reduce using rule 337 (statement_while_switch -> expression_statement .)
    FLOAT           reduce using rule 337 (statement_while_switch -> expression_statement .)
    DOUBLE          reduce using rule 337 (statement_while_switch -> expression_statement .)
    SIGNED          reduce using rule 337 (statement_while_switch -> expression_statement .)
    UNSIGNED        reduce using rule 337 (statement_while_switch -> expression_statement .)
    BOOL            reduce using rule 337 (statement_while_switch -> expression_statement .)
    CONST           reduce using rule 337 (statement_while_switch -> expression_statement .)
    VOLATILE        reduce using rule 337 (statement_while_switch -> expression_statement .)
    RESTRICT        reduce using rule 337 (statement_while_switch -> expression_statement .)
    (               reduce using rule 337 (statement_while_switch -> expression_statement .)
    ID              reduce using rule 337 (statement_while_switch -> expression_statement .)
    ENUM            reduce using rule 337 (statement_while_switch -> expression_statement .)
    STRUCT          reduce using rule 337 (statement_while_switch -> expression_statement .)
    UNION           reduce using rule 337 (statement_while_switch -> expression_statement .)
    INC             reduce using rule 337 (statement_while_switch -> expression_statement .)
    DEC             reduce using rule 337 (statement_while_switch -> expression_statement .)
    SIZEOF          reduce using rule 337 (statement_while_switch -> expression_statement .)
    &               reduce using rule 337 (statement_while_switch -> expression_statement .)
    *               reduce using rule 337 (statement_while_switch -> expression_statement .)
    +               reduce using rule 337 (statement_while_switch -> expression_statement .)
    -               reduce using rule 337 (statement_while_switch -> expression_statement .)
    ~               reduce using rule 337 (statement_while_switch -> expression_statement .)
    !               reduce using rule 337 (statement_while_switch -> expression_statement .)
    CONSTANCE       reduce using rule 337 (statement_while_switch -> expression_statement .)
    STRING_LITERAL  reduce using rule 337 (statement_while_switch -> expression_statement .)
    CASE            reduce using rule 337 (statement_while_switch -> expression_statement .)
    DEFAULT         reduce using rule 337 (statement_while_switch -> expression_statement .)
    CONTINUE        reduce using rule 337 (statement_while_switch -> expression_statement .)
    BREAK           reduce using rule 337 (statement_while_switch -> expression_statement .)


state 566

    (338) statement_while_switch -> selection_statement_while .

    WHILE           reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    ELSE            reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    }               reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    {               reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    ;               reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    IF              reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    SWITCH          reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    DO              reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    FOR             reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    GOTO            reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    RETURN          reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    TYPEDEF         reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    EXTERN          reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    STATIC          reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    AUTO            reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    REGISTER        reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    VOID            reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    CHAR            reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    SHORT           reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    INT             reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    LONG            reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    FLOAT           reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    DOUBLE          reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    SIGNED          reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    UNSIGNED        reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    BOOL            reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    CONST           reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    VOLATILE        reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    RESTRICT        reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    (               reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    ID              reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    ENUM            reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    STRUCT          reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    UNION           reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    INC             reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    DEC             reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    SIZEOF          reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    &               reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    *               reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    +               reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    -               reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    ~               reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    !               reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    CONSTANCE       reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    STRING_LITERAL  reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    CASE            reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    DEFAULT         reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    CONTINUE        reduce using rule 338 (statement_while_switch -> selection_statement_while .)
    BREAK           reduce using rule 338 (statement_while_switch -> selection_statement_while .)


state 567

    (339) statement_while_switch -> iteration_statement_switch .

    WHILE           reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    ELSE            reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    }               reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    {               reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    ;               reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    IF              reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    SWITCH          reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    DO              reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    FOR             reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    GOTO            reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    RETURN          reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    TYPEDEF         reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    EXTERN          reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    STATIC          reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    AUTO            reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    REGISTER        reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    VOID            reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    CHAR            reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    SHORT           reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    INT             reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    LONG            reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    FLOAT           reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    DOUBLE          reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    SIGNED          reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    UNSIGNED        reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    BOOL            reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    CONST           reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    VOLATILE        reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    RESTRICT        reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    (               reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    ID              reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    ENUM            reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    STRUCT          reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    UNION           reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    INC             reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    DEC             reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    SIZEOF          reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    &               reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    *               reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    +               reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    -               reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    ~               reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    !               reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    CONSTANCE       reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    STRING_LITERAL  reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    CASE            reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    DEFAULT         reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    CONTINUE        reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)
    BREAK           reduce using rule 339 (statement_while_switch -> iteration_statement_switch .)


state 568

    (340) statement_while_switch -> jump_statement_while .

    WHILE           reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    ELSE            reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    }               reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    {               reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    ;               reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    IF              reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    SWITCH          reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    DO              reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    FOR             reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    GOTO            reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    RETURN          reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    TYPEDEF         reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    EXTERN          reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    STATIC          reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    AUTO            reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    REGISTER        reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    VOID            reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    CHAR            reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    SHORT           reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    INT             reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    LONG            reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    FLOAT           reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    DOUBLE          reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    SIGNED          reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    UNSIGNED        reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    BOOL            reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    CONST           reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    VOLATILE        reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    RESTRICT        reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    (               reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    ID              reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    ENUM            reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    STRUCT          reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    UNION           reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    INC             reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    DEC             reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    SIZEOF          reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    &               reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    *               reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    +               reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    -               reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    ~               reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    !               reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    CONSTANCE       reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    STRING_LITERAL  reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    CASE            reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    DEFAULT         reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    CONTINUE        reduce using rule 340 (statement_while_switch -> jump_statement_while .)
    BREAK           reduce using rule 340 (statement_while_switch -> jump_statement_while .)


state 569

    (329) compound_statement_while_switch -> { . }
    (330) compound_statement_while_switch -> { . block_item_list_while_switch }
    (331) block_item_list_while_switch -> . block_item_while_switch
    (332) block_item_list_while_switch -> . block_item_list_while_switch block_item_while_switch
    (333) block_item_while_switch -> . declaration
    (334) block_item_while_switch -> . statement_while_switch
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (335) statement_while_switch -> . labeled_statement_switch
    (336) statement_while_switch -> . compound_statement_while_switch
    (337) statement_while_switch -> . expression_statement
    (338) statement_while_switch -> . selection_statement_while
    (339) statement_while_switch -> . iteration_statement_switch
    (340) statement_while_switch -> . jump_statement_while
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (302) labeled_statement_switch -> . ID :
    (303) labeled_statement_switch -> . CASE constant_expression : statement
    (304) labeled_statement_switch -> . DEFAULT : statement
    (329) compound_statement_while_switch -> . { }
    (330) compound_statement_while_switch -> . { block_item_list_while_switch }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (323) iteration_statement_switch -> . WHILE ( expression_variable ) statement_while_switch
    (324) iteration_statement_switch -> . DO statement_while_switch WHILE ( expression_variable ) ;
    (325) iteration_statement_switch -> . FOR ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> . FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> . FOR ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> . FOR ( declaration expression_statement expression_variable ) statement_while_switch
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 585
    ID              shift and go to state 530
    CASE            shift and go to state 531
    DEFAULT         shift and go to state 532
    {               shift and go to state 569
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 534
    DO              shift and go to state 535
    FOR             shift and go to state 536
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    block_item_list_while_switch   shift and go to state 586
    block_item_while_switch        shift and go to state 587
    declaration                    shift and go to state 588
    statement_while_switch         shift and go to state 589
    declaration_specifiers         shift and go to state 123
    labeled_statement_switch       shift and go to state 563
    compound_statement_while_switch shift and go to state 564
    expression_statement           shift and go to state 565
    selection_statement_while      shift and go to state 566
    iteration_statement_switch     shift and go to state 567
    jump_statement_while           shift and go to state 568
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    expression_variable            shift and go to state 132
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    assignment_expression          shift and go to state 141
    struct_or_union                shift and go to state 29
    identifier                     shift and go to state 220
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 570

    (325) iteration_statement_switch -> FOR ( . expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> FOR ( . expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> FOR ( . declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> FOR ( . declaration expression_statement expression_variable ) statement_while_switch
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ;               shift and go to state 124
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    ENUM            shift and go to state 30
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 590
    expression_variable            shift and go to state 132
    declaration                    shift and go to state 591
    declaration_specifiers         shift and go to state 123
    assignment_expression          shift and go to state 141
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    struct_or_union                shift and go to state 29
    identifier                     shift and go to state 220
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 571

    (318) iteration_statement -> DO statement_while WHILE ( expression_variable ) . ;

    ;               shift and go to state 592


state 572

    (287) selection_statement_while -> IF ( expression_variable ) statement_while . ELSE statement_while
    (288) selection_statement_while -> IF ( expression_variable ) statement_while .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 593
    WHILE           reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    }               reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    {               reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    ;               reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    IF              reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    SWITCH          reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    DO              reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    FOR             reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    GOTO            reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    CONTINUE        reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    BREAK           reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    RETURN          reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    TYPEDEF         reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    EXTERN          reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    STATIC          reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    AUTO            reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    REGISTER        reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    VOID            reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    CHAR            reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    SHORT           reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    INT             reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    LONG            reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    FLOAT           reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    DOUBLE          reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    SIGNED          reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    UNSIGNED        reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    BOOL            reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    CONST           reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    VOLATILE        reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    RESTRICT        reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    (               reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    ID              reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    ENUM            reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    STRUCT          reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    UNION           reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    INC             reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    DEC             reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    SIZEOF          reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    &               reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    *               reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    +               reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    -               reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    ~               reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    !               reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    CONSTANCE       reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    STRING_LITERAL  reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    CASE            reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)
    DEFAULT         reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .)

  ! ELSE            [ reduce using rule 288 (selection_statement_while -> IF ( expression_variable ) statement_while .) ]


state 573

    (289) selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .

    WHILE           reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    }               reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    {               reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    ;               reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    IF              reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    SWITCH          reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    DO              reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    FOR             reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    GOTO            reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    CONTINUE        reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    BREAK           reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    RETURN          reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    TYPEDEF         reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    EXTERN          reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    STATIC          reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    AUTO            reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    REGISTER        reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    VOID            reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    CHAR            reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    SHORT           reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    INT             reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    LONG            reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    FLOAT           reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    DOUBLE          reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    SIGNED          reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    UNSIGNED        reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    BOOL            reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    CONST           reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    VOLATILE        reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    RESTRICT        reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    (               reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    ID              reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    ENUM            reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    STRUCT          reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    UNION           reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    INC             reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    DEC             reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    SIZEOF          reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    &               reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    *               reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    +               reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    -               reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    ~               reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    !               reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    CONSTANCE       reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    STRING_LITERAL  reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    ELSE            reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    CASE            reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)
    DEFAULT         reduce using rule 289 (selection_statement_while -> SWITCH ( expression_variable ) statement_while_switch .)


state 574

    (319) iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .

    }               reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    {               reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    ;               reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    IF              reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    SWITCH          reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    WHILE           reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    DO              reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    FOR             reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    GOTO            reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    RETURN          reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    TYPEDEF         reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    EXTERN          reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    STATIC          reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    AUTO            reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    REGISTER        reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    VOID            reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    CHAR            reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    SHORT           reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    INT             reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    LONG            reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    FLOAT           reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    DOUBLE          reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    SIGNED          reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    UNSIGNED        reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    BOOL            reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    CONST           reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    VOLATILE        reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    RESTRICT        reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    (               reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    ID              reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    ENUM            reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    STRUCT          reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    UNION           reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    INC             reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    DEC             reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    SIZEOF          reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    &               reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    *               reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    +               reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    -               reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    ~               reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    !               reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    CONSTANCE       reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    STRING_LITERAL  reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    CONTINUE        reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    BREAK           reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    ELSE            reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    CASE            reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)
    DEFAULT         reduce using rule 319 (iteration_statement -> FOR ( expression_statement expression_statement ) statement_while .)


state 575

    (320) iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) . statement_while
    (311) statement_while -> . labeled_statement
    (312) statement_while -> . compound_statement_while
    (313) statement_while -> . expression_statement
    (314) statement_while -> . selection_statement_while
    (315) statement_while -> . iteration_statement
    (316) statement_while -> . jump_statement_while
    (203) labeled_statement -> . identifier :
    (305) compound_statement_while -> . { }
    (306) compound_statement_while -> . { block_item_list_while }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 259
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 255
    expression_variable            shift and go to state 132
    statement_while                shift and go to state 594
    labeled_statement              shift and go to state 253
    compound_statement_while       shift and go to state 254
    selection_statement_while      shift and go to state 256
    iteration_statement            shift and go to state 257
    jump_statement_while           shift and go to state 258
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 576

    (321) iteration_statement -> FOR ( declaration expression_statement ) statement_while .

    }               reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    {               reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    ;               reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    IF              reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    SWITCH          reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    WHILE           reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    DO              reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    FOR             reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    GOTO            reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    RETURN          reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    TYPEDEF         reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    EXTERN          reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    STATIC          reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    AUTO            reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    REGISTER        reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    VOID            reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    CHAR            reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    SHORT           reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    INT             reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    LONG            reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    FLOAT           reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    DOUBLE          reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    SIGNED          reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    UNSIGNED        reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    BOOL            reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    CONST           reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    VOLATILE        reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    RESTRICT        reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    (               reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    ID              reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    ENUM            reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    STRUCT          reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    UNION           reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    INC             reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    DEC             reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    SIZEOF          reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    &               reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    *               reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    +               reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    -               reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    ~               reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    !               reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    CONSTANCE       reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    STRING_LITERAL  reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    CONTINUE        reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    BREAK           reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    ELSE            reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    CASE            reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)
    DEFAULT         reduce using rule 321 (iteration_statement -> FOR ( declaration expression_statement ) statement_while .)


state 577

    (322) iteration_statement -> FOR ( declaration expression_statement expression_variable ) . statement_while
    (311) statement_while -> . labeled_statement
    (312) statement_while -> . compound_statement_while
    (313) statement_while -> . expression_statement
    (314) statement_while -> . selection_statement_while
    (315) statement_while -> . iteration_statement
    (316) statement_while -> . jump_statement_while
    (203) labeled_statement -> . identifier :
    (305) compound_statement_while -> . { }
    (306) compound_statement_while -> . { block_item_list_while }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 259
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 255
    expression_variable            shift and go to state 132
    statement_while                shift and go to state 595
    labeled_statement              shift and go to state 253
    compound_statement_while       shift and go to state 254
    selection_statement_while      shift and go to state 256
    iteration_statement            shift and go to state 257
    jump_statement_while           shift and go to state 258
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 578

    (284) selection_statement -> IF ( expression_variable ) statement ELSE statement .

    }               reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    {               reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    ;               reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    IF              reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    SWITCH          reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    WHILE           reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    DO              reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    FOR             reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    GOTO            reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    RETURN          reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    TYPEDEF         reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    EXTERN          reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    STATIC          reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    AUTO            reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    REGISTER        reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    VOID            reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    CHAR            reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    SHORT           reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    INT             reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    LONG            reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    FLOAT           reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    DOUBLE          reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    SIGNED          reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    UNSIGNED        reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    BOOL            reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    CONST           reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    VOLATILE        reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    RESTRICT        reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    (               reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    ID              reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    ENUM            reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    STRUCT          reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    UNION           reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    INC             reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    DEC             reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    SIZEOF          reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    &               reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    *               reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    +               reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    -               reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    ~               reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    !               reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    CONSTANCE       reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    STRING_LITERAL  reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    ELSE            reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    CASE            reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    DEFAULT         reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    CONTINUE        reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)
    BREAK           reduce using rule 284 (selection_statement -> IF ( expression_variable ) statement ELSE statement .)


state 579

    (303) labeled_statement_switch -> CASE constant_expression : . statement
    (197) statement -> . labeled_statement
    (198) statement -> . compound_statement
    (199) statement -> . expression_statement
    (200) statement -> . selection_statement
    (201) statement -> . iteration_statement
    (202) statement -> . jump_statement
    (203) labeled_statement -> . identifier :
    (191) compound_statement -> . { }
    (192) compound_statement -> . { block_item_list }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (284) selection_statement -> . IF ( expression_variable ) statement ELSE statement
    (285) selection_statement -> . IF ( expression_variable ) statement
    (286) selection_statement -> . SWITCH ( expression_variable ) statement_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (341) jump_statement -> . GOTO ID ;
    (342) jump_statement -> . RETURN ;
    (343) jump_statement -> . RETURN expression_variable ;
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 76
    ;               shift and go to state 124
    IF              shift and go to state 133
    SWITCH          shift and go to state 135
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 139
    RETURN          shift and go to state 140
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    statement                      shift and go to state 596
    labeled_statement              shift and go to state 125
    compound_statement             shift and go to state 126
    expression_statement           shift and go to state 127
    selection_statement            shift and go to state 128
    iteration_statement            shift and go to state 129
    jump_statement                 shift and go to state 130
    identifier                     shift and go to state 131
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 580

    (304) labeled_statement_switch -> DEFAULT : statement .

    ELSE            reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    }               reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    {               reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    ;               reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    IF              reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    SWITCH          reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    WHILE           reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    DO              reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    FOR             reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    GOTO            reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    RETURN          reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    TYPEDEF         reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    EXTERN          reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    STATIC          reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    AUTO            reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    REGISTER        reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    VOID            reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    CHAR            reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    SHORT           reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    INT             reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    LONG            reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    FLOAT           reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    DOUBLE          reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    SIGNED          reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    UNSIGNED        reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    BOOL            reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    CONST           reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    VOLATILE        reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    RESTRICT        reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    (               reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    ID              reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    ENUM            reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    STRUCT          reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    UNION           reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    INC             reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    DEC             reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    SIZEOF          reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    &               reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    *               reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    +               reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    -               reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    ~               reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    !               reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    CONSTANCE       reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    STRING_LITERAL  reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    CASE            reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    DEFAULT         reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    CONTINUE        reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)
    BREAK           reduce using rule 304 (labeled_statement_switch -> DEFAULT : statement .)


state 581

    (291) compound_statement_switch -> { block_item_list_switch } .

    ELSE            reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    }               reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    {               reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    ;               reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    IF              reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    SWITCH          reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    WHILE           reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    DO              reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    FOR             reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    GOTO            reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    RETURN          reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    TYPEDEF         reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    EXTERN          reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    STATIC          reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    AUTO            reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    REGISTER        reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    VOID            reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    CHAR            reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    SHORT           reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    INT             reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    LONG            reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    FLOAT           reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    DOUBLE          reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    SIGNED          reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    UNSIGNED        reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    BOOL            reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    CONST           reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    VOLATILE        reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    RESTRICT        reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    (               reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    ID              reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    ENUM            reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    STRUCT          reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    UNION           reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    INC             reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    DEC             reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    SIZEOF          reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    &               reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    *               reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    +               reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    -               reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    ~               reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    !               reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    CONSTANCE       reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    STRING_LITERAL  reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    CASE            reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    DEFAULT         reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    CONTINUE        reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)
    BREAK           reduce using rule 291 (compound_statement_switch -> { block_item_list_switch } .)


state 582

    (293) block_item_list_switch -> block_item_list_switch block_item_switch .

    }               reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    ID              reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    CASE            reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    DEFAULT         reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    {               reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    ;               reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    IF              reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    SWITCH          reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    WHILE           reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    DO              reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    FOR             reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    GOTO            reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    RETURN          reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    TYPEDEF         reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    EXTERN          reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    STATIC          reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    AUTO            reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    REGISTER        reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    VOID            reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    CHAR            reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    SHORT           reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    INT             reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    LONG            reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    FLOAT           reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    DOUBLE          reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    SIGNED          reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    UNSIGNED        reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    BOOL            reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    CONST           reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    VOLATILE        reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    RESTRICT        reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    ENUM            reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    STRUCT          reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    UNION           reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    INC             reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    DEC             reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    SIZEOF          reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    &               reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    *               reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    +               reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    -               reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    ~               reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    !               reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    (               reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    CONSTANCE       reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)
    STRING_LITERAL  reduce using rule 293 (block_item_list_switch -> block_item_list_switch block_item_switch .)


state 583

    (323) iteration_statement_switch -> WHILE ( expression_variable . ) statement_while_switch
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 597
    ,               shift and go to state 243


state 584

    (324) iteration_statement_switch -> DO statement_while_switch WHILE . ( expression_variable ) ;

    (               shift and go to state 598


state 585

    (329) compound_statement_while_switch -> { } .

    WHILE           reduce using rule 329 (compound_statement_while_switch -> { } .)
    ELSE            reduce using rule 329 (compound_statement_while_switch -> { } .)
    }               reduce using rule 329 (compound_statement_while_switch -> { } .)
    {               reduce using rule 329 (compound_statement_while_switch -> { } .)
    ;               reduce using rule 329 (compound_statement_while_switch -> { } .)
    IF              reduce using rule 329 (compound_statement_while_switch -> { } .)
    SWITCH          reduce using rule 329 (compound_statement_while_switch -> { } .)
    DO              reduce using rule 329 (compound_statement_while_switch -> { } .)
    FOR             reduce using rule 329 (compound_statement_while_switch -> { } .)
    GOTO            reduce using rule 329 (compound_statement_while_switch -> { } .)
    RETURN          reduce using rule 329 (compound_statement_while_switch -> { } .)
    TYPEDEF         reduce using rule 329 (compound_statement_while_switch -> { } .)
    EXTERN          reduce using rule 329 (compound_statement_while_switch -> { } .)
    STATIC          reduce using rule 329 (compound_statement_while_switch -> { } .)
    AUTO            reduce using rule 329 (compound_statement_while_switch -> { } .)
    REGISTER        reduce using rule 329 (compound_statement_while_switch -> { } .)
    VOID            reduce using rule 329 (compound_statement_while_switch -> { } .)
    CHAR            reduce using rule 329 (compound_statement_while_switch -> { } .)
    SHORT           reduce using rule 329 (compound_statement_while_switch -> { } .)
    INT             reduce using rule 329 (compound_statement_while_switch -> { } .)
    LONG            reduce using rule 329 (compound_statement_while_switch -> { } .)
    FLOAT           reduce using rule 329 (compound_statement_while_switch -> { } .)
    DOUBLE          reduce using rule 329 (compound_statement_while_switch -> { } .)
    SIGNED          reduce using rule 329 (compound_statement_while_switch -> { } .)
    UNSIGNED        reduce using rule 329 (compound_statement_while_switch -> { } .)
    BOOL            reduce using rule 329 (compound_statement_while_switch -> { } .)
    CONST           reduce using rule 329 (compound_statement_while_switch -> { } .)
    VOLATILE        reduce using rule 329 (compound_statement_while_switch -> { } .)
    RESTRICT        reduce using rule 329 (compound_statement_while_switch -> { } .)
    (               reduce using rule 329 (compound_statement_while_switch -> { } .)
    ID              reduce using rule 329 (compound_statement_while_switch -> { } .)
    ENUM            reduce using rule 329 (compound_statement_while_switch -> { } .)
    STRUCT          reduce using rule 329 (compound_statement_while_switch -> { } .)
    UNION           reduce using rule 329 (compound_statement_while_switch -> { } .)
    INC             reduce using rule 329 (compound_statement_while_switch -> { } .)
    DEC             reduce using rule 329 (compound_statement_while_switch -> { } .)
    SIZEOF          reduce using rule 329 (compound_statement_while_switch -> { } .)
    &               reduce using rule 329 (compound_statement_while_switch -> { } .)
    *               reduce using rule 329 (compound_statement_while_switch -> { } .)
    +               reduce using rule 329 (compound_statement_while_switch -> { } .)
    -               reduce using rule 329 (compound_statement_while_switch -> { } .)
    ~               reduce using rule 329 (compound_statement_while_switch -> { } .)
    !               reduce using rule 329 (compound_statement_while_switch -> { } .)
    CONSTANCE       reduce using rule 329 (compound_statement_while_switch -> { } .)
    STRING_LITERAL  reduce using rule 329 (compound_statement_while_switch -> { } .)
    CASE            reduce using rule 329 (compound_statement_while_switch -> { } .)
    DEFAULT         reduce using rule 329 (compound_statement_while_switch -> { } .)
    CONTINUE        reduce using rule 329 (compound_statement_while_switch -> { } .)
    BREAK           reduce using rule 329 (compound_statement_while_switch -> { } .)


state 586

    (330) compound_statement_while_switch -> { block_item_list_while_switch . }
    (332) block_item_list_while_switch -> block_item_list_while_switch . block_item_while_switch
    (333) block_item_while_switch -> . declaration
    (334) block_item_while_switch -> . statement_while_switch
    (5) declaration -> . declaration_specifiers ;
    (6) declaration -> . declaration_specifiers init_declarator_list ;
    (335) statement_while_switch -> . labeled_statement_switch
    (336) statement_while_switch -> . compound_statement_while_switch
    (337) statement_while_switch -> . expression_statement
    (338) statement_while_switch -> . selection_statement_while
    (339) statement_while_switch -> . iteration_statement_switch
    (340) statement_while_switch -> . jump_statement_while
    (11) declaration_specifiers -> . storage_class_specifier declaration_specifiers_no_s
    (12) declaration_specifiers -> . type_specifier
    (13) declaration_specifiers -> . type_specifier declaration_specifiers_no_ts
    (14) declaration_specifiers -> . type_qualifier declaration_specifiers
    (302) labeled_statement_switch -> . ID :
    (303) labeled_statement_switch -> . CASE constant_expression : statement
    (304) labeled_statement_switch -> . DEFAULT : statement
    (329) compound_statement_while_switch -> . { }
    (330) compound_statement_while_switch -> . { block_item_list_while_switch }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (323) iteration_statement_switch -> . WHILE ( expression_variable ) statement_while_switch
    (324) iteration_statement_switch -> . DO statement_while_switch WHILE ( expression_variable ) ;
    (325) iteration_statement_switch -> . FOR ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> . FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> . FOR ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> . FOR ( declaration expression_statement expression_variable ) statement_while_switch
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (24) storage_class_specifier -> . TYPEDEF
    (25) storage_class_specifier -> . EXTERN
    (26) storage_class_specifier -> . STATIC
    (27) storage_class_specifier -> . AUTO
    (28) storage_class_specifier -> . REGISTER
    (29) type_specifier -> . VOID
    (30) type_specifier -> . CHAR
    (31) type_specifier -> . SHORT
    (32) type_specifier -> . SHORT INT
    (33) type_specifier -> . INT SHORT
    (34) type_specifier -> . INT
    (35) type_specifier -> . LONG
    (36) type_specifier -> . LONG INT
    (37) type_specifier -> . INT LONG
    (38) type_specifier -> . FLOAT
    (39) type_specifier -> . DOUBLE
    (40) type_specifier -> . FLOAT LONG
    (41) type_specifier -> . LONG FLOAT
    (42) type_specifier -> . DOUBLE LONG
    (43) type_specifier -> . LONG DOUBLE
    (44) type_specifier -> . SIGNED
    (45) type_specifier -> . SIGNED INT
    (46) type_specifier -> . SIGNED SHORT
    (47) type_specifier -> . SIGNED SHORT INT
    (48) type_specifier -> . SIGNED INT SHORT
    (49) type_specifier -> . SIGNED LONG
    (50) type_specifier -> . SIGNED LONG INT
    (51) type_specifier -> . SIGNED INT LONG
    (52) type_specifier -> . UNSIGNED
    (53) type_specifier -> . UNSIGNED INT
    (54) type_specifier -> . UNSIGNED SHORT
    (55) type_specifier -> . UNSIGNED SHORT INT
    (56) type_specifier -> . UNSIGNED INT SHORT
    (57) type_specifier -> . UNSIGNED LONG
    (58) type_specifier -> . UNSIGNED LONG INT
    (59) type_specifier -> . UNSIGNED INT LONG
    (60) type_specifier -> . struct_or_union_specifier
    (61) type_specifier -> . enum_specifier
    (62) type_specifier -> . BOOL
    (63) type_qualifier -> . CONST
    (64) type_qualifier -> . VOLATILE
    (65) type_qualifier -> . RESTRICT
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (75) struct_or_union_specifier -> . struct_or_union identifier { struct_declaration_list }
    (76) struct_or_union_specifier -> . struct_or_union { struct_declaration_list }
    (77) struct_or_union_specifier -> . struct_or_union identifier
    (66) enum_specifier -> . ENUM { enumerator_list }
    (67) enum_specifier -> . ENUM identifier { enumerator_list }
    (68) enum_specifier -> . ENUM { enumerator_list , }
    (69) enum_specifier -> . ENUM identifier { enumerator_list , }
    (70) enum_specifier -> . ENUM identifier
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (78) struct_or_union -> . STRUCT
    (79) struct_or_union -> . UNION
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    }               shift and go to state 599
    ID              shift and go to state 530
    CASE            shift and go to state 531
    DEFAULT         shift and go to state 532
    {               shift and go to state 569
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 534
    DO              shift and go to state 535
    FOR             shift and go to state 536
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    TYPEDEF         shift and go to state 9
    EXTERN          shift and go to state 10
    STATIC          shift and go to state 11
    AUTO            shift and go to state 12
    REGISTER        shift and go to state 13
    VOID            shift and go to state 14
    CHAR            shift and go to state 15
    SHORT           shift and go to state 16
    INT             shift and go to state 17
    LONG            shift and go to state 18
    FLOAT           shift and go to state 19
    DOUBLE          shift and go to state 20
    SIGNED          shift and go to state 21
    UNSIGNED        shift and go to state 22
    BOOL            shift and go to state 25
    CONST           shift and go to state 26
    VOLATILE        shift and go to state 27
    RESTRICT        shift and go to state 28
    ENUM            shift and go to state 30
    STRUCT          shift and go to state 31
    UNION           shift and go to state 32
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    block_item_while_switch        shift and go to state 600
    declaration                    shift and go to state 588
    statement_while_switch         shift and go to state 589
    declaration_specifiers         shift and go to state 123
    labeled_statement_switch       shift and go to state 563
    compound_statement_while_switch shift and go to state 564
    expression_statement           shift and go to state 565
    selection_statement_while      shift and go to state 566
    iteration_statement_switch     shift and go to state 567
    jump_statement_while           shift and go to state 568
    storage_class_specifier        shift and go to state 6
    type_specifier                 shift and go to state 7
    type_qualifier                 shift and go to state 8
    expression_variable            shift and go to state 132
    struct_or_union_specifier      shift and go to state 23
    enum_specifier                 shift and go to state 24
    assignment_expression          shift and go to state 141
    struct_or_union                shift and go to state 29
    identifier                     shift and go to state 220
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 587

    (331) block_item_list_while_switch -> block_item_while_switch .

    }               reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    ID              reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    CASE            reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    DEFAULT         reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    {               reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    ;               reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    IF              reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    SWITCH          reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    WHILE           reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    DO              reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    FOR             reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    GOTO            reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    CONTINUE        reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    BREAK           reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    RETURN          reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    TYPEDEF         reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    EXTERN          reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    STATIC          reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    AUTO            reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    REGISTER        reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    VOID            reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    CHAR            reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    SHORT           reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    INT             reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    LONG            reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    FLOAT           reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    DOUBLE          reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    SIGNED          reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    UNSIGNED        reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    BOOL            reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    CONST           reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    VOLATILE        reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    RESTRICT        reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    ENUM            reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    STRUCT          reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    UNION           reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    INC             reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    DEC             reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    SIZEOF          reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    &               reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    *               reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    +               reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    -               reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    ~               reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    !               reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    (               reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    CONSTANCE       reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)
    STRING_LITERAL  reduce using rule 331 (block_item_list_while_switch -> block_item_while_switch .)


state 588

    (333) block_item_while_switch -> declaration .

    }               reduce using rule 333 (block_item_while_switch -> declaration .)
    ID              reduce using rule 333 (block_item_while_switch -> declaration .)
    CASE            reduce using rule 333 (block_item_while_switch -> declaration .)
    DEFAULT         reduce using rule 333 (block_item_while_switch -> declaration .)
    {               reduce using rule 333 (block_item_while_switch -> declaration .)
    ;               reduce using rule 333 (block_item_while_switch -> declaration .)
    IF              reduce using rule 333 (block_item_while_switch -> declaration .)
    SWITCH          reduce using rule 333 (block_item_while_switch -> declaration .)
    WHILE           reduce using rule 333 (block_item_while_switch -> declaration .)
    DO              reduce using rule 333 (block_item_while_switch -> declaration .)
    FOR             reduce using rule 333 (block_item_while_switch -> declaration .)
    GOTO            reduce using rule 333 (block_item_while_switch -> declaration .)
    CONTINUE        reduce using rule 333 (block_item_while_switch -> declaration .)
    BREAK           reduce using rule 333 (block_item_while_switch -> declaration .)
    RETURN          reduce using rule 333 (block_item_while_switch -> declaration .)
    TYPEDEF         reduce using rule 333 (block_item_while_switch -> declaration .)
    EXTERN          reduce using rule 333 (block_item_while_switch -> declaration .)
    STATIC          reduce using rule 333 (block_item_while_switch -> declaration .)
    AUTO            reduce using rule 333 (block_item_while_switch -> declaration .)
    REGISTER        reduce using rule 333 (block_item_while_switch -> declaration .)
    VOID            reduce using rule 333 (block_item_while_switch -> declaration .)
    CHAR            reduce using rule 333 (block_item_while_switch -> declaration .)
    SHORT           reduce using rule 333 (block_item_while_switch -> declaration .)
    INT             reduce using rule 333 (block_item_while_switch -> declaration .)
    LONG            reduce using rule 333 (block_item_while_switch -> declaration .)
    FLOAT           reduce using rule 333 (block_item_while_switch -> declaration .)
    DOUBLE          reduce using rule 333 (block_item_while_switch -> declaration .)
    SIGNED          reduce using rule 333 (block_item_while_switch -> declaration .)
    UNSIGNED        reduce using rule 333 (block_item_while_switch -> declaration .)
    BOOL            reduce using rule 333 (block_item_while_switch -> declaration .)
    CONST           reduce using rule 333 (block_item_while_switch -> declaration .)
    VOLATILE        reduce using rule 333 (block_item_while_switch -> declaration .)
    RESTRICT        reduce using rule 333 (block_item_while_switch -> declaration .)
    ENUM            reduce using rule 333 (block_item_while_switch -> declaration .)
    STRUCT          reduce using rule 333 (block_item_while_switch -> declaration .)
    UNION           reduce using rule 333 (block_item_while_switch -> declaration .)
    INC             reduce using rule 333 (block_item_while_switch -> declaration .)
    DEC             reduce using rule 333 (block_item_while_switch -> declaration .)
    SIZEOF          reduce using rule 333 (block_item_while_switch -> declaration .)
    &               reduce using rule 333 (block_item_while_switch -> declaration .)
    *               reduce using rule 333 (block_item_while_switch -> declaration .)
    +               reduce using rule 333 (block_item_while_switch -> declaration .)
    -               reduce using rule 333 (block_item_while_switch -> declaration .)
    ~               reduce using rule 333 (block_item_while_switch -> declaration .)
    !               reduce using rule 333 (block_item_while_switch -> declaration .)
    (               reduce using rule 333 (block_item_while_switch -> declaration .)
    CONSTANCE       reduce using rule 333 (block_item_while_switch -> declaration .)
    STRING_LITERAL  reduce using rule 333 (block_item_while_switch -> declaration .)


state 589

    (334) block_item_while_switch -> statement_while_switch .

    }               reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    ID              reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    CASE            reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    DEFAULT         reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    {               reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    ;               reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    IF              reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    SWITCH          reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    WHILE           reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    DO              reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    FOR             reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    GOTO            reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    CONTINUE        reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    BREAK           reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    RETURN          reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    TYPEDEF         reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    EXTERN          reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    STATIC          reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    AUTO            reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    REGISTER        reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    VOID            reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    CHAR            reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    SHORT           reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    INT             reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    LONG            reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    FLOAT           reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    DOUBLE          reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    SIGNED          reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    UNSIGNED        reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    BOOL            reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    CONST           reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    VOLATILE        reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    RESTRICT        reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    ENUM            reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    STRUCT          reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    UNION           reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    INC             reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    DEC             reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    SIZEOF          reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    &               reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    *               reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    +               reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    -               reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    ~               reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    !               reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    (               reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    CONSTANCE       reduce using rule 334 (block_item_while_switch -> statement_while_switch .)
    STRING_LITERAL  reduce using rule 334 (block_item_while_switch -> statement_while_switch .)


state 590

    (325) iteration_statement_switch -> FOR ( expression_statement . expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> FOR ( expression_statement . expression_statement expression_variable ) statement_while_switch
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ;               shift and go to state 124
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 601
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 591

    (327) iteration_statement_switch -> FOR ( declaration . expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> FOR ( declaration . expression_statement expression_variable ) statement_while_switch
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ;               shift and go to state 124
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 602
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 592

    (318) iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .

    }               reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    {               reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    ;               reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    IF              reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    SWITCH          reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    WHILE           reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    DO              reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    FOR             reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    GOTO            reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    RETURN          reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    TYPEDEF         reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    EXTERN          reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    STATIC          reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    AUTO            reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    REGISTER        reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    VOID            reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    CHAR            reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    SHORT           reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    INT             reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    LONG            reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    FLOAT           reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    DOUBLE          reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    SIGNED          reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    UNSIGNED        reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    BOOL            reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    CONST           reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    VOLATILE        reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    RESTRICT        reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    (               reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    ID              reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    ENUM            reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    STRUCT          reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    UNION           reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    INC             reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    DEC             reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    SIZEOF          reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    &               reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    *               reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    +               reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    -               reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    ~               reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    !               reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    CONSTANCE       reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    STRING_LITERAL  reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    CONTINUE        reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    BREAK           reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    ELSE            reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    CASE            reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)
    DEFAULT         reduce using rule 318 (iteration_statement -> DO statement_while WHILE ( expression_variable ) ; .)


state 593

    (287) selection_statement_while -> IF ( expression_variable ) statement_while ELSE . statement_while
    (311) statement_while -> . labeled_statement
    (312) statement_while -> . compound_statement_while
    (313) statement_while -> . expression_statement
    (314) statement_while -> . selection_statement_while
    (315) statement_while -> . iteration_statement
    (316) statement_while -> . jump_statement_while
    (203) labeled_statement -> . identifier :
    (305) compound_statement_while -> . { }
    (306) compound_statement_while -> . { block_item_list_while }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (317) iteration_statement -> . WHILE ( expression_variable ) statement_while
    (318) iteration_statement -> . DO statement_while WHILE ( expression_variable ) ;
    (319) iteration_statement -> . FOR ( expression_statement expression_statement ) statement_while
    (320) iteration_statement -> . FOR ( expression_statement expression_statement expression_variable ) statement_while
    (321) iteration_statement -> . FOR ( declaration expression_statement ) statement_while
    (322) iteration_statement -> . FOR ( declaration expression_statement expression_variable ) statement_while
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    {               shift and go to state 259
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 136
    DO              shift and go to state 137
    FOR             shift and go to state 138
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    (               shift and go to state 134
    ID              shift and go to state 42
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 132
    statement_while                shift and go to state 603
    labeled_statement              shift and go to state 253
    compound_statement_while       shift and go to state 254
    expression_statement           shift and go to state 255
    selection_statement_while      shift and go to state 256
    iteration_statement            shift and go to state 257
    jump_statement_while           shift and go to state 258
    identifier                     shift and go to state 131
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 594

    (320) iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .

    }               reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    {               reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    ;               reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    IF              reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    SWITCH          reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    WHILE           reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    DO              reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    FOR             reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    GOTO            reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    RETURN          reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    TYPEDEF         reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    EXTERN          reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    STATIC          reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    AUTO            reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    REGISTER        reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    VOID            reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    CHAR            reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    SHORT           reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    INT             reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    LONG            reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    FLOAT           reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    DOUBLE          reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    SIGNED          reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    UNSIGNED        reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    BOOL            reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    CONST           reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    VOLATILE        reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    RESTRICT        reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    (               reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    ID              reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    ENUM            reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    STRUCT          reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    UNION           reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    INC             reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    DEC             reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    SIZEOF          reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    &               reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    *               reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    +               reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    -               reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    ~               reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    !               reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    CONSTANCE       reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    STRING_LITERAL  reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    CONTINUE        reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    BREAK           reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    ELSE            reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    CASE            reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)
    DEFAULT         reduce using rule 320 (iteration_statement -> FOR ( expression_statement expression_statement expression_variable ) statement_while .)


state 595

    (322) iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .

    }               reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    {               reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    ;               reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    IF              reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    SWITCH          reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    WHILE           reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    DO              reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    FOR             reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    GOTO            reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    RETURN          reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    TYPEDEF         reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    EXTERN          reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    STATIC          reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    AUTO            reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    REGISTER        reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    VOID            reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    CHAR            reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    SHORT           reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    INT             reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    LONG            reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    FLOAT           reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    DOUBLE          reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    SIGNED          reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    UNSIGNED        reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    BOOL            reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    CONST           reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    VOLATILE        reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    RESTRICT        reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    (               reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    ID              reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    ENUM            reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    STRUCT          reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    UNION           reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    INC             reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    DEC             reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    SIZEOF          reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    &               reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    *               reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    +               reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    -               reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    ~               reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    !               reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    CONSTANCE       reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    STRING_LITERAL  reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    CONTINUE        reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    BREAK           reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    ELSE            reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    CASE            reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)
    DEFAULT         reduce using rule 322 (iteration_statement -> FOR ( declaration expression_statement expression_variable ) statement_while .)


state 596

    (303) labeled_statement_switch -> CASE constant_expression : statement .

    ELSE            reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    }               reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    {               reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    ;               reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    IF              reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    SWITCH          reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    WHILE           reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    DO              reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    FOR             reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    GOTO            reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    RETURN          reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    TYPEDEF         reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    EXTERN          reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    STATIC          reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    AUTO            reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    REGISTER        reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    VOID            reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    CHAR            reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    SHORT           reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    INT             reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    LONG            reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    FLOAT           reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    DOUBLE          reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    SIGNED          reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    UNSIGNED        reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    BOOL            reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    CONST           reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    VOLATILE        reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    RESTRICT        reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    (               reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    ID              reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    ENUM            reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    STRUCT          reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    UNION           reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    INC             reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    DEC             reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    SIZEOF          reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    &               reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    *               reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    +               reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    -               reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    ~               reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    !               reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    CONSTANCE       reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    STRING_LITERAL  reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    CASE            reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    DEFAULT         reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    CONTINUE        reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)
    BREAK           reduce using rule 303 (labeled_statement_switch -> CASE constant_expression : statement .)


state 597

    (323) iteration_statement_switch -> WHILE ( expression_variable ) . statement_while_switch
    (335) statement_while_switch -> . labeled_statement_switch
    (336) statement_while_switch -> . compound_statement_while_switch
    (337) statement_while_switch -> . expression_statement
    (338) statement_while_switch -> . selection_statement_while
    (339) statement_while_switch -> . iteration_statement_switch
    (340) statement_while_switch -> . jump_statement_while
    (302) labeled_statement_switch -> . ID :
    (303) labeled_statement_switch -> . CASE constant_expression : statement
    (304) labeled_statement_switch -> . DEFAULT : statement
    (329) compound_statement_while_switch -> . { }
    (330) compound_statement_while_switch -> . { block_item_list_while_switch }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (323) iteration_statement_switch -> . WHILE ( expression_variable ) statement_while_switch
    (324) iteration_statement_switch -> . DO statement_while_switch WHILE ( expression_variable ) ;
    (325) iteration_statement_switch -> . FOR ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> . FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> . FOR ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> . FOR ( declaration expression_statement expression_variable ) statement_while_switch
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ID              shift and go to state 530
    CASE            shift and go to state 531
    DEFAULT         shift and go to state 532
    {               shift and go to state 569
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 534
    DO              shift and go to state 535
    FOR             shift and go to state 536
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 132
    statement_while_switch         shift and go to state 604
    labeled_statement_switch       shift and go to state 563
    compound_statement_while_switch shift and go to state 564
    expression_statement           shift and go to state 565
    selection_statement_while      shift and go to state 566
    iteration_statement_switch     shift and go to state 567
    jump_statement_while           shift and go to state 568
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 598

    (324) iteration_statement_switch -> DO statement_while_switch WHILE ( . expression_variable ) ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 605
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 599

    (330) compound_statement_while_switch -> { block_item_list_while_switch } .

    WHILE           reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    ELSE            reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    }               reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    {               reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    ;               reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    IF              reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    SWITCH          reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    DO              reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    FOR             reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    GOTO            reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    RETURN          reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    TYPEDEF         reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    EXTERN          reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    STATIC          reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    AUTO            reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    REGISTER        reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    VOID            reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    CHAR            reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    SHORT           reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    INT             reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    LONG            reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    FLOAT           reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    DOUBLE          reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    SIGNED          reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    UNSIGNED        reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    BOOL            reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    CONST           reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    VOLATILE        reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    RESTRICT        reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    (               reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    ID              reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    ENUM            reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    STRUCT          reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    UNION           reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    INC             reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    DEC             reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    SIZEOF          reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    &               reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    *               reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    +               reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    -               reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    ~               reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    !               reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    CONSTANCE       reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    STRING_LITERAL  reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    CASE            reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    DEFAULT         reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    CONTINUE        reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)
    BREAK           reduce using rule 330 (compound_statement_while_switch -> { block_item_list_while_switch } .)


state 600

    (332) block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .

    }               reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    ID              reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    CASE            reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    DEFAULT         reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    {               reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    ;               reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    IF              reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    SWITCH          reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    WHILE           reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    DO              reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    FOR             reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    GOTO            reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    CONTINUE        reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    BREAK           reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    RETURN          reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    TYPEDEF         reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    EXTERN          reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    STATIC          reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    AUTO            reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    REGISTER        reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    VOID            reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    CHAR            reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    SHORT           reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    INT             reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    LONG            reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    FLOAT           reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    DOUBLE          reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    SIGNED          reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    UNSIGNED        reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    BOOL            reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    CONST           reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    VOLATILE        reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    RESTRICT        reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    ENUM            reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    STRUCT          reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    UNION           reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    INC             reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    DEC             reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    SIZEOF          reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    &               reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    *               reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    +               reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    -               reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    ~               reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    !               reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    (               reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    CONSTANCE       reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)
    STRING_LITERAL  reduce using rule 332 (block_item_list_while_switch -> block_item_list_while_switch block_item_while_switch .)


state 601

    (325) iteration_statement_switch -> FOR ( expression_statement expression_statement . ) statement_while_switch
    (326) iteration_statement_switch -> FOR ( expression_statement expression_statement . expression_variable ) statement_while_switch
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    )               shift and go to state 606
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 607
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 602

    (327) iteration_statement_switch -> FOR ( declaration expression_statement . ) statement_while_switch
    (328) iteration_statement_switch -> FOR ( declaration expression_statement . expression_variable ) statement_while_switch
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    )               shift and go to state 608
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    ID              shift and go to state 42
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_variable            shift and go to state 609
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 603

    (287) selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .

    WHILE           reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    }               reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    {               reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    ;               reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    IF              reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    SWITCH          reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    DO              reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    FOR             reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    GOTO            reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    CONTINUE        reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    BREAK           reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    RETURN          reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    TYPEDEF         reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    EXTERN          reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    STATIC          reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    AUTO            reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    REGISTER        reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    VOID            reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    CHAR            reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    SHORT           reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    INT             reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    LONG            reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    FLOAT           reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    DOUBLE          reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    SIGNED          reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    UNSIGNED        reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    BOOL            reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    CONST           reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    VOLATILE        reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    RESTRICT        reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    (               reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    ID              reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    ENUM            reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    STRUCT          reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    UNION           reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    INC             reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    DEC             reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    SIZEOF          reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    &               reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    *               reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    +               reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    -               reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    ~               reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    !               reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    CONSTANCE       reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    STRING_LITERAL  reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    ELSE            reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    CASE            reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)
    DEFAULT         reduce using rule 287 (selection_statement_while -> IF ( expression_variable ) statement_while ELSE statement_while .)


state 604

    (323) iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .

    ELSE            reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    }               reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    {               reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    ;               reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    IF              reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    SWITCH          reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    WHILE           reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    DO              reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    FOR             reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    GOTO            reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    RETURN          reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    TYPEDEF         reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    EXTERN          reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    STATIC          reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    AUTO            reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    REGISTER        reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    VOID            reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    CHAR            reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    SHORT           reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    INT             reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    LONG            reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    FLOAT           reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    DOUBLE          reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    SIGNED          reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    UNSIGNED        reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    BOOL            reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    CONST           reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    VOLATILE        reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    RESTRICT        reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    (               reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    ID              reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    ENUM            reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    STRUCT          reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    UNION           reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    INC             reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    DEC             reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    SIZEOF          reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    &               reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    *               reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    +               reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    -               reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    ~               reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    !               reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    CONSTANCE       reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    STRING_LITERAL  reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    CASE            reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    DEFAULT         reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    CONTINUE        reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)
    BREAK           reduce using rule 323 (iteration_statement_switch -> WHILE ( expression_variable ) statement_while_switch .)


state 605

    (324) iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable . ) ;
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 610
    ,               shift and go to state 243


state 606

    (325) iteration_statement_switch -> FOR ( expression_statement expression_statement ) . statement_while_switch
    (335) statement_while_switch -> . labeled_statement_switch
    (336) statement_while_switch -> . compound_statement_while_switch
    (337) statement_while_switch -> . expression_statement
    (338) statement_while_switch -> . selection_statement_while
    (339) statement_while_switch -> . iteration_statement_switch
    (340) statement_while_switch -> . jump_statement_while
    (302) labeled_statement_switch -> . ID :
    (303) labeled_statement_switch -> . CASE constant_expression : statement
    (304) labeled_statement_switch -> . DEFAULT : statement
    (329) compound_statement_while_switch -> . { }
    (330) compound_statement_while_switch -> . { block_item_list_while_switch }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (323) iteration_statement_switch -> . WHILE ( expression_variable ) statement_while_switch
    (324) iteration_statement_switch -> . DO statement_while_switch WHILE ( expression_variable ) ;
    (325) iteration_statement_switch -> . FOR ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> . FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> . FOR ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> . FOR ( declaration expression_statement expression_variable ) statement_while_switch
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ID              shift and go to state 530
    CASE            shift and go to state 531
    DEFAULT         shift and go to state 532
    {               shift and go to state 569
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 534
    DO              shift and go to state 535
    FOR             shift and go to state 536
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 565
    statement_while_switch         shift and go to state 611
    labeled_statement_switch       shift and go to state 563
    compound_statement_while_switch shift and go to state 564
    selection_statement_while      shift and go to state 566
    iteration_statement_switch     shift and go to state 567
    jump_statement_while           shift and go to state 568
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 607

    (326) iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable . ) statement_while_switch
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 612
    ,               shift and go to state 243


state 608

    (327) iteration_statement_switch -> FOR ( declaration expression_statement ) . statement_while_switch
    (335) statement_while_switch -> . labeled_statement_switch
    (336) statement_while_switch -> . compound_statement_while_switch
    (337) statement_while_switch -> . expression_statement
    (338) statement_while_switch -> . selection_statement_while
    (339) statement_while_switch -> . iteration_statement_switch
    (340) statement_while_switch -> . jump_statement_while
    (302) labeled_statement_switch -> . ID :
    (303) labeled_statement_switch -> . CASE constant_expression : statement
    (304) labeled_statement_switch -> . DEFAULT : statement
    (329) compound_statement_while_switch -> . { }
    (330) compound_statement_while_switch -> . { block_item_list_while_switch }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (323) iteration_statement_switch -> . WHILE ( expression_variable ) statement_while_switch
    (324) iteration_statement_switch -> . DO statement_while_switch WHILE ( expression_variable ) ;
    (325) iteration_statement_switch -> . FOR ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> . FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> . FOR ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> . FOR ( declaration expression_statement expression_variable ) statement_while_switch
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ID              shift and go to state 530
    CASE            shift and go to state 531
    DEFAULT         shift and go to state 532
    {               shift and go to state 569
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 534
    DO              shift and go to state 535
    FOR             shift and go to state 536
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 565
    statement_while_switch         shift and go to state 613
    labeled_statement_switch       shift and go to state 563
    compound_statement_while_switch shift and go to state 564
    selection_statement_while      shift and go to state 566
    iteration_statement_switch     shift and go to state 567
    jump_statement_while           shift and go to state 568
    expression_variable            shift and go to state 132
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 609

    (328) iteration_statement_switch -> FOR ( declaration expression_statement expression_variable . ) statement_while_switch
    (207) expression_variable -> expression_variable . , assignment_expression

    )               shift and go to state 614
    ,               shift and go to state 243


state 610

    (324) iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) . ;

    ;               shift and go to state 615


state 611

    (325) iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .

    ELSE            reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    }               reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    {               reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    ;               reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    IF              reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    SWITCH          reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    WHILE           reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    DO              reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    FOR             reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    GOTO            reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    RETURN          reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    TYPEDEF         reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    EXTERN          reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    STATIC          reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    AUTO            reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    REGISTER        reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    VOID            reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    CHAR            reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    SHORT           reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    INT             reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    LONG            reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    FLOAT           reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    DOUBLE          reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    SIGNED          reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    UNSIGNED        reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    BOOL            reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    CONST           reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    VOLATILE        reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    RESTRICT        reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    (               reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    ID              reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    ENUM            reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    STRUCT          reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    UNION           reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    INC             reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    DEC             reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    SIZEOF          reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    &               reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    *               reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    +               reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    -               reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    ~               reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    !               reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    CONSTANCE       reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    STRING_LITERAL  reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    CASE            reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    DEFAULT         reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    CONTINUE        reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)
    BREAK           reduce using rule 325 (iteration_statement_switch -> FOR ( expression_statement expression_statement ) statement_while_switch .)


state 612

    (326) iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) . statement_while_switch
    (335) statement_while_switch -> . labeled_statement_switch
    (336) statement_while_switch -> . compound_statement_while_switch
    (337) statement_while_switch -> . expression_statement
    (338) statement_while_switch -> . selection_statement_while
    (339) statement_while_switch -> . iteration_statement_switch
    (340) statement_while_switch -> . jump_statement_while
    (302) labeled_statement_switch -> . ID :
    (303) labeled_statement_switch -> . CASE constant_expression : statement
    (304) labeled_statement_switch -> . DEFAULT : statement
    (329) compound_statement_while_switch -> . { }
    (330) compound_statement_while_switch -> . { block_item_list_while_switch }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (323) iteration_statement_switch -> . WHILE ( expression_variable ) statement_while_switch
    (324) iteration_statement_switch -> . DO statement_while_switch WHILE ( expression_variable ) ;
    (325) iteration_statement_switch -> . FOR ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> . FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> . FOR ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> . FOR ( declaration expression_statement expression_variable ) statement_while_switch
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ID              shift and go to state 530
    CASE            shift and go to state 531
    DEFAULT         shift and go to state 532
    {               shift and go to state 569
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 534
    DO              shift and go to state 535
    FOR             shift and go to state 536
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 565
    expression_variable            shift and go to state 132
    statement_while_switch         shift and go to state 616
    labeled_statement_switch       shift and go to state 563
    compound_statement_while_switch shift and go to state 564
    selection_statement_while      shift and go to state 566
    iteration_statement_switch     shift and go to state 567
    jump_statement_while           shift and go to state 568
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 613

    (327) iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .

    ELSE            reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    }               reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    {               reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    ;               reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    IF              reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    SWITCH          reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    WHILE           reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    DO              reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    FOR             reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    GOTO            reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    RETURN          reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    TYPEDEF         reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    EXTERN          reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    STATIC          reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    AUTO            reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    REGISTER        reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    VOID            reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    CHAR            reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    SHORT           reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    INT             reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    LONG            reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    FLOAT           reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    DOUBLE          reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    SIGNED          reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    UNSIGNED        reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    BOOL            reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    CONST           reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    VOLATILE        reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    RESTRICT        reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    (               reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    ID              reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    ENUM            reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    STRUCT          reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    UNION           reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    INC             reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    DEC             reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    SIZEOF          reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    &               reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    *               reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    +               reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    -               reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    ~               reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    !               reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    CONSTANCE       reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    STRING_LITERAL  reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    CASE            reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    DEFAULT         reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    CONTINUE        reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)
    BREAK           reduce using rule 327 (iteration_statement_switch -> FOR ( declaration expression_statement ) statement_while_switch .)


state 614

    (328) iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) . statement_while_switch
    (335) statement_while_switch -> . labeled_statement_switch
    (336) statement_while_switch -> . compound_statement_while_switch
    (337) statement_while_switch -> . expression_statement
    (338) statement_while_switch -> . selection_statement_while
    (339) statement_while_switch -> . iteration_statement_switch
    (340) statement_while_switch -> . jump_statement_while
    (302) labeled_statement_switch -> . ID :
    (303) labeled_statement_switch -> . CASE constant_expression : statement
    (304) labeled_statement_switch -> . DEFAULT : statement
    (329) compound_statement_while_switch -> . { }
    (330) compound_statement_while_switch -> . { block_item_list_while_switch }
    (204) expression_statement -> . ;
    (205) expression_statement -> . expression_variable ;
    (287) selection_statement_while -> . IF ( expression_variable ) statement_while ELSE statement_while
    (288) selection_statement_while -> . IF ( expression_variable ) statement_while
    (289) selection_statement_while -> . SWITCH ( expression_variable ) statement_while_switch
    (323) iteration_statement_switch -> . WHILE ( expression_variable ) statement_while_switch
    (324) iteration_statement_switch -> . DO statement_while_switch WHILE ( expression_variable ) ;
    (325) iteration_statement_switch -> . FOR ( expression_statement expression_statement ) statement_while_switch
    (326) iteration_statement_switch -> . FOR ( expression_statement expression_statement expression_variable ) statement_while_switch
    (327) iteration_statement_switch -> . FOR ( declaration expression_statement ) statement_while_switch
    (328) iteration_statement_switch -> . FOR ( declaration expression_statement expression_variable ) statement_while_switch
    (344) jump_statement_while -> . GOTO ID ;
    (345) jump_statement_while -> . CONTINUE ;
    (346) jump_statement_while -> . BREAK ;
    (347) jump_statement_while -> . RETURN ;
    (348) jump_statement_while -> . RETURN expression_variable ;
    (206) expression_variable -> . assignment_expression
    (207) expression_variable -> . expression_variable , assignment_expression
    (208) assignment_expression -> . conditional_expression_v
    (209) assignment_expression -> . unary_expression_v assignment_operator assignment_expression
    (221) conditional_expression_v -> . logical_or_expression_v
    (222) conditional_expression_v -> . logical_or_expression_v ? expression_variable : conditional_expression_v
    (257) unary_expression_v -> . postfix_expression_v
    (258) unary_expression_v -> . INC unary_expression_v
    (259) unary_expression_v -> . DEC unary_expression_v
    (260) unary_expression_v -> . unary_operator_v cast_expression_v
    (261) unary_expression_v -> . SIZEOF unary_expression_v
    (223) logical_or_expression_v -> . logical_and_expression_v
    (224) logical_or_expression_v -> . logical_or_expression_v OR logical_and_expression_v
    (268) postfix_expression_v -> . postfix_expression_v_no_func
    (269) postfix_expression_v -> . postfix_expression_v [ expression ]
    (270) postfix_expression_v -> . identifier ( )
    (271) postfix_expression_v -> . identifier ( argument_expression_list )
    (272) postfix_expression_v -> . postfix_expression_v . ID
    (273) postfix_expression_v -> . postfix_expression_v PTR ID
    (274) postfix_expression_v -> . postfix_expression_v_no_func INC
    (275) postfix_expression_v -> . postfix_expression_v_no_func DEC
    (262) unary_operator_v -> . &
    (263) unary_operator_v -> . *
    (264) unary_operator_v -> . +
    (265) unary_operator_v -> . -
    (266) unary_operator_v -> . ~
    (267) unary_operator_v -> . !
    (225) logical_and_expression_v -> . inclusive_or_expression_v
    (226) logical_and_expression_v -> . logical_and_expression_v AND inclusive_or_expression_v
    (276) postfix_expression_v_no_func -> . identifier
    (277) postfix_expression_v_no_func -> . ( postfix_expression_v_no_func )
    (278) postfix_expression_v_no_func -> . postfix_expression_v_no_func [ expression ]
    (279) postfix_expression_v_no_func -> . postfix_expression_v_no_func . ID
    (280) postfix_expression_v_no_func -> . postfix_expression_v_no_func PTR ID
    (183) identifier -> . ( identifier )
    (184) identifier -> . ID
    (227) inclusive_or_expression_v -> . exclusive_or_expression_v
    (228) inclusive_or_expression_v -> . inclusive_or_expression_v | exclusive_or_expression_v
    (229) exclusive_or_expression_v -> . and_expression_v
    (230) exclusive_or_expression_v -> . exclusive_or_expression_v ^ and_expression_v
    (231) and_expression_v -> . equality_expression_v
    (232) and_expression_v -> . and_expression_v & equality_expression_v
    (233) equality_expression_v -> . relational_expression_v
    (234) equality_expression_v -> . equality_expression_v EQUAL relational_expression_v
    (235) equality_expression_v -> . equality_expression_v NE relational_expression_v
    (236) relational_expression_v -> . shift_expression_v
    (237) relational_expression_v -> . relational_expression_v < shift_expression_v
    (238) relational_expression_v -> . relational_expression_v > shift_expression_v
    (239) relational_expression_v -> . relational_expression_v LE shift_expression_v
    (240) relational_expression_v -> . relational_expression_v GE shift_expression_v
    (241) shift_expression_v -> . additive_expression_v
    (242) shift_expression_v -> . shift_expression_v SHIFT_LEFT additive_expression_v
    (243) shift_expression_v -> . shift_expression_v SHIFT_RIGHT additive_expression_v
    (244) additive_expression_v -> . multiplicative_expression_v
    (245) additive_expression_v -> . additive_expression_v + multiplicative_expression_v
    (246) additive_expression_v -> . additive_expression_v - multiplicative_expression_v
    (247) multiplicative_expression_v -> . cast_expression_v
    (248) multiplicative_expression_v -> . multiplicative_expression_v * cast_expression_v
    (249) multiplicative_expression_v -> . multiplicative_expression_v / cast_expression_v
    (250) multiplicative_expression_v -> . multiplicative_expression_v % cast_expression_v
    (251) cast_expression_v -> . unary_expression_v
    (252) cast_expression_v -> . unary_expression_v_constance
    (253) cast_expression_v -> . ( type_name ) cast_expression_v
    (254) unary_expression_v_constance -> . primary_expression_v
    (255) unary_expression_v_constance -> . SIZEOF unary_expression_v_constance
    (256) unary_expression_v_constance -> . SIZEOF ( type_name )
    (281) primary_expression_v -> . CONSTANCE
    (282) primary_expression_v -> . STRING_LITERAL
    (283) primary_expression_v -> . ( expression_variable )

    ID              shift and go to state 530
    CASE            shift and go to state 531
    DEFAULT         shift and go to state 532
    {               shift and go to state 569
    ;               shift and go to state 124
    IF              shift and go to state 260
    SWITCH          shift and go to state 261
    WHILE           shift and go to state 534
    DO              shift and go to state 535
    FOR             shift and go to state 536
    GOTO            shift and go to state 262
    CONTINUE        shift and go to state 263
    BREAK           shift and go to state 264
    RETURN          shift and go to state 265
    INC             shift and go to state 146
    DEC             shift and go to state 147
    SIZEOF          shift and go to state 150
    &               shift and go to state 153
    *               shift and go to state 154
    +               shift and go to state 155
    -               shift and go to state 156
    ~               shift and go to state 157
    !               shift and go to state 158
    (               shift and go to state 221
    CONSTANCE       shift and go to state 169
    STRING_LITERAL  shift and go to state 170

    expression_statement           shift and go to state 565
    expression_variable            shift and go to state 132
    statement_while_switch         shift and go to state 617
    labeled_statement_switch       shift and go to state 563
    compound_statement_while_switch shift and go to state 564
    selection_statement_while      shift and go to state 566
    iteration_statement_switch     shift and go to state 567
    jump_statement_while           shift and go to state 568
    assignment_expression          shift and go to state 141
    conditional_expression_v       shift and go to state 142
    unary_expression_v             shift and go to state 143
    logical_or_expression_v        shift and go to state 144
    postfix_expression_v           shift and go to state 145
    unary_operator_v               shift and go to state 148
    cast_expression_v              shift and go to state 149
    logical_and_expression_v       shift and go to state 151
    postfix_expression_v_no_func   shift and go to state 152
    identifier                     shift and go to state 220
    inclusive_or_expression_v      shift and go to state 159
    exclusive_or_expression_v      shift and go to state 160
    and_expression_v               shift and go to state 161
    equality_expression_v          shift and go to state 162
    relational_expression_v        shift and go to state 163
    shift_expression_v             shift and go to state 164
    additive_expression_v          shift and go to state 165
    multiplicative_expression_v    shift and go to state 166
    unary_expression_v_constance   shift and go to state 167
    primary_expression_v           shift and go to state 168

state 615

    (324) iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .

    ELSE            reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    }               reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    {               reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    ;               reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    IF              reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    SWITCH          reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    WHILE           reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    DO              reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    FOR             reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    GOTO            reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    RETURN          reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    TYPEDEF         reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    EXTERN          reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    STATIC          reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    AUTO            reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    REGISTER        reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    VOID            reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    CHAR            reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    SHORT           reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    INT             reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    LONG            reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    FLOAT           reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    DOUBLE          reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    SIGNED          reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    UNSIGNED        reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    BOOL            reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    CONST           reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    VOLATILE        reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    RESTRICT        reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    (               reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    ID              reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    ENUM            reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    STRUCT          reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    UNION           reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    INC             reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    DEC             reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    SIZEOF          reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    &               reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    *               reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    +               reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    -               reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    ~               reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    !               reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    CONSTANCE       reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    STRING_LITERAL  reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    CASE            reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    DEFAULT         reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    CONTINUE        reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)
    BREAK           reduce using rule 324 (iteration_statement_switch -> DO statement_while_switch WHILE ( expression_variable ) ; .)


state 616

    (326) iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .

    ELSE            reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    }               reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    {               reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    ;               reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    IF              reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    SWITCH          reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    WHILE           reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    DO              reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    FOR             reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    GOTO            reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    RETURN          reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    TYPEDEF         reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    EXTERN          reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    STATIC          reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    AUTO            reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    REGISTER        reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    VOID            reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    CHAR            reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    SHORT           reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    INT             reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    LONG            reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    FLOAT           reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    DOUBLE          reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    SIGNED          reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    UNSIGNED        reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    BOOL            reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    CONST           reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    VOLATILE        reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    RESTRICT        reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    (               reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    ID              reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    ENUM            reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    STRUCT          reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    UNION           reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    INC             reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    DEC             reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    SIZEOF          reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    &               reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    *               reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    +               reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    -               reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    ~               reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    !               reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    CONSTANCE       reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    STRING_LITERAL  reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    CASE            reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    DEFAULT         reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    CONTINUE        reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)
    BREAK           reduce using rule 326 (iteration_statement_switch -> FOR ( expression_statement expression_statement expression_variable ) statement_while_switch .)


state 617

    (328) iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .

    ELSE            reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    }               reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    {               reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    ;               reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    IF              reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    SWITCH          reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    WHILE           reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    DO              reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    FOR             reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    GOTO            reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    RETURN          reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    TYPEDEF         reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    EXTERN          reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    STATIC          reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    AUTO            reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    REGISTER        reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    VOID            reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    CHAR            reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    SHORT           reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    INT             reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    LONG            reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    FLOAT           reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    DOUBLE          reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    SIGNED          reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    UNSIGNED        reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    BOOL            reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    CONST           reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    VOLATILE        reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    RESTRICT        reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    (               reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    ID              reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    ENUM            reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    STRUCT          reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    UNION           reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    INC             reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    DEC             reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    SIZEOF          reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    &               reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    *               reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    +               reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    -               reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    ~               reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    !               reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    CONSTANCE       reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    STRING_LITERAL  reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    CASE            reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    DEFAULT         reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    CONTINUE        reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)
    BREAK           reduce using rule 328 (iteration_statement_switch -> FOR ( declaration expression_statement expression_variable ) statement_while_switch .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 40 resolved as shift
WARNING: shift/reduce conflict for ) in state 84 resolved as shift
WARNING: shift/reduce conflict for ) in state 85 resolved as shift
WARNING: shift/reduce conflict for [ in state 85 resolved as shift
WARNING: shift/reduce conflict for ) in state 87 resolved as shift
WARNING: shift/reduce conflict for [ in state 152 resolved as shift
WARNING: shift/reduce conflict for . in state 152 resolved as shift
WARNING: shift/reduce conflict for PTR in state 152 resolved as shift
WARNING: shift/reduce conflict for [ in state 175 resolved as shift
WARNING: shift/reduce conflict for ) in state 179 resolved as shift
WARNING: shift/reduce conflict for ) in state 180 resolved as shift
WARNING: shift/reduce conflict for ) in state 245 resolved as shift
WARNING: shift/reduce conflict for [ in state 246 resolved as shift
WARNING: shift/reduce conflict for . in state 246 resolved as shift
WARNING: shift/reduce conflict for PTR in state 246 resolved as shift
WARNING: shift/reduce conflict for ) in state 246 resolved as shift
WARNING: shift/reduce conflict for ) in state 321 resolved as shift
WARNING: shift/reduce conflict for [ in state 321 resolved as shift
WARNING: shift/reduce conflict for ) in state 418 resolved as shift
WARNING: shift/reduce conflict for ) in state 471 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 520 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 572 resolved as shift
